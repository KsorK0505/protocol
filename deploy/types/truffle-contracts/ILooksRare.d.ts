/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ILooksRareContract
  extends Truffle.Contract<ILooksRareInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILooksRareInstance>;
}

type AllEvents = never;

export interface ILooksRareInstance extends Truffle.ContractInstance {
  matchAskWithTakerBidUsingETHAndWETH: {
    (
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: number | BN | string;
        tokenId: number | BN | string;
        minPercentageToAsk: number | BN | string;
        params: string;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: number | BN | string;
        tokenId: number | BN | string;
        amount: number | BN | string;
        strategy: string;
        currency: string;
        nonce: number | BN | string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        minPercentageToAsk: number | BN | string;
        params: string;
        v: number | BN | string;
        r: string;
        s: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: number | BN | string;
        tokenId: number | BN | string;
        minPercentageToAsk: number | BN | string;
        params: string;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: number | BN | string;
        tokenId: number | BN | string;
        amount: number | BN | string;
        strategy: string;
        currency: string;
        nonce: number | BN | string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        minPercentageToAsk: number | BN | string;
        params: string;
        v: number | BN | string;
        r: string;
        s: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: number | BN | string;
        tokenId: number | BN | string;
        minPercentageToAsk: number | BN | string;
        params: string;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: number | BN | string;
        tokenId: number | BN | string;
        amount: number | BN | string;
        strategy: string;
        currency: string;
        nonce: number | BN | string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        minPercentageToAsk: number | BN | string;
        params: string;
        v: number | BN | string;
        r: string;
        s: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      takerBid: {
        isOrderAsk: boolean;
        taker: string;
        price: number | BN | string;
        tokenId: number | BN | string;
        minPercentageToAsk: number | BN | string;
        params: string;
      },
      makerAsk: {
        isOrderAsk: boolean;
        signer: string;
        collection: string;
        price: number | BN | string;
        tokenId: number | BN | string;
        amount: number | BN | string;
        strategy: string;
        currency: string;
        nonce: number | BN | string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        minPercentageToAsk: number | BN | string;
        params: string;
        v: number | BN | string;
        r: string;
        s: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeTakerBid: {
    (
      takerBid: { recipient: string; additionalParameters: string },
      makerAsk: {
        quoteType: number | BN | string;
        globalNonce: number | BN | string;
        subsetNonce: number | BN | string;
        orderNonce: number | BN | string;
        strategyId: number | BN | string;
        collectionType: number | BN | string;
        collection: string;
        currency: string;
        signer: string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        price: number | BN | string;
        itemIds: (number | BN | string)[];
        amounts: (number | BN | string)[];
        additionalParameters: string;
      },
      makerSignature: string,
      merkleTree: {
        root: string;
        proof: { value: string; position: number | BN | string }[];
      },
      affiliate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      takerBid: { recipient: string; additionalParameters: string },
      makerAsk: {
        quoteType: number | BN | string;
        globalNonce: number | BN | string;
        subsetNonce: number | BN | string;
        orderNonce: number | BN | string;
        strategyId: number | BN | string;
        collectionType: number | BN | string;
        collection: string;
        currency: string;
        signer: string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        price: number | BN | string;
        itemIds: (number | BN | string)[];
        amounts: (number | BN | string)[];
        additionalParameters: string;
      },
      makerSignature: string,
      merkleTree: {
        root: string;
        proof: { value: string; position: number | BN | string }[];
      },
      affiliate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      takerBid: { recipient: string; additionalParameters: string },
      makerAsk: {
        quoteType: number | BN | string;
        globalNonce: number | BN | string;
        subsetNonce: number | BN | string;
        orderNonce: number | BN | string;
        strategyId: number | BN | string;
        collectionType: number | BN | string;
        collection: string;
        currency: string;
        signer: string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        price: number | BN | string;
        itemIds: (number | BN | string)[];
        amounts: (number | BN | string)[];
        additionalParameters: string;
      },
      makerSignature: string,
      merkleTree: {
        root: string;
        proof: { value: string; position: number | BN | string }[];
      },
      affiliate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      takerBid: { recipient: string; additionalParameters: string },
      makerAsk: {
        quoteType: number | BN | string;
        globalNonce: number | BN | string;
        subsetNonce: number | BN | string;
        orderNonce: number | BN | string;
        strategyId: number | BN | string;
        collectionType: number | BN | string;
        collection: string;
        currency: string;
        signer: string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        price: number | BN | string;
        itemIds: (number | BN | string)[];
        amounts: (number | BN | string)[];
        additionalParameters: string;
      },
      makerSignature: string,
      merkleTree: {
        root: string;
        proof: { value: string; position: number | BN | string }[];
      },
      affiliate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    matchAskWithTakerBidUsingETHAndWETH: {
      (
        takerBid: {
          isOrderAsk: boolean;
          taker: string;
          price: number | BN | string;
          tokenId: number | BN | string;
          minPercentageToAsk: number | BN | string;
          params: string;
        },
        makerAsk: {
          isOrderAsk: boolean;
          signer: string;
          collection: string;
          price: number | BN | string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          strategy: string;
          currency: string;
          nonce: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          minPercentageToAsk: number | BN | string;
          params: string;
          v: number | BN | string;
          r: string;
          s: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        takerBid: {
          isOrderAsk: boolean;
          taker: string;
          price: number | BN | string;
          tokenId: number | BN | string;
          minPercentageToAsk: number | BN | string;
          params: string;
        },
        makerAsk: {
          isOrderAsk: boolean;
          signer: string;
          collection: string;
          price: number | BN | string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          strategy: string;
          currency: string;
          nonce: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          minPercentageToAsk: number | BN | string;
          params: string;
          v: number | BN | string;
          r: string;
          s: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        takerBid: {
          isOrderAsk: boolean;
          taker: string;
          price: number | BN | string;
          tokenId: number | BN | string;
          minPercentageToAsk: number | BN | string;
          params: string;
        },
        makerAsk: {
          isOrderAsk: boolean;
          signer: string;
          collection: string;
          price: number | BN | string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          strategy: string;
          currency: string;
          nonce: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          minPercentageToAsk: number | BN | string;
          params: string;
          v: number | BN | string;
          r: string;
          s: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        takerBid: {
          isOrderAsk: boolean;
          taker: string;
          price: number | BN | string;
          tokenId: number | BN | string;
          minPercentageToAsk: number | BN | string;
          params: string;
        },
        makerAsk: {
          isOrderAsk: boolean;
          signer: string;
          collection: string;
          price: number | BN | string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          strategy: string;
          currency: string;
          nonce: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          minPercentageToAsk: number | BN | string;
          params: string;
          v: number | BN | string;
          r: string;
          s: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeTakerBid: {
      (
        takerBid: { recipient: string; additionalParameters: string },
        makerAsk: {
          quoteType: number | BN | string;
          globalNonce: number | BN | string;
          subsetNonce: number | BN | string;
          orderNonce: number | BN | string;
          strategyId: number | BN | string;
          collectionType: number | BN | string;
          collection: string;
          currency: string;
          signer: string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          price: number | BN | string;
          itemIds: (number | BN | string)[];
          amounts: (number | BN | string)[];
          additionalParameters: string;
        },
        makerSignature: string,
        merkleTree: {
          root: string;
          proof: { value: string; position: number | BN | string }[];
        },
        affiliate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        takerBid: { recipient: string; additionalParameters: string },
        makerAsk: {
          quoteType: number | BN | string;
          globalNonce: number | BN | string;
          subsetNonce: number | BN | string;
          orderNonce: number | BN | string;
          strategyId: number | BN | string;
          collectionType: number | BN | string;
          collection: string;
          currency: string;
          signer: string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          price: number | BN | string;
          itemIds: (number | BN | string)[];
          amounts: (number | BN | string)[];
          additionalParameters: string;
        },
        makerSignature: string,
        merkleTree: {
          root: string;
          proof: { value: string; position: number | BN | string }[];
        },
        affiliate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        takerBid: { recipient: string; additionalParameters: string },
        makerAsk: {
          quoteType: number | BN | string;
          globalNonce: number | BN | string;
          subsetNonce: number | BN | string;
          orderNonce: number | BN | string;
          strategyId: number | BN | string;
          collectionType: number | BN | string;
          collection: string;
          currency: string;
          signer: string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          price: number | BN | string;
          itemIds: (number | BN | string)[];
          amounts: (number | BN | string)[];
          additionalParameters: string;
        },
        makerSignature: string,
        merkleTree: {
          root: string;
          proof: { value: string; position: number | BN | string }[];
        },
        affiliate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        takerBid: { recipient: string; additionalParameters: string },
        makerAsk: {
          quoteType: number | BN | string;
          globalNonce: number | BN | string;
          subsetNonce: number | BN | string;
          orderNonce: number | BN | string;
          strategyId: number | BN | string;
          collectionType: number | BN | string;
          collection: string;
          currency: string;
          signer: string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          price: number | BN | string;
          itemIds: (number | BN | string)[];
          amounts: (number | BN | string)[];
          additionalParameters: string;
        },
        makerSignature: string,
        merkleTree: {
          root: string;
          proof: { value: string; position: number | BN | string }[];
        },
        affiliate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
