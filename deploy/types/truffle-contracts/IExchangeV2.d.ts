/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IExchangeV2Contract
  extends Truffle.Contract<IExchangeV2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IExchangeV2Instance>;
}

type AllEvents = never;

export interface IExchangeV2Instance extends Truffle.ContractInstance {
  matchOrders: {
    (
      orderLeft: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        salt: number | BN | string;
        start: number | BN | string;
        end: number | BN | string;
        dataType: string;
        data: string;
      },
      signatureLeft: string,
      orderRight: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        salt: number | BN | string;
        start: number | BN | string;
        end: number | BN | string;
        dataType: string;
        data: string;
      },
      signatureRight: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      orderLeft: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        salt: number | BN | string;
        start: number | BN | string;
        end: number | BN | string;
        dataType: string;
        data: string;
      },
      signatureLeft: string,
      orderRight: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        salt: number | BN | string;
        start: number | BN | string;
        end: number | BN | string;
        dataType: string;
        data: string;
      },
      signatureRight: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      orderLeft: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        salt: number | BN | string;
        start: number | BN | string;
        end: number | BN | string;
        dataType: string;
        data: string;
      },
      signatureLeft: string,
      orderRight: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        salt: number | BN | string;
        start: number | BN | string;
        end: number | BN | string;
        dataType: string;
        data: string;
      },
      signatureRight: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      orderLeft: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        salt: number | BN | string;
        start: number | BN | string;
        end: number | BN | string;
        dataType: string;
        data: string;
      },
      signatureLeft: string,
      orderRight: {
        maker: string;
        makeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        taker: string;
        takeAsset: {
          assetType: { assetClass: string; data: string };
          value: number | BN | string;
        };
        salt: number | BN | string;
        start: number | BN | string;
        end: number | BN | string;
        dataType: string;
        data: string;
      },
      signatureRight: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  directPurchase: {
    (
      direct: {
        sellOrderMaker: string;
        sellOrderNftAmount: number | BN | string;
        nftAssetClass: string;
        nftData: string;
        sellOrderPaymentAmount: number | BN | string;
        paymentToken: string;
        sellOrderSalt: number | BN | string;
        sellOrderStart: number | BN | string;
        sellOrderEnd: number | BN | string;
        sellOrderDataType: string;
        sellOrderData: string;
        sellOrderSignature: string;
        buyOrderPaymentAmount: number | BN | string;
        buyOrderNftAmount: number | BN | string;
        buyOrderData: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      direct: {
        sellOrderMaker: string;
        sellOrderNftAmount: number | BN | string;
        nftAssetClass: string;
        nftData: string;
        sellOrderPaymentAmount: number | BN | string;
        paymentToken: string;
        sellOrderSalt: number | BN | string;
        sellOrderStart: number | BN | string;
        sellOrderEnd: number | BN | string;
        sellOrderDataType: string;
        sellOrderData: string;
        sellOrderSignature: string;
        buyOrderPaymentAmount: number | BN | string;
        buyOrderNftAmount: number | BN | string;
        buyOrderData: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      direct: {
        sellOrderMaker: string;
        sellOrderNftAmount: number | BN | string;
        nftAssetClass: string;
        nftData: string;
        sellOrderPaymentAmount: number | BN | string;
        paymentToken: string;
        sellOrderSalt: number | BN | string;
        sellOrderStart: number | BN | string;
        sellOrderEnd: number | BN | string;
        sellOrderDataType: string;
        sellOrderData: string;
        sellOrderSignature: string;
        buyOrderPaymentAmount: number | BN | string;
        buyOrderNftAmount: number | BN | string;
        buyOrderData: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      direct: {
        sellOrderMaker: string;
        sellOrderNftAmount: number | BN | string;
        nftAssetClass: string;
        nftData: string;
        sellOrderPaymentAmount: number | BN | string;
        paymentToken: string;
        sellOrderSalt: number | BN | string;
        sellOrderStart: number | BN | string;
        sellOrderEnd: number | BN | string;
        sellOrderDataType: string;
        sellOrderData: string;
        sellOrderSignature: string;
        buyOrderPaymentAmount: number | BN | string;
        buyOrderNftAmount: number | BN | string;
        buyOrderData: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    matchOrders: {
      (
        orderLeft: {
          maker: string;
          makeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          taker: string;
          takeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          salt: number | BN | string;
          start: number | BN | string;
          end: number | BN | string;
          dataType: string;
          data: string;
        },
        signatureLeft: string,
        orderRight: {
          maker: string;
          makeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          taker: string;
          takeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          salt: number | BN | string;
          start: number | BN | string;
          end: number | BN | string;
          dataType: string;
          data: string;
        },
        signatureRight: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        orderLeft: {
          maker: string;
          makeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          taker: string;
          takeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          salt: number | BN | string;
          start: number | BN | string;
          end: number | BN | string;
          dataType: string;
          data: string;
        },
        signatureLeft: string,
        orderRight: {
          maker: string;
          makeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          taker: string;
          takeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          salt: number | BN | string;
          start: number | BN | string;
          end: number | BN | string;
          dataType: string;
          data: string;
        },
        signatureRight: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        orderLeft: {
          maker: string;
          makeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          taker: string;
          takeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          salt: number | BN | string;
          start: number | BN | string;
          end: number | BN | string;
          dataType: string;
          data: string;
        },
        signatureLeft: string,
        orderRight: {
          maker: string;
          makeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          taker: string;
          takeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          salt: number | BN | string;
          start: number | BN | string;
          end: number | BN | string;
          dataType: string;
          data: string;
        },
        signatureRight: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        orderLeft: {
          maker: string;
          makeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          taker: string;
          takeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          salt: number | BN | string;
          start: number | BN | string;
          end: number | BN | string;
          dataType: string;
          data: string;
        },
        signatureLeft: string,
        orderRight: {
          maker: string;
          makeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          taker: string;
          takeAsset: {
            assetType: { assetClass: string; data: string };
            value: number | BN | string;
          };
          salt: number | BN | string;
          start: number | BN | string;
          end: number | BN | string;
          dataType: string;
          data: string;
        },
        signatureRight: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    directPurchase: {
      (
        direct: {
          sellOrderMaker: string;
          sellOrderNftAmount: number | BN | string;
          nftAssetClass: string;
          nftData: string;
          sellOrderPaymentAmount: number | BN | string;
          paymentToken: string;
          sellOrderSalt: number | BN | string;
          sellOrderStart: number | BN | string;
          sellOrderEnd: number | BN | string;
          sellOrderDataType: string;
          sellOrderData: string;
          sellOrderSignature: string;
          buyOrderPaymentAmount: number | BN | string;
          buyOrderNftAmount: number | BN | string;
          buyOrderData: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        direct: {
          sellOrderMaker: string;
          sellOrderNftAmount: number | BN | string;
          nftAssetClass: string;
          nftData: string;
          sellOrderPaymentAmount: number | BN | string;
          paymentToken: string;
          sellOrderSalt: number | BN | string;
          sellOrderStart: number | BN | string;
          sellOrderEnd: number | BN | string;
          sellOrderDataType: string;
          sellOrderData: string;
          sellOrderSignature: string;
          buyOrderPaymentAmount: number | BN | string;
          buyOrderNftAmount: number | BN | string;
          buyOrderData: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        direct: {
          sellOrderMaker: string;
          sellOrderNftAmount: number | BN | string;
          nftAssetClass: string;
          nftData: string;
          sellOrderPaymentAmount: number | BN | string;
          paymentToken: string;
          sellOrderSalt: number | BN | string;
          sellOrderStart: number | BN | string;
          sellOrderEnd: number | BN | string;
          sellOrderDataType: string;
          sellOrderData: string;
          sellOrderSignature: string;
          buyOrderPaymentAmount: number | BN | string;
          buyOrderNftAmount: number | BN | string;
          buyOrderData: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        direct: {
          sellOrderMaker: string;
          sellOrderNftAmount: number | BN | string;
          nftAssetClass: string;
          nftData: string;
          sellOrderPaymentAmount: number | BN | string;
          paymentToken: string;
          sellOrderSalt: number | BN | string;
          sellOrderStart: number | BN | string;
          sellOrderEnd: number | BN | string;
          sellOrderDataType: string;
          sellOrderData: string;
          sellOrderSignature: string;
          buyOrderPaymentAmount: number | BN | string;
          buyOrderNftAmount: number | BN | string;
          buyOrderData: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
