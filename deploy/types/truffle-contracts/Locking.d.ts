/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LockingContract extends Truffle.Contract<LockingInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LockingInstance>;
}

export interface Delegate {
  name: "Delegate";
  args: {
    id: BN;
    account: string;
    delegate: string;
    time: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
  };
}

export interface DelegateChanged {
  name: "DelegateChanged";
  args: {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface DelegateVotesChanged {
  name: "DelegateVotesChanged";
  args: {
    delegate: string;
    previousBalance: BN;
    newBalance: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface LockCreate {
  name: "LockCreate";
  args: {
    id: BN;
    account: string;
    delegate: string;
    time: BN;
    amount: BN;
    slopePeriod: BN;
    cliff: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
  };
}

export interface Migrate {
  name: "Migrate";
  args: {
    account: string;
    id: BN[];
    0: string;
    1: BN[];
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface Relock {
  name: "Relock";
  args: {
    id: BN;
    account: string;
    delegate: string;
    counter: BN;
    time: BN;
    amount: BN;
    slopePeriod: BN;
    cliff: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
  };
}

export interface SetMinCliffPeriod {
  name: "SetMinCliffPeriod";
  args: {
    newMinCliffPeriod: BN;
    0: BN;
  };
}

export interface SetMinSlopePeriod {
  name: "SetMinSlopePeriod";
  args: {
    newMinSlopePeriod: BN;
    0: BN;
  };
}

export interface SetStartingPointWeek {
  name: "SetStartingPointWeek";
  args: {
    newStartingPointWeek: BN;
    0: BN;
  };
}

export interface StartLocking {
  name: "StartLocking";
  args: {
    account: string;
    0: string;
  };
}

export interface StartMigration {
  name: "StartMigration";
  args: {
    account: string;
    to: string;
    0: string;
    1: string;
  };
}

export interface StopLocking {
  name: "StopLocking";
  args: {
    account: string;
    0: string;
  };
}

export interface Withdraw {
  name: "Withdraw";
  args: {
    account: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | Delegate
  | DelegateChanged
  | DelegateVotesChanged
  | LockCreate
  | Migrate
  | OwnershipTransferred
  | Relock
  | SetMinCliffPeriod
  | SetMinSlopePeriod
  | SetStartingPointWeek
  | StartLocking
  | StartMigration
  | StopLocking
  | Withdraw;

export interface LockingInstance extends Truffle.ContractInstance {
  WEEK(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  counter(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Delegates votes from the sender to `delegatee`.
   */
  delegate: {
    (delegatee: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      delegatee: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Delegates votes from signer to `delegatee`.
   */
  delegateBySig: {
    (
      delegatee: string,
      nonce: number | BN | string,
      expiry: number | BN | string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      delegatee: string,
      nonce: number | BN | string,
      expiry: number | BN | string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      delegatee: string,
      nonce: number | BN | string,
      expiry: number | BN | string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      delegatee: string,
      nonce: number | BN | string,
      expiry: number | BN | string,
      v: number | BN | string,
      r: string,
      s: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the delegate that `account` has chosen.
   */
  delegates(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Ð¡alculate and return (newAmount, newSlope), using formula: locking = (tokens * (      ST_FORMULA_CONST_MULTIPLIER      + ST_FORMULA_CLIFF_MULTIPLIER * (cliffPeriod - minCliffPeriod))/(MAX_CLIFF_PERIOD - minCliffPeriod)      + ST_FORMULA_SLOPE_MULTIPLIER * (slopePeriod - minSlopePeriod))/(MAX_SLOPE_PERIOD - minSlopePeriod)      )) / ST_FORMULA_DIVIDER*
   */
  getLock(
    amount: number | BN | string,
    slopePeriod: number | BN | string,
    cliff: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  /**
   * Returns the total supply of votes available  at the end of the last period
   */
  getPastTotalSupply(
    blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the amount of votes that `account` had at the end of the last period
   */
  getPastVotes(
    account: string,
    blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Returns the current amount of votes that `account` has.
   */
  getVotes(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  migrateTo(txDetails?: Truffle.TransactionDetails): Promise<string>;

  minCliffPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  minSlopePeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  relock: {
    (
      id: number | BN | string,
      newDelegate: string,
      newAmount: number | BN | string,
      newSlopePeriod: number | BN | string,
      newCliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: number | BN | string,
      newDelegate: string,
      newAmount: number | BN | string,
      newSlopePeriod: number | BN | string,
      newCliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      id: number | BN | string,
      newDelegate: string,
      newAmount: number | BN | string,
      newSlopePeriod: number | BN | string,
      newCliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BN | string,
      newDelegate: string,
      newAmount: number | BN | string,
      newSlopePeriod: number | BN | string,
      newCliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  roundTimestamp(
    ts: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  setMinCliffPeriod: {
    (
      newMinCliffPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newMinCliffPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newMinCliffPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMinCliffPeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setMinSlopePeriod: {
    (
      newMinSlopePeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newMinSlopePeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newMinSlopePeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newMinSlopePeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setStartingPointWeek: {
    (
      newStartingPointWeek: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newStartingPointWeek: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newStartingPointWeek: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newStartingPointWeek: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  startingPointWeek(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  stopped(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupplyLine(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ start: BN; bias: BN; slope: BN }>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateAccountLines: {
    (
      account: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateAccountLinesBlockNumber: {
    (
      account: string,
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateTotalSupplyLine: {
    (
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      time: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateTotalSupplyLineBlockNumber: {
    (
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  __Locking_init: {
    (
      _token: string,
      _startingPointWeek: number | BN | string,
      _minCliffPeriod: number | BN | string,
      _minSlopePeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _startingPointWeek: number | BN | string,
      _minCliffPeriod: number | BN | string,
      _minSlopePeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _startingPointWeek: number | BN | string,
      _minCliffPeriod: number | BN | string,
      _minSlopePeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _startingPointWeek: number | BN | string,
      _minCliffPeriod: number | BN | string,
      _minSlopePeriod: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  stop: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  start: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  startMigration: {
    (to: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(to: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  lock: {
    (
      account: string,
      _delegate: string,
      amount: number | BN | string,
      slopePeriod: number | BN | string,
      cliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      _delegate: string,
      amount: number | BN | string,
      slopePeriod: number | BN | string,
      cliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string,
      _delegate: string,
      amount: number | BN | string,
      slopePeriod: number | BN | string,
      cliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      _delegate: string,
      amount: number | BN | string,
      slopePeriod: number | BN | string,
      cliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getAvailableForWithdraw(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  locked(account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getAccountAndDelegate(
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string }>;

  getWeek(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  delegateTo: {
    (
      id: number | BN | string,
      newDelegate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: number | BN | string,
      newDelegate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BN | string,
      newDelegate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BN | string,
      newDelegate: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  migrate: {
    (
      id: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      id: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    WEEK(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    counter(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Delegates votes from the sender to `delegatee`.
     */
    delegate: {
      (delegatee: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        delegatee: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Delegates votes from signer to `delegatee`.
     */
    delegateBySig: {
      (
        delegatee: string,
        nonce: number | BN | string,
        expiry: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        delegatee: string,
        nonce: number | BN | string,
        expiry: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        delegatee: string,
        nonce: number | BN | string,
        expiry: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        delegatee: string,
        nonce: number | BN | string,
        expiry: number | BN | string,
        v: number | BN | string,
        r: string,
        s: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the delegate that `account` has chosen.
     */
    delegates(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Ð¡alculate and return (newAmount, newSlope), using formula: locking = (tokens * (      ST_FORMULA_CONST_MULTIPLIER      + ST_FORMULA_CLIFF_MULTIPLIER * (cliffPeriod - minCliffPeriod))/(MAX_CLIFF_PERIOD - minCliffPeriod)      + ST_FORMULA_SLOPE_MULTIPLIER * (slopePeriod - minSlopePeriod))/(MAX_SLOPE_PERIOD - minSlopePeriod)      )) / ST_FORMULA_DIVIDER*
     */
    getLock(
      amount: number | BN | string,
      slopePeriod: number | BN | string,
      cliff: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    /**
     * Returns the total supply of votes available  at the end of the last period
     */
    getPastTotalSupply(
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the amount of votes that `account` had at the end of the last period
     */
    getPastVotes(
      account: string,
      blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Returns the current amount of votes that `account` has.
     */
    getVotes(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    migrateTo(txDetails?: Truffle.TransactionDetails): Promise<string>;

    minCliffPeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    minSlopePeriod(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    relock: {
      (
        id: number | BN | string,
        newDelegate: string,
        newAmount: number | BN | string,
        newSlopePeriod: number | BN | string,
        newCliff: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: number | BN | string,
        newDelegate: string,
        newAmount: number | BN | string,
        newSlopePeriod: number | BN | string,
        newCliff: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        id: number | BN | string,
        newDelegate: string,
        newAmount: number | BN | string,
        newSlopePeriod: number | BN | string,
        newCliff: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: number | BN | string,
        newDelegate: string,
        newAmount: number | BN | string,
        newSlopePeriod: number | BN | string,
        newCliff: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    roundTimestamp(
      ts: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    setMinCliffPeriod: {
      (
        newMinCliffPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newMinCliffPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newMinCliffPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newMinCliffPeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setMinSlopePeriod: {
      (
        newMinSlopePeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newMinSlopePeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newMinSlopePeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newMinSlopePeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setStartingPointWeek: {
      (
        newStartingPointWeek: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newStartingPointWeek: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newStartingPointWeek: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newStartingPointWeek: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    startingPointWeek(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    stopped(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    totalSupplyLine(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ start: BN; bias: BN; slope: BN }>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateAccountLines: {
      (
        account: string,
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateAccountLinesBlockNumber: {
      (
        account: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateTotalSupplyLine: {
      (
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        time: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateTotalSupplyLineBlockNumber: {
      (
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        blockNumber: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    __Locking_init: {
      (
        _token: string,
        _startingPointWeek: number | BN | string,
        _minCliffPeriod: number | BN | string,
        _minSlopePeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _startingPointWeek: number | BN | string,
        _minCliffPeriod: number | BN | string,
        _minSlopePeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _startingPointWeek: number | BN | string,
        _minCliffPeriod: number | BN | string,
        _minSlopePeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _startingPointWeek: number | BN | string,
        _minCliffPeriod: number | BN | string,
        _minSlopePeriod: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    stop: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    start: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    startMigration: {
      (to: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(to: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    lock: {
      (
        account: string,
        _delegate: string,
        amount: number | BN | string,
        slopePeriod: number | BN | string,
        cliff: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        _delegate: string,
        amount: number | BN | string,
        slopePeriod: number | BN | string,
        cliff: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        account: string,
        _delegate: string,
        amount: number | BN | string,
        slopePeriod: number | BN | string,
        cliff: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        _delegate: string,
        amount: number | BN | string,
        slopePeriod: number | BN | string,
        cliff: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    getAvailableForWithdraw(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    locked(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getAccountAndDelegate(
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string }>;

    getWeek(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    delegateTo: {
      (
        id: number | BN | string,
        newDelegate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: number | BN | string,
        newDelegate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: number | BN | string,
        newDelegate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: number | BN | string,
        newDelegate: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    balanceOf(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    migrate: {
      (
        id: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        id: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        id: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        id: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
