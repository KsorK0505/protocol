/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISeaPortContract extends Truffle.Contract<ISeaPortInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ISeaPortInstance>;
}

type AllEvents = never;

export interface ISeaPortInstance extends Truffle.ContractInstance {
  fulfillAdvancedOrder: {
    (
      advancedOrder: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
          }[];
          consideration: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
            recipient: string;
          }[];
          orderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          conduitKey: string;
          totalOriginalConsiderationItems: number | BN | string;
        };
        numerator: number | BN | string;
        denominator: number | BN | string;
        signature: string;
        extraData: string;
      },
      criteriaResolvers: {
        orderIndex: number | BN | string;
        side: number | BN | string;
        index: number | BN | string;
        identifier: number | BN | string;
        criteriaProof: string[];
      }[],
      fulfillerConduitKey: string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      advancedOrder: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
          }[];
          consideration: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
            recipient: string;
          }[];
          orderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          conduitKey: string;
          totalOriginalConsiderationItems: number | BN | string;
        };
        numerator: number | BN | string;
        denominator: number | BN | string;
        signature: string;
        extraData: string;
      },
      criteriaResolvers: {
        orderIndex: number | BN | string;
        side: number | BN | string;
        index: number | BN | string;
        identifier: number | BN | string;
        criteriaProof: string[];
      }[],
      fulfillerConduitKey: string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      advancedOrder: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
          }[];
          consideration: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
            recipient: string;
          }[];
          orderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          conduitKey: string;
          totalOriginalConsiderationItems: number | BN | string;
        };
        numerator: number | BN | string;
        denominator: number | BN | string;
        signature: string;
        extraData: string;
      },
      criteriaResolvers: {
        orderIndex: number | BN | string;
        side: number | BN | string;
        index: number | BN | string;
        identifier: number | BN | string;
        criteriaProof: string[];
      }[],
      fulfillerConduitKey: string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      advancedOrder: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
          }[];
          consideration: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
            recipient: string;
          }[];
          orderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          conduitKey: string;
          totalOriginalConsiderationItems: number | BN | string;
        };
        numerator: number | BN | string;
        denominator: number | BN | string;
        signature: string;
        extraData: string;
      },
      criteriaResolvers: {
        orderIndex: number | BN | string;
        side: number | BN | string;
        index: number | BN | string;
        identifier: number | BN | string;
        criteriaProof: string[];
      }[],
      fulfillerConduitKey: string,
      recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fulfillAvailableAdvancedOrders: {
    (
      advancedOrders: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
          }[];
          consideration: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
            recipient: string;
          }[];
          orderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          conduitKey: string;
          totalOriginalConsiderationItems: number | BN | string;
        };
        numerator: number | BN | string;
        denominator: number | BN | string;
        signature: string;
        extraData: string;
      }[],
      criteriaResolvers: {
        orderIndex: number | BN | string;
        side: number | BN | string;
        index: number | BN | string;
        identifier: number | BN | string;
        criteriaProof: string[];
      }[],
      offerFulfillments: {
        orderIndex: number | BN | string;
        itemIndex: number | BN | string;
      }[][],
      considerationFulfillments: {
        orderIndex: number | BN | string;
        itemIndex: number | BN | string;
      }[][],
      fulfillerConduitKey: string,
      recipient: string,
      maximumFulfilled: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      advancedOrders: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
          }[];
          consideration: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
            recipient: string;
          }[];
          orderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          conduitKey: string;
          totalOriginalConsiderationItems: number | BN | string;
        };
        numerator: number | BN | string;
        denominator: number | BN | string;
        signature: string;
        extraData: string;
      }[],
      criteriaResolvers: {
        orderIndex: number | BN | string;
        side: number | BN | string;
        index: number | BN | string;
        identifier: number | BN | string;
        criteriaProof: string[];
      }[],
      offerFulfillments: {
        orderIndex: number | BN | string;
        itemIndex: number | BN | string;
      }[][],
      considerationFulfillments: {
        orderIndex: number | BN | string;
        itemIndex: number | BN | string;
      }[][],
      fulfillerConduitKey: string,
      recipient: string,
      maximumFulfilled: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: boolean[];
      1: {
        item: {
          itemType: BN;
          token: string;
          identifier: BN;
          amount: BN;
          recipient: string;
        };
        offerer: string;
        conduitKey: string;
      }[];
    }>;
    sendTransaction(
      advancedOrders: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
          }[];
          consideration: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
            recipient: string;
          }[];
          orderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          conduitKey: string;
          totalOriginalConsiderationItems: number | BN | string;
        };
        numerator: number | BN | string;
        denominator: number | BN | string;
        signature: string;
        extraData: string;
      }[],
      criteriaResolvers: {
        orderIndex: number | BN | string;
        side: number | BN | string;
        index: number | BN | string;
        identifier: number | BN | string;
        criteriaProof: string[];
      }[],
      offerFulfillments: {
        orderIndex: number | BN | string;
        itemIndex: number | BN | string;
      }[][],
      considerationFulfillments: {
        orderIndex: number | BN | string;
        itemIndex: number | BN | string;
      }[][],
      fulfillerConduitKey: string,
      recipient: string,
      maximumFulfilled: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      advancedOrders: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
          }[];
          consideration: {
            itemType: number | BN | string;
            token: string;
            identifierOrCriteria: number | BN | string;
            startAmount: number | BN | string;
            endAmount: number | BN | string;
            recipient: string;
          }[];
          orderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          conduitKey: string;
          totalOriginalConsiderationItems: number | BN | string;
        };
        numerator: number | BN | string;
        denominator: number | BN | string;
        signature: string;
        extraData: string;
      }[],
      criteriaResolvers: {
        orderIndex: number | BN | string;
        side: number | BN | string;
        index: number | BN | string;
        identifier: number | BN | string;
        criteriaProof: string[];
      }[],
      offerFulfillments: {
        orderIndex: number | BN | string;
        itemIndex: number | BN | string;
      }[][],
      considerationFulfillments: {
        orderIndex: number | BN | string;
        itemIndex: number | BN | string;
      }[][],
      fulfillerConduitKey: string,
      recipient: string,
      maximumFulfilled: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fulfillBasicOrder: {
    (
      parameters: {
        considerationToken: string;
        considerationIdentifier: number | BN | string;
        considerationAmount: number | BN | string;
        offerer: string;
        zone: string;
        offerToken: string;
        offerIdentifier: number | BN | string;
        offerAmount: number | BN | string;
        basicOrderType: number | BN | string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        zoneHash: string;
        salt: number | BN | string;
        offererConduitKey: string;
        fulfillerConduitKey: string;
        totalOriginalAdditionalRecipients: number | BN | string;
        additionalRecipients: {
          amount: number | BN | string;
          recipient: string;
        }[];
        signature: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      parameters: {
        considerationToken: string;
        considerationIdentifier: number | BN | string;
        considerationAmount: number | BN | string;
        offerer: string;
        zone: string;
        offerToken: string;
        offerIdentifier: number | BN | string;
        offerAmount: number | BN | string;
        basicOrderType: number | BN | string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        zoneHash: string;
        salt: number | BN | string;
        offererConduitKey: string;
        fulfillerConduitKey: string;
        totalOriginalAdditionalRecipients: number | BN | string;
        additionalRecipients: {
          amount: number | BN | string;
          recipient: string;
        }[];
        signature: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      parameters: {
        considerationToken: string;
        considerationIdentifier: number | BN | string;
        considerationAmount: number | BN | string;
        offerer: string;
        zone: string;
        offerToken: string;
        offerIdentifier: number | BN | string;
        offerAmount: number | BN | string;
        basicOrderType: number | BN | string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        zoneHash: string;
        salt: number | BN | string;
        offererConduitKey: string;
        fulfillerConduitKey: string;
        totalOriginalAdditionalRecipients: number | BN | string;
        additionalRecipients: {
          amount: number | BN | string;
          recipient: string;
        }[];
        signature: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      parameters: {
        considerationToken: string;
        considerationIdentifier: number | BN | string;
        considerationAmount: number | BN | string;
        offerer: string;
        zone: string;
        offerToken: string;
        offerIdentifier: number | BN | string;
        offerAmount: number | BN | string;
        basicOrderType: number | BN | string;
        startTime: number | BN | string;
        endTime: number | BN | string;
        zoneHash: string;
        salt: number | BN | string;
        offererConduitKey: string;
        fulfillerConduitKey: string;
        totalOriginalAdditionalRecipients: number | BN | string;
        additionalRecipients: {
          amount: number | BN | string;
          recipient: string;
        }[];
        signature: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    fulfillAdvancedOrder: {
      (
        advancedOrder: {
          parameters: {
            offerer: string;
            zone: string;
            offer: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
            }[];
            consideration: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
              recipient: string;
            }[];
            orderType: number | BN | string;
            startTime: number | BN | string;
            endTime: number | BN | string;
            zoneHash: string;
            salt: number | BN | string;
            conduitKey: string;
            totalOriginalConsiderationItems: number | BN | string;
          };
          numerator: number | BN | string;
          denominator: number | BN | string;
          signature: string;
          extraData: string;
        },
        criteriaResolvers: {
          orderIndex: number | BN | string;
          side: number | BN | string;
          index: number | BN | string;
          identifier: number | BN | string;
          criteriaProof: string[];
        }[],
        fulfillerConduitKey: string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        advancedOrder: {
          parameters: {
            offerer: string;
            zone: string;
            offer: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
            }[];
            consideration: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
              recipient: string;
            }[];
            orderType: number | BN | string;
            startTime: number | BN | string;
            endTime: number | BN | string;
            zoneHash: string;
            salt: number | BN | string;
            conduitKey: string;
            totalOriginalConsiderationItems: number | BN | string;
          };
          numerator: number | BN | string;
          denominator: number | BN | string;
          signature: string;
          extraData: string;
        },
        criteriaResolvers: {
          orderIndex: number | BN | string;
          side: number | BN | string;
          index: number | BN | string;
          identifier: number | BN | string;
          criteriaProof: string[];
        }[],
        fulfillerConduitKey: string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        advancedOrder: {
          parameters: {
            offerer: string;
            zone: string;
            offer: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
            }[];
            consideration: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
              recipient: string;
            }[];
            orderType: number | BN | string;
            startTime: number | BN | string;
            endTime: number | BN | string;
            zoneHash: string;
            salt: number | BN | string;
            conduitKey: string;
            totalOriginalConsiderationItems: number | BN | string;
          };
          numerator: number | BN | string;
          denominator: number | BN | string;
          signature: string;
          extraData: string;
        },
        criteriaResolvers: {
          orderIndex: number | BN | string;
          side: number | BN | string;
          index: number | BN | string;
          identifier: number | BN | string;
          criteriaProof: string[];
        }[],
        fulfillerConduitKey: string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        advancedOrder: {
          parameters: {
            offerer: string;
            zone: string;
            offer: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
            }[];
            consideration: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
              recipient: string;
            }[];
            orderType: number | BN | string;
            startTime: number | BN | string;
            endTime: number | BN | string;
            zoneHash: string;
            salt: number | BN | string;
            conduitKey: string;
            totalOriginalConsiderationItems: number | BN | string;
          };
          numerator: number | BN | string;
          denominator: number | BN | string;
          signature: string;
          extraData: string;
        },
        criteriaResolvers: {
          orderIndex: number | BN | string;
          side: number | BN | string;
          index: number | BN | string;
          identifier: number | BN | string;
          criteriaProof: string[];
        }[],
        fulfillerConduitKey: string,
        recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fulfillAvailableAdvancedOrders: {
      (
        advancedOrders: {
          parameters: {
            offerer: string;
            zone: string;
            offer: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
            }[];
            consideration: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
              recipient: string;
            }[];
            orderType: number | BN | string;
            startTime: number | BN | string;
            endTime: number | BN | string;
            zoneHash: string;
            salt: number | BN | string;
            conduitKey: string;
            totalOriginalConsiderationItems: number | BN | string;
          };
          numerator: number | BN | string;
          denominator: number | BN | string;
          signature: string;
          extraData: string;
        }[],
        criteriaResolvers: {
          orderIndex: number | BN | string;
          side: number | BN | string;
          index: number | BN | string;
          identifier: number | BN | string;
          criteriaProof: string[];
        }[],
        offerFulfillments: {
          orderIndex: number | BN | string;
          itemIndex: number | BN | string;
        }[][],
        considerationFulfillments: {
          orderIndex: number | BN | string;
          itemIndex: number | BN | string;
        }[][],
        fulfillerConduitKey: string,
        recipient: string,
        maximumFulfilled: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        advancedOrders: {
          parameters: {
            offerer: string;
            zone: string;
            offer: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
            }[];
            consideration: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
              recipient: string;
            }[];
            orderType: number | BN | string;
            startTime: number | BN | string;
            endTime: number | BN | string;
            zoneHash: string;
            salt: number | BN | string;
            conduitKey: string;
            totalOriginalConsiderationItems: number | BN | string;
          };
          numerator: number | BN | string;
          denominator: number | BN | string;
          signature: string;
          extraData: string;
        }[],
        criteriaResolvers: {
          orderIndex: number | BN | string;
          side: number | BN | string;
          index: number | BN | string;
          identifier: number | BN | string;
          criteriaProof: string[];
        }[],
        offerFulfillments: {
          orderIndex: number | BN | string;
          itemIndex: number | BN | string;
        }[][],
        considerationFulfillments: {
          orderIndex: number | BN | string;
          itemIndex: number | BN | string;
        }[][],
        fulfillerConduitKey: string,
        recipient: string,
        maximumFulfilled: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        0: boolean[];
        1: {
          item: {
            itemType: BN;
            token: string;
            identifier: BN;
            amount: BN;
            recipient: string;
          };
          offerer: string;
          conduitKey: string;
        }[];
      }>;
      sendTransaction(
        advancedOrders: {
          parameters: {
            offerer: string;
            zone: string;
            offer: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
            }[];
            consideration: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
              recipient: string;
            }[];
            orderType: number | BN | string;
            startTime: number | BN | string;
            endTime: number | BN | string;
            zoneHash: string;
            salt: number | BN | string;
            conduitKey: string;
            totalOriginalConsiderationItems: number | BN | string;
          };
          numerator: number | BN | string;
          denominator: number | BN | string;
          signature: string;
          extraData: string;
        }[],
        criteriaResolvers: {
          orderIndex: number | BN | string;
          side: number | BN | string;
          index: number | BN | string;
          identifier: number | BN | string;
          criteriaProof: string[];
        }[],
        offerFulfillments: {
          orderIndex: number | BN | string;
          itemIndex: number | BN | string;
        }[][],
        considerationFulfillments: {
          orderIndex: number | BN | string;
          itemIndex: number | BN | string;
        }[][],
        fulfillerConduitKey: string,
        recipient: string,
        maximumFulfilled: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        advancedOrders: {
          parameters: {
            offerer: string;
            zone: string;
            offer: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
            }[];
            consideration: {
              itemType: number | BN | string;
              token: string;
              identifierOrCriteria: number | BN | string;
              startAmount: number | BN | string;
              endAmount: number | BN | string;
              recipient: string;
            }[];
            orderType: number | BN | string;
            startTime: number | BN | string;
            endTime: number | BN | string;
            zoneHash: string;
            salt: number | BN | string;
            conduitKey: string;
            totalOriginalConsiderationItems: number | BN | string;
          };
          numerator: number | BN | string;
          denominator: number | BN | string;
          signature: string;
          extraData: string;
        }[],
        criteriaResolvers: {
          orderIndex: number | BN | string;
          side: number | BN | string;
          index: number | BN | string;
          identifier: number | BN | string;
          criteriaProof: string[];
        }[],
        offerFulfillments: {
          orderIndex: number | BN | string;
          itemIndex: number | BN | string;
        }[][],
        considerationFulfillments: {
          orderIndex: number | BN | string;
          itemIndex: number | BN | string;
        }[][],
        fulfillerConduitKey: string,
        recipient: string,
        maximumFulfilled: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fulfillBasicOrder: {
      (
        parameters: {
          considerationToken: string;
          considerationIdentifier: number | BN | string;
          considerationAmount: number | BN | string;
          offerer: string;
          zone: string;
          offerToken: string;
          offerIdentifier: number | BN | string;
          offerAmount: number | BN | string;
          basicOrderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          offererConduitKey: string;
          fulfillerConduitKey: string;
          totalOriginalAdditionalRecipients: number | BN | string;
          additionalRecipients: {
            amount: number | BN | string;
            recipient: string;
          }[];
          signature: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        parameters: {
          considerationToken: string;
          considerationIdentifier: number | BN | string;
          considerationAmount: number | BN | string;
          offerer: string;
          zone: string;
          offerToken: string;
          offerIdentifier: number | BN | string;
          offerAmount: number | BN | string;
          basicOrderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          offererConduitKey: string;
          fulfillerConduitKey: string;
          totalOriginalAdditionalRecipients: number | BN | string;
          additionalRecipients: {
            amount: number | BN | string;
            recipient: string;
          }[];
          signature: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        parameters: {
          considerationToken: string;
          considerationIdentifier: number | BN | string;
          considerationAmount: number | BN | string;
          offerer: string;
          zone: string;
          offerToken: string;
          offerIdentifier: number | BN | string;
          offerAmount: number | BN | string;
          basicOrderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          offererConduitKey: string;
          fulfillerConduitKey: string;
          totalOriginalAdditionalRecipients: number | BN | string;
          additionalRecipients: {
            amount: number | BN | string;
            recipient: string;
          }[];
          signature: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        parameters: {
          considerationToken: string;
          considerationIdentifier: number | BN | string;
          considerationAmount: number | BN | string;
          offerer: string;
          zone: string;
          offerToken: string;
          offerIdentifier: number | BN | string;
          offerAmount: number | BN | string;
          basicOrderType: number | BN | string;
          startTime: number | BN | string;
          endTime: number | BN | string;
          zoneHash: string;
          salt: number | BN | string;
          offererConduitKey: string;
          fulfillerConduitKey: string;
          totalOriginalAdditionalRecipients: number | BN | string;
          additionalRecipients: {
            amount: number | BN | string;
            recipient: string;
          }[];
          signature: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
