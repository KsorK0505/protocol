/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ExchangeStateV1Contract
  extends Truffle.Contract<ExchangeStateV1Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ExchangeStateV1Instance>;
}

export interface OperatorAdded {
  name: "OperatorAdded";
  args: {
    account: string;
    0: string;
  };
}

export interface OperatorRemoved {
  name: "OperatorRemoved";
  args: {
    account: string;
    0: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents = OperatorAdded | OperatorRemoved | OwnershipTransferred;

export interface ExchangeStateV1Instance extends Truffle.ContractInstance {
  addOperator: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  completed(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isOperator(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  removeOperator: {
    (account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCompleted(
    key: {
      owner: string;
      salt: number | BN | string;
      sellAsset: {
        token: string;
        tokenId: number | BN | string;
        assetType: number | BN | string;
      };
      buyAsset: {
        token: string;
        tokenId: number | BN | string;
        assetType: number | BN | string;
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  setCompleted: {
    (
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      newCompleted: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      newCompleted: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      newCompleted: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      newCompleted: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCompletedKey(
    key: {
      owner: string;
      salt: number | BN | string;
      sellAsset: {
        token: string;
        tokenId: number | BN | string;
        assetType: number | BN | string;
      };
      buyAsset: {
        token: string;
        tokenId: number | BN | string;
        assetType: number | BN | string;
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    addOperator: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    completed(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    isOperator(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    removeOperator: {
      (account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getCompleted(
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    setCompleted: {
      (
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        },
        newCompleted: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        },
        newCompleted: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        },
        newCompleted: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        },
        newCompleted: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getCompletedKey(
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
