/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CryptoPunksMarketContract
  extends Truffle.Contract<CryptoPunksMarketInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CryptoPunksMarketInstance>;
}

export interface Assign {
  name: "Assign";
  args: {
    to: string;
    punkIndex: BN;
    0: string;
    1: BN;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    from: string;
    to: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface PunkTransfer {
  name: "PunkTransfer";
  args: {
    from: string;
    to: string;
    punkIndex: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface PunkOffered {
  name: "PunkOffered";
  args: {
    punkIndex: BN;
    minValue: BN;
    toAddress: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface PunkBidEntered {
  name: "PunkBidEntered";
  args: {
    punkIndex: BN;
    value: BN;
    fromAddress: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface PunkBidWithdrawn {
  name: "PunkBidWithdrawn";
  args: {
    punkIndex: BN;
    value: BN;
    fromAddress: string;
    0: BN;
    1: BN;
    2: string;
  };
}

export interface PunkBought {
  name: "PunkBought";
  args: {
    punkIndex: BN;
    value: BN;
    fromAddress: string;
    toAddress: string;
    0: BN;
    1: BN;
    2: string;
    3: string;
  };
}

export interface PunkNoLongerForSale {
  name: "PunkNoLongerForSale";
  args: {
    punkIndex: BN;
    0: BN;
  };
}

type AllEvents =
  | Assign
  | Transfer
  | PunkTransfer
  | PunkOffered
  | PunkBidEntered
  | PunkBidWithdrawn
  | PunkBought
  | PunkNoLongerForSale;

export interface CryptoPunksMarketInstance extends Truffle.ContractInstance {
  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  punksOfferedForSale(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: BN; 2: string; 3: BN; 4: string }>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  imageHash(txDetails?: Truffle.TransactionDetails): Promise<string>;

  nextPunkIndexToAssign(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  punkIndexToAddress(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  standard(txDetails?: Truffle.TransactionDetails): Promise<string>;

  punkBids(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: BN; 2: string; 3: BN }>;

  balanceOf(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  allPunksAssigned(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  punksRemainingToAssign(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  pendingWithdrawals(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  setInitialOwner: {
    (
      to: string,
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      to: string,
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string,
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setInitialOwners: {
    (
      addresses: string[],
      indices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      addresses: string[],
      indices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      addresses: string[],
      indices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      addresses: string[],
      indices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allInitialOwnersAssigned: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getPunk: {
    (
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferPunk: {
    (
      to: string,
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      to: string,
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string,
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  punkNoLongerForSale: {
    (
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  offerPunkForSale: {
    (
      punkIndex: number | BN | string,
      minSalePriceInWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      punkIndex: number | BN | string,
      minSalePriceInWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      punkIndex: number | BN | string,
      minSalePriceInWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      punkIndex: number | BN | string,
      minSalePriceInWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  offerPunkForSaleToAddress: {
    (
      punkIndex: number | BN | string,
      minSalePriceInWei: number | BN | string,
      toAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      punkIndex: number | BN | string,
      minSalePriceInWei: number | BN | string,
      toAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      punkIndex: number | BN | string,
      minSalePriceInWei: number | BN | string,
      toAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      punkIndex: number | BN | string,
      minSalePriceInWei: number | BN | string,
      toAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyPunk: {
    (
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  enterBidForPunk: {
    (
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptBidForPunk: {
    (
      punkIndex: number | BN | string,
      minPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      punkIndex: number | BN | string,
      minPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      punkIndex: number | BN | string,
      minPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      punkIndex: number | BN | string,
      minPrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawBidForPunk: {
    (
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      punkIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    punksOfferedForSale(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: BN; 2: string; 3: BN; 4: string }>;

    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    imageHash(txDetails?: Truffle.TransactionDetails): Promise<string>;

    nextPunkIndexToAssign(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    punkIndexToAddress(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    standard(txDetails?: Truffle.TransactionDetails): Promise<string>;

    punkBids(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: BN; 2: string; 3: BN }>;

    balanceOf(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    allPunksAssigned(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    punksRemainingToAssign(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    pendingWithdrawals(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    setInitialOwner: {
      (
        to: string,
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        to: string,
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setInitialOwners: {
      (
        addresses: string[],
        indices: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        addresses: string[],
        indices: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        addresses: string[],
        indices: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        addresses: string[],
        indices: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    allInitialOwnersAssigned: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    getPunk: {
      (
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferPunk: {
      (
        to: string,
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        to: string,
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    punkNoLongerForSale: {
      (
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    offerPunkForSale: {
      (
        punkIndex: number | BN | string,
        minSalePriceInWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        punkIndex: number | BN | string,
        minSalePriceInWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        punkIndex: number | BN | string,
        minSalePriceInWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        punkIndex: number | BN | string,
        minSalePriceInWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    offerPunkForSaleToAddress: {
      (
        punkIndex: number | BN | string,
        minSalePriceInWei: number | BN | string,
        toAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        punkIndex: number | BN | string,
        minSalePriceInWei: number | BN | string,
        toAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        punkIndex: number | BN | string,
        minSalePriceInWei: number | BN | string,
        toAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        punkIndex: number | BN | string,
        minSalePriceInWei: number | BN | string,
        toAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyPunk: {
      (
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdraw: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    enterBidForPunk: {
      (
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    acceptBidForPunk: {
      (
        punkIndex: number | BN | string,
        minPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        punkIndex: number | BN | string,
        minPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        punkIndex: number | BN | string,
        minPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        punkIndex: number | BN | string,
        minPrice: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawBidForPunk: {
      (
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        punkIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
