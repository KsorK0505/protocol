/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LibAssetContract extends Truffle.Contract<LibAssetInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LibAssetInstance>;
}

type AllEvents = never;

export interface LibAssetInstance extends Truffle.ContractInstance {
  COLLECTION(txDetails?: Truffle.TransactionDetails): Promise<string>;

  CRYPTO_PUNKS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ERC1155_ASSET_CLASS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ERC20_ASSET_CLASS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ERC721_ASSET_CLASS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  ETH_ASSET_CLASS(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    COLLECTION(txDetails?: Truffle.TransactionDetails): Promise<string>;

    CRYPTO_PUNKS(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ERC1155_ASSET_CLASS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    ERC20_ASSET_CLASS(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ERC721_ASSET_CLASS(txDetails?: Truffle.TransactionDetails): Promise<string>;

    ETH_ASSET_CLASS(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
