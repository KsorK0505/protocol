/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ERC1155RaribleMetaContract
  extends Truffle.Contract<ERC1155RaribleMetaInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ERC1155RaribleMetaInstance>;
}

export interface ApprovalForAll {
  name: "ApprovalForAll";
  args: {
    account: string;
    operator: string;
    approved: boolean;
    0: string;
    1: string;
    2: boolean;
  };
}

export interface BaseUriChanged {
  name: "BaseUriChanged";
  args: {
    newBaseURI: string;
    0: string;
  };
}

export interface BurnLazy {
  name: "BurnLazy";
  args: {
    operator: string;
    account: string;
    id: BN;
    amount: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface BurnLazyBatch {
  name: "BurnLazyBatch";
  args: {
    operator: string;
    account: string;
    ids: BN[];
    amounts: BN[];
    0: string;
    1: string;
    2: BN[];
    3: BN[];
  };
}

export interface CreateERC1155Rarible {
  name: "CreateERC1155Rarible";
  args: {
    owner: string;
    name: string;
    symbol: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface CreateERC1155RaribleUser {
  name: "CreateERC1155RaribleUser";
  args: {
    owner: string;
    name: string;
    symbol: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface Creators {
  name: "Creators";
  args: {
    tokenId: BN;
    creators: { account: string; value: BN }[];
    0: BN;
    1: { account: string; value: BN }[];
  };
}

export interface DefaultApproval {
  name: "DefaultApproval";
  args: {
    operator: string;
    hasApproval: boolean;
    0: string;
    1: boolean;
  };
}

export interface MetaTransactionExecuted {
  name: "MetaTransactionExecuted";
  args: {
    userAddress: string;
    relayerAddress: string;
    functionSignature: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface MinterStatusChanged {
  name: "MinterStatusChanged";
  args: {
    minter: string;
    status: boolean;
    0: string;
    1: boolean;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface RoyaltiesSet {
  name: "RoyaltiesSet";
  args: {
    tokenId: BN;
    royalties: { account: string; value: BN }[];
    0: BN;
    1: { account: string; value: BN }[];
  };
}

export interface Supply {
  name: "Supply";
  args: {
    tokenId: BN;
    value: BN;
    0: BN;
    1: BN;
  };
}

export interface TransferBatch {
  name: "TransferBatch";
  args: {
    operator: string;
    from: string;
    to: string;
    ids: BN[];
    values: BN[];
    0: string;
    1: string;
    2: string;
    3: BN[];
    4: BN[];
  };
}

export interface TransferSingle {
  name: "TransferSingle";
  args: {
    operator: string;
    from: string;
    to: string;
    id: BN;
    value: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface URI {
  name: "URI";
  args: {
    value: string;
    id: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | ApprovalForAll
  | BaseUriChanged
  | BurnLazy
  | BurnLazyBatch
  | CreateERC1155Rarible
  | CreateERC1155RaribleUser
  | Creators
  | DefaultApproval
  | MetaTransactionExecuted
  | MinterStatusChanged
  | OwnershipTransferred
  | RoyaltiesSet
  | Supply
  | TransferBatch
  | TransferSingle
  | URI;

export interface ERC1155RaribleMetaInstance extends Truffle.ContractInstance {
  /**
   * Add `minter` to the list of allowed minters.
   */
  addMinter: {
    (minter: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(minter: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Add `minters` to the list of allowed minters.
   */
  addMinters: {
    (minters: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      minters: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      minters: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minters: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.
   */
  balanceOf(
    account: string,
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.
   */
  balanceOfBatch(
    accounts: string[],
    ids: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  /**
   * Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.
   */
  baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  burn: {
    (
      account: string,
      id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      id: number | BN | string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnBatch: {
    (
      account: string,
      ids: (number | BN | string)[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      ids: (number | BN | string)[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string,
      ids: (number | BN | string)[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      ids: (number | BN | string)[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contractURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  executeMetaTransaction: {
    (
      userAddress: string,
      functionSignature: string,
      sigR: string,
      sigS: string,
      sigV: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      userAddress: string,
      functionSignature: string,
      sigR: string,
      sigS: string,
      sigV: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      userAddress: string,
      functionSignature: string,
      sigR: string,
      sigS: string,
      sigV: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      userAddress: string,
      functionSignature: string,
      sigR: string,
      sigS: string,
      sigV: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCreators(
    _id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ account: string; value: BN }[]>;

  getNonce(user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getRaribleV2Royalties(
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ account: string; value: BN }[]>;

  isApprovedForAll(
    _owner: string,
    _operator: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Returns `true` if `account` has been granted to minters.
   */
  isMinter(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Revoke `_minter` from the list of allowed minters.
   */
  removeMinter: {
    (_minter: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _minter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  royaltyInfo(
    id: number | BN | string,
    _salePrice: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: BN }>;

  /**
   * See {IERC1155-safeBatchTransferFrom}.
   */
  safeBatchTransferFrom: {
    (
      from: string,
      to: string,
      ids: (number | BN | string)[],
      amounts: (number | BN | string)[],
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      to: string,
      ids: (number | BN | string)[],
      amounts: (number | BN | string)[],
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string,
      to: string,
      ids: (number | BN | string)[],
      amounts: (number | BN | string)[],
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      to: string,
      ids: (number | BN | string)[],
      amounts: (number | BN | string)[],
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC1155-safeTransferFrom}.
   */
  safeTransferFrom: {
    (
      from: string,
      to: string,
      id: number | BN | string,
      amount: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      to: string,
      id: number | BN | string,
      amount: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string,
      to: string,
      id: number | BN | string,
      amount: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      to: string,
      id: number | BN | string,
      amount: number | BN | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC1155-setApprovalForAll}.
   */
  setApprovalForAll: {
    (
      operator: string,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      operator: string,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operator: string,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operator: string,
      approved: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setBaseURI: {
    (newBaseURI: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newBaseURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newBaseURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newBaseURI: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferFromOrMint: {
    (
      data: {
        tokenId: number | BN | string;
        tokenURI: string;
        supply: number | BN | string;
        creators: { account: string; value: number | BN | string }[];
        royalties: { account: string; value: number | BN | string }[];
        signatures: string[];
      },
      from: string,
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      data: {
        tokenId: number | BN | string;
        tokenURI: string;
        supply: number | BN | string;
        creators: { account: string; value: number | BN | string }[];
        royalties: { account: string; value: number | BN | string }[];
        signatures: string[];
      },
      from: string,
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      data: {
        tokenId: number | BN | string;
        tokenURI: string;
        supply: number | BN | string;
        creators: { account: string; value: number | BN | string }[];
        royalties: { account: string; value: number | BN | string }[];
        signatures: string[];
      },
      from: string,
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      data: {
        tokenId: number | BN | string;
        tokenURI: string;
        supply: number | BN | string;
        creators: { account: string; value: number | BN | string }[];
        royalties: { account: string; value: number | BN | string }[];
        signatures: string[];
      },
      from: string,
      to: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateAccount: {
    (
      _id: number | BN | string,
      _from: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      _from: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      _from: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      _from: string,
      _to: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  uri(
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  __ERC1155RaribleUser_init: {
    (
      _name: string,
      _symbol: string,
      baseURI: string,
      contractURI: string,
      operators: string[],
      transferProxy: string,
      lazyTransferProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _name: string,
      _symbol: string,
      baseURI: string,
      contractURI: string,
      operators: string[],
      transferProxy: string,
      lazyTransferProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _symbol: string,
      baseURI: string,
      contractURI: string,
      operators: string[],
      transferProxy: string,
      lazyTransferProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _symbol: string,
      baseURI: string,
      contractURI: string,
      operators: string[],
      transferProxy: string,
      lazyTransferProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  __ERC1155Rarible_init: {
    (
      _name: string,
      _symbol: string,
      baseURI: string,
      contractURI: string,
      transferProxy: string,
      lazyTransferProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _name: string,
      _symbol: string,
      baseURI: string,
      contractURI: string,
      transferProxy: string,
      lazyTransferProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _symbol: string,
      baseURI: string,
      contractURI: string,
      transferProxy: string,
      lazyTransferProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _symbol: string,
      baseURI: string,
      contractURI: string,
      transferProxy: string,
      lazyTransferProxy: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mintAndTransfer: {
    (
      data: {
        tokenId: number | BN | string;
        tokenURI: string;
        supply: number | BN | string;
        creators: { account: string; value: number | BN | string }[];
        royalties: { account: string; value: number | BN | string }[];
        signatures: string[];
      },
      to: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      data: {
        tokenId: number | BN | string;
        tokenURI: string;
        supply: number | BN | string;
        creators: { account: string; value: number | BN | string }[];
        royalties: { account: string; value: number | BN | string }[];
        signatures: string[];
      },
      to: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      data: {
        tokenId: number | BN | string;
        tokenURI: string;
        supply: number | BN | string;
        creators: { account: string; value: number | BN | string }[];
        royalties: { account: string; value: number | BN | string }[];
        signatures: string[];
      },
      to: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      data: {
        tokenId: number | BN | string;
        tokenURI: string;
        supply: number | BN | string;
        creators: { account: string; value: number | BN | string }[];
        royalties: { account: string; value: number | BN | string }[];
        signatures: string[];
      },
      to: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    /**
     * Add `minter` to the list of allowed minters.
     */
    addMinter: {
      (minter: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Add `minters` to the list of allowed minters.
     */
    addMinters: {
      (minters: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        minters: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        minters: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        minters: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.
     */
    balanceOf(
      account: string,
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.
     */
    balanceOfBatch(
      accounts: string[],
      ids: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    /**
     * Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.
     */
    baseURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

    burn: {
      (
        account: string,
        id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        id: number | BN | string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    burnBatch: {
      (
        account: string,
        ids: (number | BN | string)[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        ids: (number | BN | string)[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        account: string,
        ids: (number | BN | string)[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        ids: (number | BN | string)[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    contractURI(txDetails?: Truffle.TransactionDetails): Promise<string>;

    executeMetaTransaction: {
      (
        userAddress: string,
        functionSignature: string,
        sigR: string,
        sigS: string,
        sigV: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        userAddress: string,
        functionSignature: string,
        sigR: string,
        sigS: string,
        sigV: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        userAddress: string,
        functionSignature: string,
        sigR: string,
        sigS: string,
        sigV: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        userAddress: string,
        functionSignature: string,
        sigR: string,
        sigS: string,
        sigV: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getCreators(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ account: string; value: BN }[]>;

    getNonce(user: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getRaribleV2Royalties(
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ account: string; value: BN }[]>;

    isApprovedForAll(
      _owner: string,
      _operator: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Returns `true` if `account` has been granted to minters.
     */
    isMinter(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Revoke `_minter` from the list of allowed minters.
     */
    removeMinter: {
      (_minter: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _minter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    royaltyInfo(
      id: number | BN | string,
      _salePrice: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: BN }>;

    /**
     * See {IERC1155-safeBatchTransferFrom}.
     */
    safeBatchTransferFrom: {
      (
        from: string,
        to: string,
        ids: (number | BN | string)[],
        amounts: (number | BN | string)[],
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        ids: (number | BN | string)[],
        amounts: (number | BN | string)[],
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        to: string,
        ids: (number | BN | string)[],
        amounts: (number | BN | string)[],
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        ids: (number | BN | string)[],
        amounts: (number | BN | string)[],
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC1155-safeTransferFrom}.
     */
    safeTransferFrom: {
      (
        from: string,
        to: string,
        id: number | BN | string,
        amount: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        id: number | BN | string,
        amount: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        from: string,
        to: string,
        id: number | BN | string,
        amount: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        id: number | BN | string,
        amount: number | BN | string,
        data: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC1155-setApprovalForAll}.
     */
    setApprovalForAll: {
      (
        operator: string,
        approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        operator: string,
        approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        operator: string,
        approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        operator: string,
        approved: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setBaseURI: {
      (newBaseURI: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newBaseURI: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newBaseURI: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newBaseURI: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    transferFromOrMint: {
      (
        data: {
          tokenId: number | BN | string;
          tokenURI: string;
          supply: number | BN | string;
          creators: { account: string; value: number | BN | string }[];
          royalties: { account: string; value: number | BN | string }[];
          signatures: string[];
        },
        from: string,
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        data: {
          tokenId: number | BN | string;
          tokenURI: string;
          supply: number | BN | string;
          creators: { account: string; value: number | BN | string }[];
          royalties: { account: string; value: number | BN | string }[];
          signatures: string[];
        },
        from: string,
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        data: {
          tokenId: number | BN | string;
          tokenURI: string;
          supply: number | BN | string;
          creators: { account: string; value: number | BN | string }[];
          royalties: { account: string; value: number | BN | string }[];
          signatures: string[];
        },
        from: string,
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        data: {
          tokenId: number | BN | string;
          tokenURI: string;
          supply: number | BN | string;
          creators: { account: string; value: number | BN | string }[];
          royalties: { account: string; value: number | BN | string }[];
          signatures: string[];
        },
        from: string,
        to: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    updateAccount: {
      (
        _id: number | BN | string,
        _from: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        _from: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        _from: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        _from: string,
        _to: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    uri(
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    __ERC1155RaribleUser_init: {
      (
        _name: string,
        _symbol: string,
        baseURI: string,
        contractURI: string,
        operators: string[],
        transferProxy: string,
        lazyTransferProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _name: string,
        _symbol: string,
        baseURI: string,
        contractURI: string,
        operators: string[],
        transferProxy: string,
        lazyTransferProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        _symbol: string,
        baseURI: string,
        contractURI: string,
        operators: string[],
        transferProxy: string,
        lazyTransferProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        _symbol: string,
        baseURI: string,
        contractURI: string,
        operators: string[],
        transferProxy: string,
        lazyTransferProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    __ERC1155Rarible_init: {
      (
        _name: string,
        _symbol: string,
        baseURI: string,
        contractURI: string,
        transferProxy: string,
        lazyTransferProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _name: string,
        _symbol: string,
        baseURI: string,
        contractURI: string,
        transferProxy: string,
        lazyTransferProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        _symbol: string,
        baseURI: string,
        contractURI: string,
        transferProxy: string,
        lazyTransferProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        _symbol: string,
        baseURI: string,
        contractURI: string,
        transferProxy: string,
        lazyTransferProxy: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    mintAndTransfer: {
      (
        data: {
          tokenId: number | BN | string;
          tokenURI: string;
          supply: number | BN | string;
          creators: { account: string; value: number | BN | string }[];
          royalties: { account: string; value: number | BN | string }[];
          signatures: string[];
        },
        to: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        data: {
          tokenId: number | BN | string;
          tokenURI: string;
          supply: number | BN | string;
          creators: { account: string; value: number | BN | string }[];
          royalties: { account: string; value: number | BN | string }[];
          signatures: string[];
        },
        to: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        data: {
          tokenId: number | BN | string;
          tokenURI: string;
          supply: number | BN | string;
          creators: { account: string; value: number | BN | string }[];
          royalties: { account: string; value: number | BN | string }[];
          signatures: string[];
        },
        to: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        data: {
          tokenId: number | BN | string;
          tokenURI: string;
          supply: number | BN | string;
          creators: { account: string; value: number | BN | string }[];
          royalties: { account: string; value: number | BN | string }[];
          signatures: string[];
        },
        to: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
