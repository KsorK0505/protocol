/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface Ix2y2Contract extends Truffle.Contract<Ix2y2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<Ix2y2Instance>;
}

type AllEvents = never;

export interface Ix2y2Instance extends Truffle.ContractInstance {
  run: {
    (
      input: {
        orders: {
          salt: number | BN | string;
          user: string;
          network: number | BN | string;
          intent: number | BN | string;
          delegateType: number | BN | string;
          deadline: number | BN | string;
          currency: string;
          dataMask: string;
          items: { price: number | BN | string; data: string }[];
          r: string;
          s: string;
          v: number | BN | string;
          signVersion: number | BN | string;
        }[];
        details: {
          op: number | BN | string;
          orderIdx: number | BN | string;
          itemIdx: number | BN | string;
          price: number | BN | string;
          itemHash: string;
          executionDelegate: string;
          dataReplacement: string;
          bidIncentivePct: number | BN | string;
          aucMinIncrementPct: number | BN | string;
          aucIncDurationSecs: number | BN | string;
          fees: { percentage: number | BN | string; to: string }[];
        }[];
        shared: {
          salt: number | BN | string;
          deadline: number | BN | string;
          amountToEth: number | BN | string;
          amountToWeth: number | BN | string;
          user: string;
          canFail: boolean;
        };
        r: string;
        s: string;
        v: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      input: {
        orders: {
          salt: number | BN | string;
          user: string;
          network: number | BN | string;
          intent: number | BN | string;
          delegateType: number | BN | string;
          deadline: number | BN | string;
          currency: string;
          dataMask: string;
          items: { price: number | BN | string; data: string }[];
          r: string;
          s: string;
          v: number | BN | string;
          signVersion: number | BN | string;
        }[];
        details: {
          op: number | BN | string;
          orderIdx: number | BN | string;
          itemIdx: number | BN | string;
          price: number | BN | string;
          itemHash: string;
          executionDelegate: string;
          dataReplacement: string;
          bidIncentivePct: number | BN | string;
          aucMinIncrementPct: number | BN | string;
          aucIncDurationSecs: number | BN | string;
          fees: { percentage: number | BN | string; to: string }[];
        }[];
        shared: {
          salt: number | BN | string;
          deadline: number | BN | string;
          amountToEth: number | BN | string;
          amountToWeth: number | BN | string;
          user: string;
          canFail: boolean;
        };
        r: string;
        s: string;
        v: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      input: {
        orders: {
          salt: number | BN | string;
          user: string;
          network: number | BN | string;
          intent: number | BN | string;
          delegateType: number | BN | string;
          deadline: number | BN | string;
          currency: string;
          dataMask: string;
          items: { price: number | BN | string; data: string }[];
          r: string;
          s: string;
          v: number | BN | string;
          signVersion: number | BN | string;
        }[];
        details: {
          op: number | BN | string;
          orderIdx: number | BN | string;
          itemIdx: number | BN | string;
          price: number | BN | string;
          itemHash: string;
          executionDelegate: string;
          dataReplacement: string;
          bidIncentivePct: number | BN | string;
          aucMinIncrementPct: number | BN | string;
          aucIncDurationSecs: number | BN | string;
          fees: { percentage: number | BN | string; to: string }[];
        }[];
        shared: {
          salt: number | BN | string;
          deadline: number | BN | string;
          amountToEth: number | BN | string;
          amountToWeth: number | BN | string;
          user: string;
          canFail: boolean;
        };
        r: string;
        s: string;
        v: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      input: {
        orders: {
          salt: number | BN | string;
          user: string;
          network: number | BN | string;
          intent: number | BN | string;
          delegateType: number | BN | string;
          deadline: number | BN | string;
          currency: string;
          dataMask: string;
          items: { price: number | BN | string; data: string }[];
          r: string;
          s: string;
          v: number | BN | string;
          signVersion: number | BN | string;
        }[];
        details: {
          op: number | BN | string;
          orderIdx: number | BN | string;
          itemIdx: number | BN | string;
          price: number | BN | string;
          itemHash: string;
          executionDelegate: string;
          dataReplacement: string;
          bidIncentivePct: number | BN | string;
          aucMinIncrementPct: number | BN | string;
          aucIncDurationSecs: number | BN | string;
          fees: { percentage: number | BN | string; to: string }[];
        }[];
        shared: {
          salt: number | BN | string;
          deadline: number | BN | string;
          amountToEth: number | BN | string;
          amountToWeth: number | BN | string;
          user: string;
          canFail: boolean;
        };
        r: string;
        s: string;
        v: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    run: {
      (
        input: {
          orders: {
            salt: number | BN | string;
            user: string;
            network: number | BN | string;
            intent: number | BN | string;
            delegateType: number | BN | string;
            deadline: number | BN | string;
            currency: string;
            dataMask: string;
            items: { price: number | BN | string; data: string }[];
            r: string;
            s: string;
            v: number | BN | string;
            signVersion: number | BN | string;
          }[];
          details: {
            op: number | BN | string;
            orderIdx: number | BN | string;
            itemIdx: number | BN | string;
            price: number | BN | string;
            itemHash: string;
            executionDelegate: string;
            dataReplacement: string;
            bidIncentivePct: number | BN | string;
            aucMinIncrementPct: number | BN | string;
            aucIncDurationSecs: number | BN | string;
            fees: { percentage: number | BN | string; to: string }[];
          }[];
          shared: {
            salt: number | BN | string;
            deadline: number | BN | string;
            amountToEth: number | BN | string;
            amountToWeth: number | BN | string;
            user: string;
            canFail: boolean;
          };
          r: string;
          s: string;
          v: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        input: {
          orders: {
            salt: number | BN | string;
            user: string;
            network: number | BN | string;
            intent: number | BN | string;
            delegateType: number | BN | string;
            deadline: number | BN | string;
            currency: string;
            dataMask: string;
            items: { price: number | BN | string; data: string }[];
            r: string;
            s: string;
            v: number | BN | string;
            signVersion: number | BN | string;
          }[];
          details: {
            op: number | BN | string;
            orderIdx: number | BN | string;
            itemIdx: number | BN | string;
            price: number | BN | string;
            itemHash: string;
            executionDelegate: string;
            dataReplacement: string;
            bidIncentivePct: number | BN | string;
            aucMinIncrementPct: number | BN | string;
            aucIncDurationSecs: number | BN | string;
            fees: { percentage: number | BN | string; to: string }[];
          }[];
          shared: {
            salt: number | BN | string;
            deadline: number | BN | string;
            amountToEth: number | BN | string;
            amountToWeth: number | BN | string;
            user: string;
            canFail: boolean;
          };
          r: string;
          s: string;
          v: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        input: {
          orders: {
            salt: number | BN | string;
            user: string;
            network: number | BN | string;
            intent: number | BN | string;
            delegateType: number | BN | string;
            deadline: number | BN | string;
            currency: string;
            dataMask: string;
            items: { price: number | BN | string; data: string }[];
            r: string;
            s: string;
            v: number | BN | string;
            signVersion: number | BN | string;
          }[];
          details: {
            op: number | BN | string;
            orderIdx: number | BN | string;
            itemIdx: number | BN | string;
            price: number | BN | string;
            itemHash: string;
            executionDelegate: string;
            dataReplacement: string;
            bidIncentivePct: number | BN | string;
            aucMinIncrementPct: number | BN | string;
            aucIncDurationSecs: number | BN | string;
            fees: { percentage: number | BN | string; to: string }[];
          }[];
          shared: {
            salt: number | BN | string;
            deadline: number | BN | string;
            amountToEth: number | BN | string;
            amountToWeth: number | BN | string;
            user: string;
            canFail: boolean;
          };
          r: string;
          s: string;
          v: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        input: {
          orders: {
            salt: number | BN | string;
            user: string;
            network: number | BN | string;
            intent: number | BN | string;
            delegateType: number | BN | string;
            deadline: number | BN | string;
            currency: string;
            dataMask: string;
            items: { price: number | BN | string; data: string }[];
            r: string;
            s: string;
            v: number | BN | string;
            signVersion: number | BN | string;
          }[];
          details: {
            op: number | BN | string;
            orderIdx: number | BN | string;
            itemIdx: number | BN | string;
            price: number | BN | string;
            itemHash: string;
            executionDelegate: string;
            dataReplacement: string;
            bidIncentivePct: number | BN | string;
            aucMinIncrementPct: number | BN | string;
            aucIncDurationSecs: number | BN | string;
            fees: { percentage: number | BN | string; to: string }[];
          }[];
          shared: {
            salt: number | BN | string;
            deadline: number | BN | string;
            amountToEth: number | BN | string;
            amountToWeth: number | BN | string;
            user: string;
            canFail: boolean;
          };
          r: string;
          s: string;
          v: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
