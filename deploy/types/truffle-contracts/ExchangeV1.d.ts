/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ExchangeV1Contract
  extends Truffle.Contract<ExchangeV1Instance> {
  "new"(
    _transferProxy: string,
    _transferProxyForDeprecated: string,
    _erc20TransferProxy: string,
    _state: string,
    _ordersHolder: string,
    _beneficiary: string,
    _buyerFeeSigner: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ExchangeV1Instance>;
}

export interface Buy {
  name: "Buy";
  args: {
    sellToken: string;
    sellTokenId: BN;
    sellValue: BN;
    owner: string;
    buyToken: string;
    buyTokenId: BN;
    buyValue: BN;
    buyer: string;
    amount: BN;
    salt: BN;
    0: string;
    1: BN;
    2: BN;
    3: string;
    4: string;
    5: BN;
    6: BN;
    7: string;
    8: BN;
    9: BN;
  };
}

export interface Cancel {
  name: "Cancel";
  args: {
    sellToken: string;
    sellTokenId: BN;
    owner: string;
    buyToken: string;
    buyTokenId: BN;
    salt: BN;
    0: string;
    1: BN;
    2: string;
    3: string;
    4: BN;
    5: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents = Buy | Cancel | OwnershipTransferred;

export interface ExchangeV1Instance extends Truffle.ContractInstance {
  beneficiary(txDetails?: Truffle.TransactionDetails): Promise<string>;

  buyerFeeSigner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  erc20TransferProxy(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  ordersHolder(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  state(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferProxy(txDetails?: Truffle.TransactionDetails): Promise<string>;

  transferProxyForDeprecated(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setBeneficiary: {
    (newBeneficiary: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newBeneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newBeneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newBeneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setBuyerFeeSigner: {
    (
      newBuyerFeeSigner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      newBuyerFeeSigner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newBuyerFeeSigner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newBuyerFeeSigner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchange: {
    (
      order: {
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        };
        selling: number | BN | string;
        buying: number | BN | string;
        sellerFee: number | BN | string;
      },
      sig: { v: number | BN | string; r: string; s: string },
      buyerFee: number | BN | string,
      buyerFeeSig: { v: number | BN | string; r: string; s: string },
      amount: number | BN | string,
      buyer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      order: {
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        };
        selling: number | BN | string;
        buying: number | BN | string;
        sellerFee: number | BN | string;
      },
      sig: { v: number | BN | string; r: string; s: string },
      buyerFee: number | BN | string,
      buyerFeeSig: { v: number | BN | string; r: string; s: string },
      amount: number | BN | string,
      buyer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      order: {
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        };
        selling: number | BN | string;
        buying: number | BN | string;
        sellerFee: number | BN | string;
      },
      sig: { v: number | BN | string; r: string; s: string },
      buyerFee: number | BN | string,
      buyerFeeSig: { v: number | BN | string; r: string; s: string },
      amount: number | BN | string,
      buyer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      order: {
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        };
        selling: number | BN | string;
        buying: number | BN | string;
        sellerFee: number | BN | string;
      },
      sig: { v: number | BN | string; r: string; s: string },
      buyerFee: number | BN | string,
      buyerFeeSig: { v: number | BN | string; r: string; s: string },
      amount: number | BN | string,
      buyer: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancel: {
    (
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  prepareBuyerFeeMessage(
    order: {
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      };
      selling: number | BN | string;
      buying: number | BN | string;
      sellerFee: number | BN | string;
    },
    fee: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  prepareMessage(
    order: {
      key: {
        owner: string;
        salt: number | BN | string;
        sellAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
        buyAsset: {
          token: string;
          tokenId: number | BN | string;
          assetType: number | BN | string;
        };
      };
      selling: number | BN | string;
      buying: number | BN | string;
      sellerFee: number | BN | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    beneficiary(txDetails?: Truffle.TransactionDetails): Promise<string>;

    buyerFeeSigner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    erc20TransferProxy(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    ordersHolder(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    state(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferProxy(txDetails?: Truffle.TransactionDetails): Promise<string>;

    transferProxyForDeprecated(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setBeneficiary: {
      (newBeneficiary: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newBeneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newBeneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newBeneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setBuyerFeeSigner: {
      (
        newBuyerFeeSigner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        newBuyerFeeSigner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newBuyerFeeSigner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newBuyerFeeSigner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exchange: {
      (
        order: {
          key: {
            owner: string;
            salt: number | BN | string;
            sellAsset: {
              token: string;
              tokenId: number | BN | string;
              assetType: number | BN | string;
            };
            buyAsset: {
              token: string;
              tokenId: number | BN | string;
              assetType: number | BN | string;
            };
          };
          selling: number | BN | string;
          buying: number | BN | string;
          sellerFee: number | BN | string;
        },
        sig: { v: number | BN | string; r: string; s: string },
        buyerFee: number | BN | string,
        buyerFeeSig: { v: number | BN | string; r: string; s: string },
        amount: number | BN | string,
        buyer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        order: {
          key: {
            owner: string;
            salt: number | BN | string;
            sellAsset: {
              token: string;
              tokenId: number | BN | string;
              assetType: number | BN | string;
            };
            buyAsset: {
              token: string;
              tokenId: number | BN | string;
              assetType: number | BN | string;
            };
          };
          selling: number | BN | string;
          buying: number | BN | string;
          sellerFee: number | BN | string;
        },
        sig: { v: number | BN | string; r: string; s: string },
        buyerFee: number | BN | string,
        buyerFeeSig: { v: number | BN | string; r: string; s: string },
        amount: number | BN | string,
        buyer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        order: {
          key: {
            owner: string;
            salt: number | BN | string;
            sellAsset: {
              token: string;
              tokenId: number | BN | string;
              assetType: number | BN | string;
            };
            buyAsset: {
              token: string;
              tokenId: number | BN | string;
              assetType: number | BN | string;
            };
          };
          selling: number | BN | string;
          buying: number | BN | string;
          sellerFee: number | BN | string;
        },
        sig: { v: number | BN | string; r: string; s: string },
        buyerFee: number | BN | string,
        buyerFeeSig: { v: number | BN | string; r: string; s: string },
        amount: number | BN | string,
        buyer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        order: {
          key: {
            owner: string;
            salt: number | BN | string;
            sellAsset: {
              token: string;
              tokenId: number | BN | string;
              assetType: number | BN | string;
            };
            buyAsset: {
              token: string;
              tokenId: number | BN | string;
              assetType: number | BN | string;
            };
          };
          selling: number | BN | string;
          buying: number | BN | string;
          sellerFee: number | BN | string;
        },
        sig: { v: number | BN | string; r: string; s: string },
        buyerFee: number | BN | string,
        buyerFeeSig: { v: number | BN | string; r: string; s: string },
        amount: number | BN | string,
        buyer: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancel: {
      (
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    prepareBuyerFeeMessage(
      order: {
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        };
        selling: number | BN | string;
        buying: number | BN | string;
        sellerFee: number | BN | string;
      },
      fee: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    prepareMessage(
      order: {
        key: {
          owner: string;
          salt: number | BN | string;
          sellAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
          buyAsset: {
            token: string;
            tokenId: number | BN | string;
            assetType: number | BN | string;
          };
        };
        selling: number | BN | string;
        buying: number | BN | string;
        sellerFee: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
