/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IBlurContract extends Truffle.Contract<IBlurInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IBlurInstance>;
}

type AllEvents = never;

export interface IBlurInstance extends Truffle.ContractInstance {
  execute: {
    (
      sell: {
        order: {
          trader: string;
          side: number | BN | string;
          matchingPolicy: string;
          collection: string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          paymentToken: string;
          price: number | BN | string;
          listingTime: number | BN | string;
          expirationTime: number | BN | string;
          fees: { rate: number | BN | string; recipient: string }[];
          salt: number | BN | string;
          extraParams: string;
        };
        v: number | BN | string;
        r: string;
        s: string;
        extraSignature: string;
        signatureVersion: number | BN | string;
        blockNumber: number | BN | string;
      },
      buy: {
        order: {
          trader: string;
          side: number | BN | string;
          matchingPolicy: string;
          collection: string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          paymentToken: string;
          price: number | BN | string;
          listingTime: number | BN | string;
          expirationTime: number | BN | string;
          fees: { rate: number | BN | string; recipient: string }[];
          salt: number | BN | string;
          extraParams: string;
        };
        v: number | BN | string;
        r: string;
        s: string;
        extraSignature: string;
        signatureVersion: number | BN | string;
        blockNumber: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sell: {
        order: {
          trader: string;
          side: number | BN | string;
          matchingPolicy: string;
          collection: string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          paymentToken: string;
          price: number | BN | string;
          listingTime: number | BN | string;
          expirationTime: number | BN | string;
          fees: { rate: number | BN | string; recipient: string }[];
          salt: number | BN | string;
          extraParams: string;
        };
        v: number | BN | string;
        r: string;
        s: string;
        extraSignature: string;
        signatureVersion: number | BN | string;
        blockNumber: number | BN | string;
      },
      buy: {
        order: {
          trader: string;
          side: number | BN | string;
          matchingPolicy: string;
          collection: string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          paymentToken: string;
          price: number | BN | string;
          listingTime: number | BN | string;
          expirationTime: number | BN | string;
          fees: { rate: number | BN | string; recipient: string }[];
          salt: number | BN | string;
          extraParams: string;
        };
        v: number | BN | string;
        r: string;
        s: string;
        extraSignature: string;
        signatureVersion: number | BN | string;
        blockNumber: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sell: {
        order: {
          trader: string;
          side: number | BN | string;
          matchingPolicy: string;
          collection: string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          paymentToken: string;
          price: number | BN | string;
          listingTime: number | BN | string;
          expirationTime: number | BN | string;
          fees: { rate: number | BN | string; recipient: string }[];
          salt: number | BN | string;
          extraParams: string;
        };
        v: number | BN | string;
        r: string;
        s: string;
        extraSignature: string;
        signatureVersion: number | BN | string;
        blockNumber: number | BN | string;
      },
      buy: {
        order: {
          trader: string;
          side: number | BN | string;
          matchingPolicy: string;
          collection: string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          paymentToken: string;
          price: number | BN | string;
          listingTime: number | BN | string;
          expirationTime: number | BN | string;
          fees: { rate: number | BN | string; recipient: string }[];
          salt: number | BN | string;
          extraParams: string;
        };
        v: number | BN | string;
        r: string;
        s: string;
        extraSignature: string;
        signatureVersion: number | BN | string;
        blockNumber: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sell: {
        order: {
          trader: string;
          side: number | BN | string;
          matchingPolicy: string;
          collection: string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          paymentToken: string;
          price: number | BN | string;
          listingTime: number | BN | string;
          expirationTime: number | BN | string;
          fees: { rate: number | BN | string; recipient: string }[];
          salt: number | BN | string;
          extraParams: string;
        };
        v: number | BN | string;
        r: string;
        s: string;
        extraSignature: string;
        signatureVersion: number | BN | string;
        blockNumber: number | BN | string;
      },
      buy: {
        order: {
          trader: string;
          side: number | BN | string;
          matchingPolicy: string;
          collection: string;
          tokenId: number | BN | string;
          amount: number | BN | string;
          paymentToken: string;
          price: number | BN | string;
          listingTime: number | BN | string;
          expirationTime: number | BN | string;
          fees: { rate: number | BN | string; recipient: string }[];
          salt: number | BN | string;
          extraParams: string;
        };
        v: number | BN | string;
        r: string;
        s: string;
        extraSignature: string;
        signatureVersion: number | BN | string;
        blockNumber: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    execute: {
      (
        sell: {
          order: {
            trader: string;
            side: number | BN | string;
            matchingPolicy: string;
            collection: string;
            tokenId: number | BN | string;
            amount: number | BN | string;
            paymentToken: string;
            price: number | BN | string;
            listingTime: number | BN | string;
            expirationTime: number | BN | string;
            fees: { rate: number | BN | string; recipient: string }[];
            salt: number | BN | string;
            extraParams: string;
          };
          v: number | BN | string;
          r: string;
          s: string;
          extraSignature: string;
          signatureVersion: number | BN | string;
          blockNumber: number | BN | string;
        },
        buy: {
          order: {
            trader: string;
            side: number | BN | string;
            matchingPolicy: string;
            collection: string;
            tokenId: number | BN | string;
            amount: number | BN | string;
            paymentToken: string;
            price: number | BN | string;
            listingTime: number | BN | string;
            expirationTime: number | BN | string;
            fees: { rate: number | BN | string; recipient: string }[];
            salt: number | BN | string;
            extraParams: string;
          };
          v: number | BN | string;
          r: string;
          s: string;
          extraSignature: string;
          signatureVersion: number | BN | string;
          blockNumber: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sell: {
          order: {
            trader: string;
            side: number | BN | string;
            matchingPolicy: string;
            collection: string;
            tokenId: number | BN | string;
            amount: number | BN | string;
            paymentToken: string;
            price: number | BN | string;
            listingTime: number | BN | string;
            expirationTime: number | BN | string;
            fees: { rate: number | BN | string; recipient: string }[];
            salt: number | BN | string;
            extraParams: string;
          };
          v: number | BN | string;
          r: string;
          s: string;
          extraSignature: string;
          signatureVersion: number | BN | string;
          blockNumber: number | BN | string;
        },
        buy: {
          order: {
            trader: string;
            side: number | BN | string;
            matchingPolicy: string;
            collection: string;
            tokenId: number | BN | string;
            amount: number | BN | string;
            paymentToken: string;
            price: number | BN | string;
            listingTime: number | BN | string;
            expirationTime: number | BN | string;
            fees: { rate: number | BN | string; recipient: string }[];
            salt: number | BN | string;
            extraParams: string;
          };
          v: number | BN | string;
          r: string;
          s: string;
          extraSignature: string;
          signatureVersion: number | BN | string;
          blockNumber: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        sell: {
          order: {
            trader: string;
            side: number | BN | string;
            matchingPolicy: string;
            collection: string;
            tokenId: number | BN | string;
            amount: number | BN | string;
            paymentToken: string;
            price: number | BN | string;
            listingTime: number | BN | string;
            expirationTime: number | BN | string;
            fees: { rate: number | BN | string; recipient: string }[];
            salt: number | BN | string;
            extraParams: string;
          };
          v: number | BN | string;
          r: string;
          s: string;
          extraSignature: string;
          signatureVersion: number | BN | string;
          blockNumber: number | BN | string;
        },
        buy: {
          order: {
            trader: string;
            side: number | BN | string;
            matchingPolicy: string;
            collection: string;
            tokenId: number | BN | string;
            amount: number | BN | string;
            paymentToken: string;
            price: number | BN | string;
            listingTime: number | BN | string;
            expirationTime: number | BN | string;
            fees: { rate: number | BN | string; recipient: string }[];
            salt: number | BN | string;
            extraParams: string;
          };
          v: number | BN | string;
          r: string;
          s: string;
          extraSignature: string;
          signatureVersion: number | BN | string;
          blockNumber: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sell: {
          order: {
            trader: string;
            side: number | BN | string;
            matchingPolicy: string;
            collection: string;
            tokenId: number | BN | string;
            amount: number | BN | string;
            paymentToken: string;
            price: number | BN | string;
            listingTime: number | BN | string;
            expirationTime: number | BN | string;
            fees: { rate: number | BN | string; recipient: string }[];
            salt: number | BN | string;
            extraParams: string;
          };
          v: number | BN | string;
          r: string;
          s: string;
          extraSignature: string;
          signatureVersion: number | BN | string;
          blockNumber: number | BN | string;
        },
        buy: {
          order: {
            trader: string;
            side: number | BN | string;
            matchingPolicy: string;
            collection: string;
            tokenId: number | BN | string;
            amount: number | BN | string;
            paymentToken: string;
            price: number | BN | string;
            listingTime: number | BN | string;
            expirationTime: number | BN | string;
            fees: { rate: number | BN | string; recipient: string }[];
            salt: number | BN | string;
            extraParams: string;
          };
          v: number | BN | string;
          r: string;
          s: string;
          extraSignature: string;
          signatureVersion: number | BN | string;
          blockNumber: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
