/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RoyaltiesV2UpgradeableContract
  extends Truffle.Contract<RoyaltiesV2UpgradeableInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<RoyaltiesV2UpgradeableInstance>;
}

export interface RoyaltiesSet {
  name: "RoyaltiesSet";
  args: {
    tokenId: BN;
    royalties: { account: string; value: BN }[];
    0: BN;
    1: { account: string; value: BN }[];
  };
}

type AllEvents = RoyaltiesSet;

export interface RoyaltiesV2UpgradeableInstance
  extends Truffle.ContractInstance {
  getRaribleV2Royalties(
    id: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ account: string; value: BN }[]>;

  /**
   * See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    getRaribleV2Royalties(
      id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ account: string; value: BN }[]>;

    /**
     * See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
