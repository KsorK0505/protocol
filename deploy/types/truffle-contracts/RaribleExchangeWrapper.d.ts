/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RaribleExchangeWrapperContract
  extends Truffle.Contract<RaribleExchangeWrapperInstance> {
  "new"(
    marketplaces: string[],
    _weth: string,
    transferProxies: string[],
    meta?: Truffle.TransactionDetails
  ): Promise<RaribleExchangeWrapperInstance>;
}

export interface Execution {
  name: "Execution";
  args: {
    result: boolean;
    0: boolean;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    paused: boolean;
    0: boolean;
  };
}

type AllEvents = Execution | OwnershipTransferred | Paused;

export interface RaribleExchangeWrapperInstance
  extends Truffle.ContractInstance {
  blur(txDetails?: Truffle.TransactionDetails): Promise<string>;

  exchangeV2(txDetails?: Truffle.TransactionDetails): Promise<string>;

  looksRare(txDetails?: Truffle.TransactionDetails): Promise<string>;

  looksRareV2(txDetails?: Truffle.TransactionDetails): Promise<string>;

  onERC1155BatchReceived: {
    (
      arg0: string,
      arg1: string,
      arg2: (number | BN | string)[],
      arg3: (number | BN | string)[],
      arg4: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: string,
      arg2: (number | BN | string)[],
      arg3: (number | BN | string)[],
      arg4: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: (number | BN | string)[],
      arg3: (number | BN | string)[],
      arg4: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: (number | BN | string)[],
      arg3: (number | BN | string)[],
      arg4: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  onERC1155Received: {
    (
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      arg4: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      arg4: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      arg4: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      arg3: number | BN | string,
      arg4: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.
   */
  onERC721Received: {
    (
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      arg1: string,
      arg2: number | BN | string,
      arg3: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pause: {
    (_paused: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _paused: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _paused: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _paused: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  seaPort_1_1(txDetails?: Truffle.TransactionDetails): Promise<string>;

  seaPort_1_4(txDetails?: Truffle.TransactionDetails): Promise<string>;

  seaPort_1_5(txDetails?: Truffle.TransactionDetails): Promise<string>;

  sudoswap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.
   */
  supportsInterface(
    interfaceId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

  wyvernExchange(txDetails?: Truffle.TransactionDetails): Promise<string>;

  x2y2(txDetails?: Truffle.TransactionDetails): Promise<string>;

  singlePurchase: {
    (
      purchaseDetails: {
        marketId: number | BN | string;
        amount: number | BN | string;
        fees: number | BN | string;
        data: string;
      },
      feeRecipientFirst: string,
      feeRecipientSecond: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      purchaseDetails: {
        marketId: number | BN | string;
        amount: number | BN | string;
        fees: number | BN | string;
        data: string;
      },
      feeRecipientFirst: string,
      feeRecipientSecond: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      purchaseDetails: {
        marketId: number | BN | string;
        amount: number | BN | string;
        fees: number | BN | string;
        data: string;
      },
      feeRecipientFirst: string,
      feeRecipientSecond: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      purchaseDetails: {
        marketId: number | BN | string;
        amount: number | BN | string;
        fees: number | BN | string;
        data: string;
      },
      feeRecipientFirst: string,
      feeRecipientSecond: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  bulkPurchase: {
    (
      purchaseDetails: {
        marketId: number | BN | string;
        amount: number | BN | string;
        fees: number | BN | string;
        data: string;
      }[],
      feeRecipientFirst: string,
      feeRecipientSecond: string,
      allowFail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      purchaseDetails: {
        marketId: number | BN | string;
        amount: number | BN | string;
        fees: number | BN | string;
        data: string;
      }[],
      feeRecipientFirst: string,
      feeRecipientSecond: string,
      allowFail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      purchaseDetails: {
        marketId: number | BN | string;
        amount: number | BN | string;
        fees: number | BN | string;
        data: string;
      }[],
      feeRecipientFirst: string,
      feeRecipientSecond: string,
      allowFail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      purchaseDetails: {
        marketId: number | BN | string;
        amount: number | BN | string;
        fees: number | BN | string;
        data: string;
      }[],
      feeRecipientFirst: string,
      feeRecipientSecond: string,
      allowFail: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * approves weth for a list of the addresses
   * @param transferProxies - array of addresses to approve WETH for
   */
  approveWETH: {
    (
      transferProxies: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      transferProxies: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      transferProxies: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      transferProxies: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    blur(txDetails?: Truffle.TransactionDetails): Promise<string>;

    exchangeV2(txDetails?: Truffle.TransactionDetails): Promise<string>;

    looksRare(txDetails?: Truffle.TransactionDetails): Promise<string>;

    looksRareV2(txDetails?: Truffle.TransactionDetails): Promise<string>;

    onERC1155BatchReceived: {
      (
        arg0: string,
        arg1: string,
        arg2: (number | BN | string)[],
        arg3: (number | BN | string)[],
        arg4: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: string,
        arg2: (number | BN | string)[],
        arg3: (number | BN | string)[],
        arg4: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        arg0: string,
        arg1: string,
        arg2: (number | BN | string)[],
        arg3: (number | BN | string)[],
        arg4: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: string,
        arg2: (number | BN | string)[],
        arg3: (number | BN | string)[],
        arg4: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    onERC1155Received: {
      (
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        arg3: number | BN | string,
        arg4: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        arg3: number | BN | string,
        arg4: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        arg3: number | BN | string,
        arg4: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        arg3: number | BN | string,
        arg4: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.
     */
    onERC721Received: {
      (
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        arg3: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        arg3: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        arg3: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        arg1: string,
        arg2: number | BN | string,
        arg3: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pause: {
      (_paused: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _paused: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _paused: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _paused: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    seaPort_1_1(txDetails?: Truffle.TransactionDetails): Promise<string>;

    seaPort_1_4(txDetails?: Truffle.TransactionDetails): Promise<string>;

    seaPort_1_5(txDetails?: Truffle.TransactionDetails): Promise<string>;

    sudoswap(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    weth(txDetails?: Truffle.TransactionDetails): Promise<string>;

    wyvernExchange(txDetails?: Truffle.TransactionDetails): Promise<string>;

    x2y2(txDetails?: Truffle.TransactionDetails): Promise<string>;

    singlePurchase: {
      (
        purchaseDetails: {
          marketId: number | BN | string;
          amount: number | BN | string;
          fees: number | BN | string;
          data: string;
        },
        feeRecipientFirst: string,
        feeRecipientSecond: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        purchaseDetails: {
          marketId: number | BN | string;
          amount: number | BN | string;
          fees: number | BN | string;
          data: string;
        },
        feeRecipientFirst: string,
        feeRecipientSecond: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        purchaseDetails: {
          marketId: number | BN | string;
          amount: number | BN | string;
          fees: number | BN | string;
          data: string;
        },
        feeRecipientFirst: string,
        feeRecipientSecond: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        purchaseDetails: {
          marketId: number | BN | string;
          amount: number | BN | string;
          fees: number | BN | string;
          data: string;
        },
        feeRecipientFirst: string,
        feeRecipientSecond: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    bulkPurchase: {
      (
        purchaseDetails: {
          marketId: number | BN | string;
          amount: number | BN | string;
          fees: number | BN | string;
          data: string;
        }[],
        feeRecipientFirst: string,
        feeRecipientSecond: string,
        allowFail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        purchaseDetails: {
          marketId: number | BN | string;
          amount: number | BN | string;
          fees: number | BN | string;
          data: string;
        }[],
        feeRecipientFirst: string,
        feeRecipientSecond: string,
        allowFail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        purchaseDetails: {
          marketId: number | BN | string;
          amount: number | BN | string;
          fees: number | BN | string;
          data: string;
        }[],
        feeRecipientFirst: string,
        feeRecipientSecond: string,
        allowFail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        purchaseDetails: {
          marketId: number | BN | string;
          amount: number | BN | string;
          fees: number | BN | string;
          data: string;
        }[],
        feeRecipientFirst: string,
        feeRecipientSecond: string,
        allowFail: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * approves weth for a list of the addresses
     * @param transferProxies - array of addresses to approve WETH for
     */
    approveWETH: {
      (
        transferProxies: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        transferProxies: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        transferProxies: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        transferProxies: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
