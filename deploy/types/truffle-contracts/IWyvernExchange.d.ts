/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IWyvernExchangeContract
  extends Truffle.Contract<IWyvernExchangeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IWyvernExchangeInstance>;
}

type AllEvents = never;

export interface IWyvernExchangeInstance extends Truffle.ContractInstance {
  atomicMatch_: {
    (
      addrs: string[],
      uints: (number | BN | string)[],
      feeMethodsSidesKindsHowToCalls: (number | BN | string)[],
      calldataBuy: string,
      calldataSell: string,
      replacementPatternBuy: string,
      replacementPatternSell: string,
      staticExtradataBuy: string,
      staticExtradataSell: string,
      vs: (number | BN | string)[],
      rssMetadata: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      addrs: string[],
      uints: (number | BN | string)[],
      feeMethodsSidesKindsHowToCalls: (number | BN | string)[],
      calldataBuy: string,
      calldataSell: string,
      replacementPatternBuy: string,
      replacementPatternSell: string,
      staticExtradataBuy: string,
      staticExtradataSell: string,
      vs: (number | BN | string)[],
      rssMetadata: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      addrs: string[],
      uints: (number | BN | string)[],
      feeMethodsSidesKindsHowToCalls: (number | BN | string)[],
      calldataBuy: string,
      calldataSell: string,
      replacementPatternBuy: string,
      replacementPatternSell: string,
      staticExtradataBuy: string,
      staticExtradataSell: string,
      vs: (number | BN | string)[],
      rssMetadata: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      addrs: string[],
      uints: (number | BN | string)[],
      feeMethodsSidesKindsHowToCalls: (number | BN | string)[],
      calldataBuy: string,
      calldataSell: string,
      replacementPatternBuy: string,
      replacementPatternSell: string,
      staticExtradataBuy: string,
      staticExtradataSell: string,
      vs: (number | BN | string)[],
      rssMetadata: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateFinalPrice(
    side: number | BN | string,
    saleKind: number | BN | string,
    basePrice: number | BN | string,
    extra: number | BN | string,
    listingTime: number | BN | string,
    expirationTime: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    atomicMatch_: {
      (
        addrs: string[],
        uints: (number | BN | string)[],
        feeMethodsSidesKindsHowToCalls: (number | BN | string)[],
        calldataBuy: string,
        calldataSell: string,
        replacementPatternBuy: string,
        replacementPatternSell: string,
        staticExtradataBuy: string,
        staticExtradataSell: string,
        vs: (number | BN | string)[],
        rssMetadata: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        addrs: string[],
        uints: (number | BN | string)[],
        feeMethodsSidesKindsHowToCalls: (number | BN | string)[],
        calldataBuy: string,
        calldataSell: string,
        replacementPatternBuy: string,
        replacementPatternSell: string,
        staticExtradataBuy: string,
        staticExtradataSell: string,
        vs: (number | BN | string)[],
        rssMetadata: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        addrs: string[],
        uints: (number | BN | string)[],
        feeMethodsSidesKindsHowToCalls: (number | BN | string)[],
        calldataBuy: string,
        calldataSell: string,
        replacementPatternBuy: string,
        replacementPatternSell: string,
        staticExtradataBuy: string,
        staticExtradataSell: string,
        vs: (number | BN | string)[],
        rssMetadata: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        addrs: string[],
        uints: (number | BN | string)[],
        feeMethodsSidesKindsHowToCalls: (number | BN | string)[],
        calldataBuy: string,
        calldataSell: string,
        replacementPatternBuy: string,
        replacementPatternSell: string,
        staticExtradataBuy: string,
        staticExtradataSell: string,
        vs: (number | BN | string)[],
        rssMetadata: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    calculateFinalPrice(
      side: number | BN | string,
      saleKind: number | BN | string,
      basePrice: number | BN | string,
      extra: number | BN | string,
      listingTime: number | BN | string,
      expirationTime: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
