/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IBlur {
  export type FeeStruct = {
    rate: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type FeeStructOutput = [number, string] & {
    rate: number;
    recipient: string;
  };

  export type OrderStruct = {
    trader: PromiseOrValue<string>;
    side: PromiseOrValue<BigNumberish>;
    matchingPolicy: PromiseOrValue<string>;
    collection: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    paymentToken: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    listingTime: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    fees: IBlur.FeeStruct[];
    salt: PromiseOrValue<BigNumberish>;
    extraParams: PromiseOrValue<BytesLike>;
  };

  export type OrderStructOutput = [
    string,
    number,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    IBlur.FeeStructOutput[],
    BigNumber,
    string
  ] & {
    trader: string;
    side: number;
    matchingPolicy: string;
    collection: string;
    tokenId: BigNumber;
    amount: BigNumber;
    paymentToken: string;
    price: BigNumber;
    listingTime: BigNumber;
    expirationTime: BigNumber;
    fees: IBlur.FeeStructOutput[];
    salt: BigNumber;
    extraParams: string;
  };

  export type InputStruct = {
    order: IBlur.OrderStruct;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    extraSignature: PromiseOrValue<BytesLike>;
    signatureVersion: PromiseOrValue<BigNumberish>;
    blockNumber: PromiseOrValue<BigNumberish>;
  };

  export type InputStructOutput = [
    IBlur.OrderStructOutput,
    number,
    string,
    string,
    string,
    number,
    BigNumber
  ] & {
    order: IBlur.OrderStructOutput;
    v: number;
    r: string;
    s: string;
    extraSignature: string;
    signatureVersion: number;
    blockNumber: BigNumber;
  };
}

export interface IBlurInterface extends utils.Interface {
  functions: {
    "execute(((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes),uint8,bytes32,bytes32,bytes,uint8,uint256),((address,uint8,address,address,uint256,uint256,address,uint256,uint256,uint256,(uint16,address)[],uint256,bytes),uint8,bytes32,bytes32,bytes,uint8,uint256))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "execute"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [IBlur.InputStruct, IBlur.InputStruct]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;

  events: {};
}

export interface IBlur extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBlurInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execute(
      sell: IBlur.InputStruct,
      buy: IBlur.InputStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  execute(
    sell: IBlur.InputStruct,
    buy: IBlur.InputStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    execute(
      sell: IBlur.InputStruct,
      buy: IBlur.InputStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    execute(
      sell: IBlur.InputStruct,
      buy: IBlur.InputStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execute(
      sell: IBlur.InputStruct,
      buy: IBlur.InputStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
