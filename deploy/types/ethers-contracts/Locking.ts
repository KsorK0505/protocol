/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LibBrokenLine {
  export type LineStruct = {
    start: PromiseOrValue<BigNumberish>;
    bias: PromiseOrValue<BigNumberish>;
    slope: PromiseOrValue<BigNumberish>;
  };

  export type LineStructOutput = [BigNumber, BigNumber, BigNumber] & {
    start: BigNumber;
    bias: BigNumber;
    slope: BigNumber;
  };
}

export interface LockingInterface extends utils.Interface {
  functions: {
    "WEEK()": FunctionFragment;
    "counter()": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "getLock(uint256,uint256,uint256)": FunctionFragment;
    "getPastTotalSupply(uint256)": FunctionFragment;
    "getPastVotes(address,uint256)": FunctionFragment;
    "getVotes(address)": FunctionFragment;
    "migrateTo()": FunctionFragment;
    "minCliffPeriod()": FunctionFragment;
    "minSlopePeriod()": FunctionFragment;
    "owner()": FunctionFragment;
    "relock(uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "roundTimestamp(uint256)": FunctionFragment;
    "setMinCliffPeriod(uint256)": FunctionFragment;
    "setMinSlopePeriod(uint256)": FunctionFragment;
    "setStartingPointWeek(uint256)": FunctionFragment;
    "startingPointWeek()": FunctionFragment;
    "stopped()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupplyLine()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAccountLines(address,uint256)": FunctionFragment;
    "updateAccountLinesBlockNumber(address,uint256)": FunctionFragment;
    "updateTotalSupplyLine(uint256)": FunctionFragment;
    "updateTotalSupplyLineBlockNumber(uint256)": FunctionFragment;
    "__Locking_init(address,uint256,uint256,uint256)": FunctionFragment;
    "stop()": FunctionFragment;
    "start()": FunctionFragment;
    "startMigration(address)": FunctionFragment;
    "lock(address,address,uint256,uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "getAvailableForWithdraw(address)": FunctionFragment;
    "locked(address)": FunctionFragment;
    "getAccountAndDelegate(uint256)": FunctionFragment;
    "getWeek()": FunctionFragment;
    "delegateTo(uint256,address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "migrate(uint256[])": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "decimals()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WEEK"
      | "counter"
      | "delegate"
      | "delegateBySig"
      | "delegates"
      | "getLock"
      | "getPastTotalSupply"
      | "getPastVotes"
      | "getVotes"
      | "migrateTo"
      | "minCliffPeriod"
      | "minSlopePeriod"
      | "owner"
      | "relock"
      | "renounceOwnership"
      | "roundTimestamp"
      | "setMinCliffPeriod"
      | "setMinSlopePeriod"
      | "setStartingPointWeek"
      | "startingPointWeek"
      | "stopped"
      | "token"
      | "totalSupplyLine"
      | "transferOwnership"
      | "updateAccountLines"
      | "updateAccountLinesBlockNumber"
      | "updateTotalSupplyLine"
      | "updateTotalSupplyLineBlockNumber"
      | "__Locking_init"
      | "stop"
      | "start"
      | "startMigration"
      | "lock"
      | "withdraw"
      | "getAvailableForWithdraw"
      | "locked"
      | "getAccountAndDelegate"
      | "getWeek"
      | "delegateTo"
      | "totalSupply"
      | "balanceOf"
      | "migrate"
      | "name"
      | "symbol"
      | "decimals"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLock",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTotalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "migrateTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minCliffPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minSlopePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relock",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roundTimestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCliffPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinSlopePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartingPointWeek",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startingPointWeek",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupplyLine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccountLines",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAccountLinesBlockNumber",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalSupplyLine",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTotalSupplyLineBlockNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "__Locking_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "stop", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startMigration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAvailableForWithdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountAndDelegate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getWeek", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateTo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;

  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPastTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrateTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minCliffPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minSlopePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCliffPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinSlopePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartingPointWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startingPointWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAccountLinesBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalSupplyLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTotalSupplyLineBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Locking_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableForWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountAndDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWeek", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegateTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;

  events: {
    "Delegate(uint256,address,address,uint256)": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "LockCreate(uint256,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Migrate(address,uint256[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Relock(uint256,address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SetMinCliffPeriod(uint256)": EventFragment;
    "SetMinSlopePeriod(uint256)": EventFragment;
    "SetStartingPointWeek(uint256)": EventFragment;
    "StartLocking(address)": EventFragment;
    "StartMigration(address,address)": EventFragment;
    "StopLocking(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockCreate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Migrate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Relock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinCliffPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinSlopePeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStartingPointWeek"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartLocking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartMigration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StopLocking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DelegateEventObject {
  id: BigNumber;
  account: string;
  delegate: string;
  time: BigNumber;
}
export type DelegateEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  DelegateEventObject
>;

export type DelegateEventFilter = TypedEventFilter<DelegateEvent>;

export interface DelegateChangedEventObject {
  delegator: string;
  fromDelegate: string;
  toDelegate: string;
}
export type DelegateChangedEvent = TypedEvent<
  [string, string, string],
  DelegateChangedEventObject
>;

export type DelegateChangedEventFilter = TypedEventFilter<DelegateChangedEvent>;

export interface DelegateVotesChangedEventObject {
  delegate: string;
  previousBalance: BigNumber;
  newBalance: BigNumber;
}
export type DelegateVotesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DelegateVotesChangedEventObject
>;

export type DelegateVotesChangedEventFilter =
  TypedEventFilter<DelegateVotesChangedEvent>;

export interface LockCreateEventObject {
  id: BigNumber;
  account: string;
  delegate: string;
  time: BigNumber;
  amount: BigNumber;
  slopePeriod: BigNumber;
  cliff: BigNumber;
}
export type LockCreateEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LockCreateEventObject
>;

export type LockCreateEventFilter = TypedEventFilter<LockCreateEvent>;

export interface MigrateEventObject {
  account: string;
  id: BigNumber[];
}
export type MigrateEvent = TypedEvent<
  [string, BigNumber[]],
  MigrateEventObject
>;

export type MigrateEventFilter = TypedEventFilter<MigrateEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RelockEventObject {
  id: BigNumber;
  account: string;
  delegate: string;
  counter: BigNumber;
  time: BigNumber;
  amount: BigNumber;
  slopePeriod: BigNumber;
  cliff: BigNumber;
}
export type RelockEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  RelockEventObject
>;

export type RelockEventFilter = TypedEventFilter<RelockEvent>;

export interface SetMinCliffPeriodEventObject {
  newMinCliffPeriod: BigNumber;
}
export type SetMinCliffPeriodEvent = TypedEvent<
  [BigNumber],
  SetMinCliffPeriodEventObject
>;

export type SetMinCliffPeriodEventFilter =
  TypedEventFilter<SetMinCliffPeriodEvent>;

export interface SetMinSlopePeriodEventObject {
  newMinSlopePeriod: BigNumber;
}
export type SetMinSlopePeriodEvent = TypedEvent<
  [BigNumber],
  SetMinSlopePeriodEventObject
>;

export type SetMinSlopePeriodEventFilter =
  TypedEventFilter<SetMinSlopePeriodEvent>;

export interface SetStartingPointWeekEventObject {
  newStartingPointWeek: BigNumber;
}
export type SetStartingPointWeekEvent = TypedEvent<
  [BigNumber],
  SetStartingPointWeekEventObject
>;

export type SetStartingPointWeekEventFilter =
  TypedEventFilter<SetStartingPointWeekEvent>;

export interface StartLockingEventObject {
  account: string;
}
export type StartLockingEvent = TypedEvent<[string], StartLockingEventObject>;

export type StartLockingEventFilter = TypedEventFilter<StartLockingEvent>;

export interface StartMigrationEventObject {
  account: string;
  to: string;
}
export type StartMigrationEvent = TypedEvent<
  [string, string],
  StartMigrationEventObject
>;

export type StartMigrationEventFilter = TypedEventFilter<StartMigrationEvent>;

export interface StopLockingEventObject {
  account: string;
}
export type StopLockingEvent = TypedEvent<[string], StopLockingEventObject>;

export type StopLockingEventFilter = TypedEventFilter<StopLockingEvent>;

export interface WithdrawEventObject {
  account: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Locking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LockingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    counter(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Delegates votes from the sender to `delegatee`.
     */
    delegate(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Delegates votes from signer to `delegatee`.
     */
    delegateBySig(
      delegatee: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the delegate that `account` has chosen.
     */
    delegates(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Сalculate and return (newAmount, newSlope), using formula: locking = (tokens * (      ST_FORMULA_CONST_MULTIPLIER      + ST_FORMULA_CLIFF_MULTIPLIER * (cliffPeriod - minCliffPeriod))/(MAX_CLIFF_PERIOD - minCliffPeriod)      + ST_FORMULA_SLOPE_MULTIPLIER * (slopePeriod - minSlopePeriod))/(MAX_SLOPE_PERIOD - minSlopePeriod)      )) / ST_FORMULA_DIVIDER*
     */
    getLock(
      amount: PromiseOrValue<BigNumberish>,
      slopePeriod: PromiseOrValue<BigNumberish>,
      cliff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lockAmount: BigNumber; lockSlope: BigNumber }
    >;

    /**
     * Returns the total supply of votes available  at the end of the last period
     */
    getPastTotalSupply(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the amount of votes that `account` had at the end of the last period
     */
    getPastVotes(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the current amount of votes that `account` has.
     */
    getVotes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrateTo(overrides?: CallOverrides): Promise<[string]>;

    minCliffPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    minSlopePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    relock(
      id: PromiseOrValue<BigNumberish>,
      newDelegate: PromiseOrValue<string>,
      newAmount: PromiseOrValue<BigNumberish>,
      newSlopePeriod: PromiseOrValue<BigNumberish>,
      newCliff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roundTimestamp(
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMinCliffPeriod(
      newMinCliffPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinSlopePeriod(
      newMinSlopePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStartingPointWeek(
      newStartingPointWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startingPointWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalSupplyLine(
      overrides?: CallOverrides
    ): Promise<
      [LibBrokenLine.LineStructOutput] & {
        initial: LibBrokenLine.LineStructOutput;
      }
    >;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAccountLines(
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAccountLinesBlockNumber(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTotalSupplyLine(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTotalSupplyLineBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __Locking_init(
      _token: PromiseOrValue<string>,
      _startingPointWeek: PromiseOrValue<BigNumberish>,
      _minCliffPeriod: PromiseOrValue<BigNumberish>,
      _minSlopePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startMigration(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lock(
      account: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      slopePeriod: PromiseOrValue<BigNumberish>,
      cliff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAvailableForWithdraw(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    locked(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountAndDelegate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _account: string; _delegate: string }>;

    getWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegateTo(
      id: PromiseOrValue<BigNumberish>,
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    migrate(
      id: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;
  };

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  counter(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Delegates votes from the sender to `delegatee`.
   */
  delegate(
    delegatee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Delegates votes from signer to `delegatee`.
   */
  delegateBySig(
    delegatee: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expiry: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the delegate that `account` has chosen.
   */
  delegates(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Сalculate and return (newAmount, newSlope), using formula: locking = (tokens * (      ST_FORMULA_CONST_MULTIPLIER      + ST_FORMULA_CLIFF_MULTIPLIER * (cliffPeriod - minCliffPeriod))/(MAX_CLIFF_PERIOD - minCliffPeriod)      + ST_FORMULA_SLOPE_MULTIPLIER * (slopePeriod - minSlopePeriod))/(MAX_SLOPE_PERIOD - minSlopePeriod)      )) / ST_FORMULA_DIVIDER*
   */
  getLock(
    amount: PromiseOrValue<BigNumberish>,
    slopePeriod: PromiseOrValue<BigNumberish>,
    cliff: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { lockAmount: BigNumber; lockSlope: BigNumber }
  >;

  /**
   * Returns the total supply of votes available  at the end of the last period
   */
  getPastTotalSupply(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the amount of votes that `account` had at the end of the last period
   */
  getPastVotes(
    account: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the current amount of votes that `account` has.
   */
  getVotes(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  migrateTo(overrides?: CallOverrides): Promise<string>;

  minCliffPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  minSlopePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  relock(
    id: PromiseOrValue<BigNumberish>,
    newDelegate: PromiseOrValue<string>,
    newAmount: PromiseOrValue<BigNumberish>,
    newSlopePeriod: PromiseOrValue<BigNumberish>,
    newCliff: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roundTimestamp(
    ts: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMinCliffPeriod(
    newMinCliffPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinSlopePeriod(
    newMinSlopePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStartingPointWeek(
    newStartingPointWeek: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startingPointWeek(overrides?: CallOverrides): Promise<BigNumber>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  totalSupplyLine(
    overrides?: CallOverrides
  ): Promise<LibBrokenLine.LineStructOutput>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAccountLines(
    account: PromiseOrValue<string>,
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAccountLinesBlockNumber(
    account: PromiseOrValue<string>,
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTotalSupplyLine(
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTotalSupplyLineBlockNumber(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __Locking_init(
    _token: PromiseOrValue<string>,
    _startingPointWeek: PromiseOrValue<BigNumberish>,
    _minCliffPeriod: PromiseOrValue<BigNumberish>,
    _minSlopePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stop(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  start(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startMigration(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lock(
    account: PromiseOrValue<string>,
    _delegate: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    slopePeriod: PromiseOrValue<BigNumberish>,
    cliff: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAvailableForWithdraw(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  locked(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAccountAndDelegate(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { _account: string; _delegate: string }>;

  getWeek(overrides?: CallOverrides): Promise<BigNumber>;

  delegateTo(
    id: PromiseOrValue<BigNumberish>,
    newDelegate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  migrate(
    id: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Delegates votes from the sender to `delegatee`.
     */
    delegate(
      delegatee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Delegates votes from signer to `delegatee`.
     */
    delegateBySig(
      delegatee: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the delegate that `account` has chosen.
     */
    delegates(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Сalculate and return (newAmount, newSlope), using formula: locking = (tokens * (      ST_FORMULA_CONST_MULTIPLIER      + ST_FORMULA_CLIFF_MULTIPLIER * (cliffPeriod - minCliffPeriod))/(MAX_CLIFF_PERIOD - minCliffPeriod)      + ST_FORMULA_SLOPE_MULTIPLIER * (slopePeriod - minSlopePeriod))/(MAX_SLOPE_PERIOD - minSlopePeriod)      )) / ST_FORMULA_DIVIDER*
     */
    getLock(
      amount: PromiseOrValue<BigNumberish>,
      slopePeriod: PromiseOrValue<BigNumberish>,
      cliff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lockAmount: BigNumber; lockSlope: BigNumber }
    >;

    /**
     * Returns the total supply of votes available  at the end of the last period
     */
    getPastTotalSupply(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the amount of votes that `account` had at the end of the last period
     */
    getPastVotes(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the current amount of votes that `account` has.
     */
    getVotes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateTo(overrides?: CallOverrides): Promise<string>;

    minCliffPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    minSlopePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    relock(
      id: PromiseOrValue<BigNumberish>,
      newDelegate: PromiseOrValue<string>,
      newAmount: PromiseOrValue<BigNumberish>,
      newSlopePeriod: PromiseOrValue<BigNumberish>,
      newCliff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    roundTimestamp(
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinCliffPeriod(
      newMinCliffPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinSlopePeriod(
      newMinSlopePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStartingPointWeek(
      newStartingPointWeek: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startingPointWeek(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    totalSupplyLine(
      overrides?: CallOverrides
    ): Promise<LibBrokenLine.LineStructOutput>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAccountLines(
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAccountLinesBlockNumber(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTotalSupplyLine(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTotalSupplyLineBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    __Locking_init(
      _token: PromiseOrValue<string>,
      _startingPointWeek: PromiseOrValue<BigNumberish>,
      _minCliffPeriod: PromiseOrValue<BigNumberish>,
      _minSlopePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stop(overrides?: CallOverrides): Promise<void>;

    start(overrides?: CallOverrides): Promise<void>;

    startMigration(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      account: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      slopePeriod: PromiseOrValue<BigNumberish>,
      cliff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    getAvailableForWithdraw(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountAndDelegate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _account: string; _delegate: string }>;

    getWeek(overrides?: CallOverrides): Promise<BigNumber>;

    delegateTo(
      id: PromiseOrValue<BigNumberish>,
      newDelegate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      id: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "Delegate(uint256,address,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      time?: null
    ): DelegateEventFilter;
    Delegate(
      id?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      time?: null
    ): DelegateEventFilter;

    "DelegateChanged(address,address,address)"(
      delegator?: PromiseOrValue<string> | null,
      fromDelegate?: PromiseOrValue<string> | null,
      toDelegate?: PromiseOrValue<string> | null
    ): DelegateChangedEventFilter;
    DelegateChanged(
      delegator?: PromiseOrValue<string> | null,
      fromDelegate?: PromiseOrValue<string> | null,
      toDelegate?: PromiseOrValue<string> | null
    ): DelegateChangedEventFilter;

    "DelegateVotesChanged(address,uint256,uint256)"(
      delegate?: PromiseOrValue<string> | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedEventFilter;
    DelegateVotesChanged(
      delegate?: PromiseOrValue<string> | null,
      previousBalance?: null,
      newBalance?: null
    ): DelegateVotesChangedEventFilter;

    "LockCreate(uint256,address,address,uint256,uint256,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      time?: null,
      amount?: null,
      slopePeriod?: null,
      cliff?: null
    ): LockCreateEventFilter;
    LockCreate(
      id?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      time?: null,
      amount?: null,
      slopePeriod?: null,
      cliff?: null
    ): LockCreateEventFilter;

    "Migrate(address,uint256[])"(
      account?: PromiseOrValue<string> | null,
      id?: null
    ): MigrateEventFilter;
    Migrate(
      account?: PromiseOrValue<string> | null,
      id?: null
    ): MigrateEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Relock(uint256,address,address,uint256,uint256,uint256,uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      counter?: null,
      time?: null,
      amount?: null,
      slopePeriod?: null,
      cliff?: null
    ): RelockEventFilter;
    Relock(
      id?: PromiseOrValue<BigNumberish> | null,
      account?: PromiseOrValue<string> | null,
      delegate?: PromiseOrValue<string> | null,
      counter?: null,
      time?: null,
      amount?: null,
      slopePeriod?: null,
      cliff?: null
    ): RelockEventFilter;

    "SetMinCliffPeriod(uint256)"(
      newMinCliffPeriod?: PromiseOrValue<BigNumberish> | null
    ): SetMinCliffPeriodEventFilter;
    SetMinCliffPeriod(
      newMinCliffPeriod?: PromiseOrValue<BigNumberish> | null
    ): SetMinCliffPeriodEventFilter;

    "SetMinSlopePeriod(uint256)"(
      newMinSlopePeriod?: PromiseOrValue<BigNumberish> | null
    ): SetMinSlopePeriodEventFilter;
    SetMinSlopePeriod(
      newMinSlopePeriod?: PromiseOrValue<BigNumberish> | null
    ): SetMinSlopePeriodEventFilter;

    "SetStartingPointWeek(uint256)"(
      newStartingPointWeek?: PromiseOrValue<BigNumberish> | null
    ): SetStartingPointWeekEventFilter;
    SetStartingPointWeek(
      newStartingPointWeek?: PromiseOrValue<BigNumberish> | null
    ): SetStartingPointWeekEventFilter;

    "StartLocking(address)"(
      account?: PromiseOrValue<string> | null
    ): StartLockingEventFilter;
    StartLocking(
      account?: PromiseOrValue<string> | null
    ): StartLockingEventFilter;

    "StartMigration(address,address)"(
      account?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): StartMigrationEventFilter;
    StartMigration(
      account?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): StartMigrationEventFilter;

    "StopLocking(address)"(
      account?: PromiseOrValue<string> | null
    ): StopLockingEventFilter;
    StopLocking(
      account?: PromiseOrValue<string> | null
    ): StopLockingEventFilter;

    "Withdraw(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    counter(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Delegates votes from the sender to `delegatee`.
     */
    delegate(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Delegates votes from signer to `delegatee`.
     */
    delegateBySig(
      delegatee: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the delegate that `account` has chosen.
     */
    delegates(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Сalculate and return (newAmount, newSlope), using formula: locking = (tokens * (      ST_FORMULA_CONST_MULTIPLIER      + ST_FORMULA_CLIFF_MULTIPLIER * (cliffPeriod - minCliffPeriod))/(MAX_CLIFF_PERIOD - minCliffPeriod)      + ST_FORMULA_SLOPE_MULTIPLIER * (slopePeriod - minSlopePeriod))/(MAX_SLOPE_PERIOD - minSlopePeriod)      )) / ST_FORMULA_DIVIDER*
     */
    getLock(
      amount: PromiseOrValue<BigNumberish>,
      slopePeriod: PromiseOrValue<BigNumberish>,
      cliff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the total supply of votes available  at the end of the last period
     */
    getPastTotalSupply(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the amount of votes that `account` had at the end of the last period
     */
    getPastVotes(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the current amount of votes that `account` has.
     */
    getVotes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateTo(overrides?: CallOverrides): Promise<BigNumber>;

    minCliffPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    minSlopePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    relock(
      id: PromiseOrValue<BigNumberish>,
      newDelegate: PromiseOrValue<string>,
      newAmount: PromiseOrValue<BigNumberish>,
      newSlopePeriod: PromiseOrValue<BigNumberish>,
      newCliff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roundTimestamp(
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinCliffPeriod(
      newMinCliffPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinSlopePeriod(
      newMinSlopePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStartingPointWeek(
      newStartingPointWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startingPointWeek(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyLine(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAccountLines(
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAccountLinesBlockNumber(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTotalSupplyLine(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTotalSupplyLineBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __Locking_init(
      _token: PromiseOrValue<string>,
      _startingPointWeek: PromiseOrValue<BigNumberish>,
      _minCliffPeriod: PromiseOrValue<BigNumberish>,
      _minSlopePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startMigration(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lock(
      account: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      slopePeriod: PromiseOrValue<BigNumberish>,
      cliff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAvailableForWithdraw(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    locked(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountAndDelegate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWeek(overrides?: CallOverrides): Promise<BigNumber>;

    delegateTo(
      id: PromiseOrValue<BigNumberish>,
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrate(
      id: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    counter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Delegates votes from the sender to `delegatee`.
     */
    delegate(
      delegatee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Delegates votes from signer to `delegatee`.
     */
    delegateBySig(
      delegatee: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expiry: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the delegate that `account` has chosen.
     */
    delegates(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Сalculate and return (newAmount, newSlope), using formula: locking = (tokens * (      ST_FORMULA_CONST_MULTIPLIER      + ST_FORMULA_CLIFF_MULTIPLIER * (cliffPeriod - minCliffPeriod))/(MAX_CLIFF_PERIOD - minCliffPeriod)      + ST_FORMULA_SLOPE_MULTIPLIER * (slopePeriod - minSlopePeriod))/(MAX_SLOPE_PERIOD - minSlopePeriod)      )) / ST_FORMULA_DIVIDER*
     */
    getLock(
      amount: PromiseOrValue<BigNumberish>,
      slopePeriod: PromiseOrValue<BigNumberish>,
      cliff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the total supply of votes available  at the end of the last period
     */
    getPastTotalSupply(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the amount of votes that `account` had at the end of the last period
     */
    getPastVotes(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the current amount of votes that `account` has.
     */
    getVotes(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minCliffPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minSlopePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relock(
      id: PromiseOrValue<BigNumberish>,
      newDelegate: PromiseOrValue<string>,
      newAmount: PromiseOrValue<BigNumberish>,
      newSlopePeriod: PromiseOrValue<BigNumberish>,
      newCliff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roundTimestamp(
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMinCliffPeriod(
      newMinCliffPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinSlopePeriod(
      newMinSlopePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStartingPointWeek(
      newStartingPointWeek: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startingPointWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyLine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAccountLines(
      account: PromiseOrValue<string>,
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAccountLinesBlockNumber(
      account: PromiseOrValue<string>,
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTotalSupplyLine(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTotalSupplyLineBlockNumber(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __Locking_init(
      _token: PromiseOrValue<string>,
      _startingPointWeek: PromiseOrValue<BigNumberish>,
      _minCliffPeriod: PromiseOrValue<BigNumberish>,
      _minSlopePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    start(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startMigration(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      account: PromiseOrValue<string>,
      _delegate: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      slopePeriod: PromiseOrValue<BigNumberish>,
      cliff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAvailableForWithdraw(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    locked(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountAndDelegate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateTo(
      id: PromiseOrValue<BigNumberish>,
      newDelegate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      id: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
