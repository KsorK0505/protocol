/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ExchangeDomainV1 {
  export type AssetStruct = {
    token: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    assetType: PromiseOrValue<BigNumberish>;
  };

  export type AssetStructOutput = [string, BigNumber, number] & {
    token: string;
    tokenId: BigNumber;
    assetType: number;
  };

  export type OrderKeyStruct = {
    owner: PromiseOrValue<string>;
    salt: PromiseOrValue<BigNumberish>;
    sellAsset: ExchangeDomainV1.AssetStruct;
    buyAsset: ExchangeDomainV1.AssetStruct;
  };

  export type OrderKeyStructOutput = [
    string,
    BigNumber,
    ExchangeDomainV1.AssetStructOutput,
    ExchangeDomainV1.AssetStructOutput
  ] & {
    owner: string;
    salt: BigNumber;
    sellAsset: ExchangeDomainV1.AssetStructOutput;
    buyAsset: ExchangeDomainV1.AssetStructOutput;
  };

  export type OrderStruct = {
    key: ExchangeDomainV1.OrderKeyStruct;
    selling: PromiseOrValue<BigNumberish>;
    buying: PromiseOrValue<BigNumberish>;
    sellerFee: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    ExchangeDomainV1.OrderKeyStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    key: ExchangeDomainV1.OrderKeyStructOutput;
    selling: BigNumber;
    buying: BigNumber;
    sellerFee: BigNumber;
  };
}

export interface ExchangeOrdersHolderV1Interface extends utils.Interface {
  functions: {
    "add(((address,uint256,(address,uint256,uint8),(address,uint256,uint8)),uint256,uint256,uint256))": FunctionFragment;
    "exists(((address,uint256,(address,uint256,uint8),(address,uint256,uint8)),uint256,uint256,uint256))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "add" | "exists"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [ExchangeDomainV1.OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [ExchangeDomainV1.OrderStruct]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;

  events: {};
}

export interface ExchangeOrdersHolderV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeOrdersHolderV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      order: ExchangeDomainV1.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exists(
      order: ExchangeDomainV1.OrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  add(
    order: ExchangeDomainV1.OrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exists(
    order: ExchangeDomainV1.OrderStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    add(
      order: ExchangeDomainV1.OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exists(
      order: ExchangeDomainV1.OrderStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    add(
      order: ExchangeDomainV1.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exists(
      order: ExchangeDomainV1.OrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      order: ExchangeDomainV1.OrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      order: ExchangeDomainV1.OrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
