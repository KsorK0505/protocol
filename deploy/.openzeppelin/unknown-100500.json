{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xE5C1D4AE50Bee5Eab5Be973c5eCe27d2E44181CC",
    "txHash": "0x76f4a4901b255dd331cbfba840e0ab6b648331fa4299bc42300be34a1aa51511"
  },
  "proxies": [
    {
      "address": "0x0b6F1b558b3808EA1B10e5ac29cA82c234C7ca4c",
      "txHash": "0x1e47e3939523084422a6eb1f224da0231fc9bffe478007695e04de265e7109fd",
      "kind": "transparent"
    },
    {
      "address": "0xE46B662AF1E03D648B209eD17d576413f5488613",
      "txHash": "0x890d02f9ff3c527be5b91ac11522fc52dabf40a2961249a7e1714588743f4d18",
      "kind": "transparent"
    },
    {
      "address": "0x11F13106845CF424ff5FeE7bAdCbCe6aA0b855c1",
      "txHash": "0x73a7cad8092cdfb8d5331fe2df490a9ffdc03d2ba45f68f1cebbd65c6a4b7665",
      "kind": "transparent"
    },
    {
      "address": "0x11ea46487553C1726Ddd60Eb9Cc80658d1BeA82D",
      "txHash": "0xa5c383349b24e1a6d34eec5713bf2bbd6fe002dd3af441af1125e23b1e702a5a",
      "kind": "transparent"
    },
    {
      "address": "0x0D7e65700D840Ae4FDd5aebd4aF046C517Bfa55F",
      "txHash": "0x87b482be81de2deb9d8b2ca1f34761310bf3b3ab6961038a91cb74ebedd4ff58",
      "kind": "transparent"
    },
    {
      "address": "0x4733791eED7d0Cfe49eD855EC21dFE5D32447938",
      "txHash": "0xdc5c0c7578e651330b371186b42782a8de44c33df1a8762a92b590ed13908735",
      "kind": "transparent"
    },
    {
      "address": "0xD6313c8A2D1cDad7EE522135776Ff02EC98b1606",
      "txHash": "0x557e1bd35c547f285050a56c984d8dd4639840fb2d29fcec65db1de5fb8566b9",
      "kind": "transparent"
    }
  ],
  "impls": {
    "740f4cf0b0860289e2bcafb1ee88e5020261f296747cabf8cbb0ab8297409b33": {
      "address": "0xFb7C1523d817BDB467bDb8c1BdC13c6f993c9e84",
      "txHash": "0x49c33ba10e36df56580ad7190cdd0ed73b61f1c74d5f60ce06351263e355d359",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesByTokenAndTokenId",
            "type": "t_mapping(t_bytes32,t_struct(RoyaltiesSet)8458_storage)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:29"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesByToken",
            "type": "t_mapping(t_address,t_struct(RoyaltiesSet)8458_storage)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:31"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "royaltiesProviders",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:33"
          },
          {
            "contract": "RoyaltiesRegistry",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/royalties-registry/contracts/RoyaltiesRegistry.sol:250"
          }
        ],
        "types": {
          "t_mapping(t_bytes32,t_struct(RoyaltiesSet)8458_storage)": {
            "label": "mapping(bytes32 => struct RoyaltiesRegistry.RoyaltiesSet)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoyaltiesSet)8458_storage": {
            "label": "struct RoyaltiesRegistry.RoyaltiesSet",
            "members": [
              {
                "label": "initialized",
                "type": "t_bool"
              },
              {
                "label": "royalties",
                "type": "t_array(t_struct(Part)9718_storage)dyn_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Part)9718_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)9718_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_address,t_struct(RoyaltiesSet)8458_storage)": {
            "label": "mapping(address => struct RoyaltiesRegistry.RoyaltiesSet)"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6b32f8589b3eb685910a619972301af7f45f80525e9458efd3e3ff11aa662a30": {
      "address": "0x1b569548ADef3065914c385c18e94d034F17c5f8",
      "txHash": "0xe28a6aa28270e79849cf0103548b6dbc066bd18e96208f8d1aeb3a621953cb0a",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_holderTokens",
            "type": "t_mapping(t_address,t_struct(UintSet)2620_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:35"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenOwners",
            "type": "t_struct(UintToAddressMap)1997_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:38"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:41"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:44"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:47"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:50"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:53"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:56"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:93"
          },
          {
            "contract": "ERC721Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)40_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Upgradeable.sol:495"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:8"
          },
          {
            "contract": "ERC721DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721DefaultApproval.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721BurnableUpgradeable.sol:40"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:23"
          },
          {
            "contract": "ERC721Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Lazy.sol:115"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Base.sol:38"
          },
          {
            "contract": "ERC721Rarible",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721/ERC721Rarible.sol:34"
          }
        ],
        "types": {
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)9718_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)9718_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(UintSet)2620_storage)": {
            "label": "mapping(address => struct EnumerableSetUpgradeable.UintSet)"
          },
          "t_struct(UintSet)2620_storage": {
            "label": "struct EnumerableSetUpgradeable.UintSet",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Set)2234_storage"
              }
            ]
          },
          "t_struct(Set)2234_storage": {
            "label": "struct EnumerableSetUpgradeable.Set",
            "members": [
              {
                "label": "_values",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_bytes32)dyn_storage": {
            "label": "bytes32[]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_struct(UintToAddressMap)1997_storage": {
            "label": "struct EnumerableMapUpgradeable.UintToAddressMap",
            "members": [
              {
                "label": "_inner",
                "type": "t_struct(Map)1679_storage"
              }
            ]
          },
          "t_struct(Map)1679_storage": {
            "label": "struct EnumerableMapUpgradeable.Map",
            "members": [
              {
                "label": "_entries",
                "type": "t_array(t_struct(MapEntry)1671_storage)dyn_storage"
              },
              {
                "label": "_indexes",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ]
          },
          "t_array(t_struct(MapEntry)1671_storage)dyn_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry[]"
          },
          "t_struct(MapEntry)1671_storage": {
            "label": "struct EnumerableMapUpgradeable.MapEntry",
            "members": [
              {
                "label": "_key",
                "type": "t_bytes32"
              },
              {
                "label": "_value",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)40_storage": {
            "label": "uint256[40]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "5deaba73e3174747c367c8001c2ddbf1e85b73560a4af984d4788e7964857069": {
      "address": "0xf33F626ca16cE18eF0052ECa6Ed6fC97Cedf031D",
      "txHash": "0xdb31c05448f6ee2bb1810c0ccbb5981d57774a163f7c723e154665796d2e443c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:27"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:30"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "_uri",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:33"
          },
          {
            "contract": "ERC1155Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)47_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Upgradeable.sol:421"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:8"
          },
          {
            "contract": "ERC1155DefaultApproval",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155DefaultApproval.sol:20"
          },
          {
            "contract": "ERC1155BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BurnableUpgradeable.sol:41"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:14"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:17"
          },
          {
            "contract": "ERC1155BaseURI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155BaseURI.sol:69"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "Mint1155Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/Mint1155Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:20"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "supply",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:21"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "minted",
            "type": "t_mapping(t_uint256,t_uint256)",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:22"
          },
          {
            "contract": "ERC1155Lazy",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Lazy.sol:149"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC1155Base",
            "label": "name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:13"
          },
          {
            "contract": "ERC1155Base",
            "label": "symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:14"
          },
          {
            "contract": "ERC1155Base",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1155/ERC1155Base.sol:89"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:43"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)9718_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)9718_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    },
    "0f38a87a9cd6ed147b12d9b695a54c0cba915064ca6d21fe8a00d28a699540c8": {
      "address": "0xC5696e98bE223E58D992Fd17225b37DF0FEFbEDf",
      "txHash": "0xd09b8ac7bc8fda3470a57fb9e330cc97929d9b7249bd207d828a0fc35b32b4aa",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "AssetMatcher",
            "label": "matchers",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:13"
          },
          {
            "contract": "AssetMatcher",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/AssetMatcher.sol:77"
          },
          {
            "contract": "TransferExecutor",
            "label": "proxies",
            "type": "t_mapping(t_bytes4,t_address)",
            "src": "../@rarible/exchange-v2/contracts/TransferExecutor.sol:17"
          },
          {
            "contract": "TransferExecutor",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/TransferExecutor.sol:57"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "OrderValidator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/exchange-v2/contracts/OrderValidator.sol:50"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "fills",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:21"
          },
          {
            "contract": "ExchangeV2Core",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/exchange-v2/contracts/ExchangeV2Core.sol:130"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "protocolFee",
            "type": "t_uint256",
            "src": "../@rarible/exchange-v2/contracts/RaribleTransferManager.sol:22"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "royaltiesRegistry",
            "type": "t_contract(IRoyaltiesProvider)9706",
            "src": "../@rarible/exchange-v2/contracts/RaribleTransferManager.sol:23"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "defaultFeeReceiver",
            "type": "t_address",
            "src": "../@rarible/exchange-v2/contracts/RaribleTransferManager.sol:25"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "feeReceivers",
            "type": "t_mapping(t_address,t_address)",
            "src": "../@rarible/exchange-v2/contracts/RaribleTransferManager.sol:26"
          },
          {
            "contract": "RaribleTransferManager",
            "label": "__gap",
            "type": "t_array(t_uint256)46_storage",
            "src": "../@rarible/exchange-v2/contracts/RaribleTransferManager.sol:226"
          }
        ],
        "types": {
          "t_uint256": {
            "label": "uint256"
          },
          "t_contract(IRoyaltiesProvider)9706": {
            "label": "contract IRoyaltiesProvider"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_bytes4,t_address)": {
            "label": "mapping(bytes4 => address)"
          },
          "t_bytes4": {
            "label": "bytes4"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "4c45d2a4ccf12529dc6d49090a280d11bda91402e2541192f5d42944318256e8": {
      "address": "0x319c4Bd373d3F16697d630153F5a2d526047FD8C",
      "txHash": "0x119865a7ceb1ec9867cd307925df642aef502a2fb477b861805c5027ea71f666",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "../@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "_supportedInterfaces",
            "type": "t_mapping(t_bytes4,t_bool)",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:23"
          },
          {
            "contract": "ERC165Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol:59"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_NAME",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "_HASHED_VERSION",
            "type": "t_bytes32",
            "src": "../project:/contracts/CryptoPunksMarket.sol:47"
          },
          {
            "contract": "EIP712Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../project:/contracts/CryptoPunksMarket.sol:132"
          },
          {
            "contract": "ERC1271Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-1271/ERC1271Validator.sol:34"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_name",
            "type": "t_string_storage",
            "src": "../@rarible/tokens-minimal/contracts/erc-721/ERC721UpgradeableMinimal.sol:23"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "../@rarible/tokens-minimal/contracts/erc-721/ERC721UpgradeableMinimal.sol:26"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_owners",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens-minimal/contracts/erc-721/ERC721UpgradeableMinimal.sol:29"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "../@rarible/tokens-minimal/contracts/erc-721/ERC721UpgradeableMinimal.sol:32"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_tokenApprovals",
            "type": "t_mapping(t_uint256,t_address)",
            "src": "../@rarible/tokens-minimal/contracts/erc-721/ERC721UpgradeableMinimal.sol:35"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_operatorApprovals",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "src": "../@rarible/tokens-minimal/contracts/erc-721/ERC721UpgradeableMinimal.sol:38"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "_burnedTokens",
            "type": "t_mapping(t_uint256,t_bool)",
            "src": "../@rarible/tokens-minimal/contracts/erc-721/ERC721UpgradeableMinimal.sol:66"
          },
          {
            "contract": "ERC721UpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)43_storage",
            "src": "../@rarible/tokens-minimal/contracts/erc-721/ERC721UpgradeableMinimal.sol:443"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "defaultApprovals",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:8"
          },
          {
            "contract": "ERC721DefaultApprovalMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721DefaultApprovalMinimal.sol:24"
          },
          {
            "contract": "ERC721BurnableUpgradeableMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BurnableUpgradeableMinimal.sol:41"
          },
          {
            "contract": "Mint721Validator",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/Mint721Validator.sol:16"
          },
          {
            "contract": "AbstractRoyalties",
            "label": "royalties",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)",
            "src": "../@rarible/royalties/contracts/impl/AbstractRoyalties.sol:8"
          },
          {
            "contract": "ERC721URI",
            "label": "_tokenURIs",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:19"
          },
          {
            "contract": "ERC721URI",
            "label": "_baseURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:22"
          },
          {
            "contract": "ERC721URI",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721URI.sol:92"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "creators",
            "type": "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:23"
          },
          {
            "contract": "ERC721LazyMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721LazyMinimal.sol:113"
          },
          {
            "contract": "HasContractURI",
            "label": "contractURI",
            "type": "t_string_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:9"
          },
          {
            "contract": "HasContractURI",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/HasContractURI.sol:29"
          },
          {
            "contract": "ERC721BaseMinimal",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/erc-721-minimal/ERC721BaseMinimal.sol:45"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "isPrivate",
            "type": "t_bool",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:7"
          },
          {
            "contract": "IsPrivateCollection",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "../@rarible/tokens/contracts/IsPrivateCollection.sol:9"
          },
          {
            "contract": "MinterAccessControl",
            "label": "_minters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:8"
          },
          {
            "contract": "MinterAccessControl",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "../@rarible/tokens/contracts/access/MinterAccessControl.sol:43"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_uint256,t_array(t_struct(Part)9718_storage)dyn_storage)": {
            "label": "mapping(uint256 => struct LibPart.Part[])"
          },
          "t_array(t_struct(Part)9718_storage)dyn_storage": {
            "label": "struct LibPart.Part[]"
          },
          "t_struct(Part)9718_storage": {
            "label": "struct LibPart.Part",
            "members": [
              {
                "label": "account",
                "type": "t_address_payable"
              },
              {
                "label": "value",
                "type": "t_uint96"
              }
            ]
          },
          "t_address_payable": {
            "label": "address payable"
          },
          "t_uint96": {
            "label": "uint96"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)"
          },
          "t_array(t_uint256)43_storage": {
            "label": "uint256[43]"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_bytes4,t_bool)": {
            "label": "mapping(bytes4 => bool)"
          },
          "t_bytes4": {
            "label": "bytes4"
          }
        }
      }
    }
  }
}
