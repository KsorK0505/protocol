{
  "contractName": "IMarketWrapper",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "auctionIdMatchesToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getMinimumBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentHighestBidder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "isFinalized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionIdMatchesToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getCurrentHighestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Anna Carroll\",\"kind\":\"dev\",\"methods\":{\"auctionIdMatchesToken(uint256,address,uint256)\":{\"details\":\"Called in PartyBid.sol in `initialize` at line 174\",\"returns\":{\"_0\":\"TRUE if the auction is valid\"}},\"bid(uint256,uint256)\":{\"details\":\"Called in PartyBid.sol in `bid` at line 259\"},\"finalize(uint256)\":{\"details\":\"Called in PartyBid.sol in `finalize` at line 289\"},\"getCurrentHighestBidder(uint256)\":{\"details\":\"Called in PartyBid.sol in `bid` at line 241\",\"returns\":{\"_0\":\"highest bidder\"}},\"getMinimumBid(uint256)\":{\"details\":\"Called in PartyBid.sol in `bid` at line 251\",\"returns\":{\"_0\":\"minimum bid amount\"}},\"isFinalized(uint256)\":{\"details\":\"Called in PartyBid.sol in `bid` at line 247and in `finalize` at line 288\",\"returns\":{\"_0\":\"TRUE if the auction has been finalized\"}}},\"title\":\"IMarketWrapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"auctionIdMatchesToken(uint256,address,uint256)\":{\"notice\":\"Given the auctionId, nftContract, and tokenId, check that: 1. the auction ID matches the token referred to by tokenId + nftContract 2. the auctionId refers to an *ACTIVE* auction (e.g. an auction that will accept bids) within this market contract 3. any additional validation to ensure that a PartyBid can bid on this auction (ex: if the market allows arbitrary bidding currencies, check that the auction currency is ETH) Note: This function probably should have been named \\\"isValidAuction\\\"\"},\"bid(uint256,uint256)\":{\"notice\":\"Submit bid to Market contract\"},\"finalize(uint256)\":{\"notice\":\"Finalize the results of the auction on the Market contract It is assumed  that this operation is performed once for each auction, that after it is done the auction is over and the NFT has been transferred to the auction winner.\"},\"getCurrentHighestBidder(uint256)\":{\"notice\":\"Query the current highest bidder for this auction It is assumed that there is always 1 winning highest bidder for an auction This is used to ensure that PartyBid cannot outbid itself if it is already winning\"},\"getMinimumBid(uint256)\":{\"notice\":\"Calculate the minimum next bid for this auction. PartyBid contracts always submit the minimum possible bid that will be accepted by the Market contract. usually, this is either the reserve price (if there are no bids) or a certain percentage increase above the current highest bid\"},\"isFinalized(uint256)\":{\"notice\":\"Determine whether the auction has been finalized Used to check if it is still possible to bid And to determine whether the PartyBid should finalize the auction\"}},\"notice\":\"IMarketWrapper provides a common interface for interacting with NFT auction markets. Contracts can abstract their interactions with different NFT markets using IMarketWrapper. NFT markets can become compatible with any contract using IMarketWrapper by deploying a MarketWrapper contract that implements this interface using the logic of their Market. WARNING: MarketWrapper contracts should NEVER write to storage! When implementing a MarketWrapper, exercise caution; a poorly implemented MarketWrapper contract could permanently lose access to the NFT or user funds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/IMarketWrapper.sol\":\"IMarketWrapper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/IMarketWrapper.sol\":{\"keccak256\":\"0xac58803a2639711656b1159af11cd106a365ac78ddea0bec41f06872189a0368\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b23e6f82784f8270d7689408551c0435108ce71dc25dd681844c51feca7fb67\",\"dweb:/ipfs/QmPnTRPDoV8Ym28X5WKnckeDPpSARtNxDS589RSLV13A28\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\n/**\n * @title IMarketWrapper\n * @author Anna Carroll\n * @notice IMarketWrapper provides a common interface for\n * interacting with NFT auction markets.\n * Contracts can abstract their interactions with\n * different NFT markets using IMarketWrapper.\n * NFT markets can become compatible with any contract\n * using IMarketWrapper by deploying a MarketWrapper contract\n * that implements this interface using the logic of their Market.\n *\n * WARNING: MarketWrapper contracts should NEVER write to storage!\n * When implementing a MarketWrapper, exercise caution; a poorly implemented\n * MarketWrapper contract could permanently lose access to the NFT or user funds.\n */\ninterface IMarketWrapper {\n    /**\n     * @notice Given the auctionId, nftContract, and tokenId, check that:\n     * 1. the auction ID matches the token\n     * referred to by tokenId + nftContract\n     * 2. the auctionId refers to an *ACTIVE* auction\n     * (e.g. an auction that will accept bids)\n     * within this market contract\n     * 3. any additional validation to ensure that\n     * a PartyBid can bid on this auction\n     * (ex: if the market allows arbitrary bidding currencies,\n     * check that the auction currency is ETH)\n     * Note: This function probably should have been named \"isValidAuction\"\n     * @dev Called in PartyBid.sol in `initialize` at line 174\n     * @return TRUE if the auction is valid\n     */\n    function auctionIdMatchesToken(\n        uint256 auctionId,\n        address nftContract,\n        uint256 tokenId\n    ) external view returns (bool);\n\n    /**\n     * @notice Calculate the minimum next bid for this auction.\n     * PartyBid contracts always submit the minimum possible\n     * bid that will be accepted by the Market contract.\n     * usually, this is either the reserve price (if there are no bids)\n     * or a certain percentage increase above the current highest bid\n     * @dev Called in PartyBid.sol in `bid` at line 251\n     * @return minimum bid amount\n     */\n    function getMinimumBid(uint256 auctionId) external view returns (uint256);\n\n    /**\n     * @notice Query the current highest bidder for this auction\n     * It is assumed that there is always 1 winning highest bidder for an auction\n     * This is used to ensure that PartyBid cannot outbid itself if it is already winning\n     * @dev Called in PartyBid.sol in `bid` at line 241\n     * @return highest bidder\n     */\n    function getCurrentHighestBidder(uint256 auctionId)\n        external\n        view\n        returns (address);\n\n    /**\n     * @notice Submit bid to Market contract\n     * @dev Called in PartyBid.sol in `bid` at line 259\n     */\n    function bid(uint256 auctionId, uint256 bidAmount) external;\n\n    /**\n     * @notice Determine whether the auction has been finalized\n     * Used to check if it is still possible to bid\n     * And to determine whether the PartyBid should finalize the auction\n     * @dev Called in PartyBid.sol in `bid` at line 247\n     * @dev and in `finalize` at line 288\n     * @return TRUE if the auction has been finalized\n     */\n    function isFinalized(uint256 auctionId) external view returns (bool);\n\n    /**\n     * @notice Finalize the results of the auction\n     * on the Market contract\n     * It is assumed  that this operation is performed once for each auction,\n     * that after it is done the auction is over and the NFT has been\n     * transferred to the auction winner.\n     * @dev Called in PartyBid.sol in `finalize` at line 289\n     */\n    function finalize(uint256 auctionId) external;\n}",
  "sourcePath": "/Users/ds/Documents/rarible/protocol-contracts/auction/contracts/IMarketWrapper.sol",
  "ast": {
    "absolutePath": "project:/contracts/IMarketWrapper.sol",
    "exportedSymbols": {
      "IMarketWrapper": [
        7142
      ]
    },
    "id": 7143,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7090,
        "literals": [
          "solidity",
          "0.7",
          ".6"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:47"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 7091,
          "nodeType": "StructuredDocumentation",
          "src": "56:665:47",
          "text": " @title IMarketWrapper\n @author Anna Carroll\n @notice IMarketWrapper provides a common interface for\n interacting with NFT auction markets.\n Contracts can abstract their interactions with\n different NFT markets using IMarketWrapper.\n NFT markets can become compatible with any contract\n using IMarketWrapper by deploying a MarketWrapper contract\n that implements this interface using the logic of their Market.\n WARNING: MarketWrapper contracts should NEVER write to storage!\n When implementing a MarketWrapper, exercise caution; a poorly implemented\n MarketWrapper contract could permanently lose access to the NFT or user funds."
        },
        "fullyImplemented": false,
        "id": 7142,
        "linearizedBaseContracts": [
          7142
        ],
        "name": "IMarketWrapper",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 7092,
              "nodeType": "StructuredDocumentation",
              "src": "753:694:47",
              "text": " @notice Given the auctionId, nftContract, and tokenId, check that:\n 1. the auction ID matches the token\n referred to by tokenId + nftContract\n 2. the auctionId refers to an *ACTIVE* auction\n (e.g. an auction that will accept bids)\n within this market contract\n 3. any additional validation to ensure that\n a PartyBid can bid on this auction\n (ex: if the market allows arbitrary bidding currencies,\n check that the auction currency is ETH)\n Note: This function probably should have been named \"isValidAuction\"\n @dev Called in PartyBid.sol in `initialize` at line 174\n @return TRUE if the auction is valid"
            },
            "functionSelector": "97e2d380",
            "id": 7103,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "auctionIdMatchesToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7099,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7094,
                  "mutability": "mutable",
                  "name": "auctionId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7103,
                  "src": "1492:17:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7093,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1492:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7096,
                  "mutability": "mutable",
                  "name": "nftContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 7103,
                  "src": "1519:19:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7095,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1519:7:47",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7098,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7103,
                  "src": "1548:15:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7097,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1548:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1482:87:47"
            },
            "returnParameters": {
              "id": 7102,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7101,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7103,
                  "src": "1593:4:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7100,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1593:4:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1592:6:47"
            },
            "scope": 7142,
            "src": "1452:147:47",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7104,
              "nodeType": "StructuredDocumentation",
              "src": "1605:425:47",
              "text": " @notice Calculate the minimum next bid for this auction.\n PartyBid contracts always submit the minimum possible\n bid that will be accepted by the Market contract.\n usually, this is either the reserve price (if there are no bids)\n or a certain percentage increase above the current highest bid\n @dev Called in PartyBid.sol in `bid` at line 251\n @return minimum bid amount"
            },
            "functionSelector": "0600d4eb",
            "id": 7111,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getMinimumBid",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7107,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7106,
                  "mutability": "mutable",
                  "name": "auctionId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7111,
                  "src": "2058:17:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7105,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2058:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2057:19:47"
            },
            "returnParameters": {
              "id": 7110,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7109,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7111,
                  "src": "2100:7:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7108,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2100:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2099:9:47"
            },
            "scope": 7142,
            "src": "2035:74:47",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7112,
              "nodeType": "StructuredDocumentation",
              "src": "2115:334:47",
              "text": " @notice Query the current highest bidder for this auction\n It is assumed that there is always 1 winning highest bidder for an auction\n This is used to ensure that PartyBid cannot outbid itself if it is already winning\n @dev Called in PartyBid.sol in `bid` at line 241\n @return highest bidder"
            },
            "functionSelector": "456b09c1",
            "id": 7119,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getCurrentHighestBidder",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7115,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7114,
                  "mutability": "mutable",
                  "name": "auctionId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7119,
                  "src": "2487:17:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7113,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2487:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2486:19:47"
            },
            "returnParameters": {
              "id": 7118,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7117,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7119,
                  "src": "2553:7:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7116,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2553:7:47",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2552:9:47"
            },
            "scope": 7142,
            "src": "2454:108:47",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7120,
              "nodeType": "StructuredDocumentation",
              "src": "2568:112:47",
              "text": " @notice Submit bid to Market contract\n @dev Called in PartyBid.sol in `bid` at line 259"
            },
            "functionSelector": "598647f8",
            "id": 7127,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "bid",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7125,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7122,
                  "mutability": "mutable",
                  "name": "auctionId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7127,
                  "src": "2698:17:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7121,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2698:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7124,
                  "mutability": "mutable",
                  "name": "bidAmount",
                  "nodeType": "VariableDeclaration",
                  "scope": 7127,
                  "src": "2717:17:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7123,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2717:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2697:38:47"
            },
            "returnParameters": {
              "id": 7126,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2744:0:47"
            },
            "scope": 7142,
            "src": "2685:60:47",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7128,
              "nodeType": "StructuredDocumentation",
              "src": "2751:352:47",
              "text": " @notice Determine whether the auction has been finalized\n Used to check if it is still possible to bid\n And to determine whether the PartyBid should finalize the auction\n @dev Called in PartyBid.sol in `bid` at line 247\n @dev and in `finalize` at line 288\n @return TRUE if the auction has been finalized"
            },
            "functionSelector": "33727c4d",
            "id": 7135,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isFinalized",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7131,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7130,
                  "mutability": "mutable",
                  "name": "auctionId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7135,
                  "src": "3129:17:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7129,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3129:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3128:19:47"
            },
            "returnParameters": {
              "id": 7134,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7133,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 7135,
                  "src": "3171:4:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 7132,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3171:4:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3170:6:47"
            },
            "scope": 7142,
            "src": "3108:69:47",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 7136,
              "nodeType": "StructuredDocumentation",
              "src": "3183:343:47",
              "text": " @notice Finalize the results of the auction\n on the Market contract\n It is assumed  that this operation is performed once for each auction,\n that after it is done the auction is over and the NFT has been\n transferred to the auction winner.\n @dev Called in PartyBid.sol in `finalize` at line 289"
            },
            "functionSelector": "05261aea",
            "id": 7141,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "finalize",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 7139,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7138,
                  "mutability": "mutable",
                  "name": "auctionId",
                  "nodeType": "VariableDeclaration",
                  "scope": 7141,
                  "src": "3549:17:47",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7137,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3549:7:47",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3548:19:47"
            },
            "returnParameters": {
              "id": 7140,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3576:0:47"
            },
            "scope": 7142,
            "src": "3531:46:47",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 7143,
        "src": "722:2857:47"
      }
    ],
    "src": "32:3547:47"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/IMarketWrapper.sol",
      "exportedSymbols": {
        "IMarketWrapper": [
          7142
        ]
      },
      "license": "MIT"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "0.7",
            ".6"
          ]
        },
        "id": 7090,
        "name": "PragmaDirective",
        "src": "32:22:47"
      },
      {
        "attributes": {
          "abstract": false,
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "interface",
          "fullyImplemented": false,
          "linearizedBaseContracts": [
            7142
          ],
          "name": "IMarketWrapper",
          "scope": 7143
        },
        "children": [
          {
            "attributes": {
              "text": " @title IMarketWrapper\n @author Anna Carroll\n @notice IMarketWrapper provides a common interface for\n interacting with NFT auction markets.\n Contracts can abstract their interactions with\n different NFT markets using IMarketWrapper.\n NFT markets can become compatible with any contract\n using IMarketWrapper by deploying a MarketWrapper contract\n that implements this interface using the logic of their Market.\n WARNING: MarketWrapper contracts should NEVER write to storage!\n When implementing a MarketWrapper, exercise caution; a poorly implemented\n MarketWrapper contract could permanently lose access to the NFT or user funds."
            },
            "id": 7091,
            "name": "StructuredDocumentation",
            "src": "56:665:47"
          },
          {
            "attributes": {
              "functionSelector": "97e2d380",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "auctionIdMatchesToken",
              "scope": 7142,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": " @notice Given the auctionId, nftContract, and tokenId, check that:\n 1. the auction ID matches the token\n referred to by tokenId + nftContract\n 2. the auctionId refers to an *ACTIVE* auction\n (e.g. an auction that will accept bids)\n within this market contract\n 3. any additional validation to ensure that\n a PartyBid can bid on this auction\n (ex: if the market allows arbitrary bidding currencies,\n check that the auction currency is ETH)\n Note: This function probably should have been named \"isValidAuction\"\n @dev Called in PartyBid.sol in `initialize` at line 174\n @return TRUE if the auction is valid"
                },
                "id": 7092,
                "name": "StructuredDocumentation",
                "src": "753:694:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "auctionId",
                      "scope": 7103,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7093,
                        "name": "ElementaryTypeName",
                        "src": "1492:7:47"
                      }
                    ],
                    "id": 7094,
                    "name": "VariableDeclaration",
                    "src": "1492:17:47"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "nftContract",
                      "scope": 7103,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 7095,
                        "name": "ElementaryTypeName",
                        "src": "1519:7:47"
                      }
                    ],
                    "id": 7096,
                    "name": "VariableDeclaration",
                    "src": "1519:19:47"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "tokenId",
                      "scope": 7103,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7097,
                        "name": "ElementaryTypeName",
                        "src": "1548:7:47"
                      }
                    ],
                    "id": 7098,
                    "name": "VariableDeclaration",
                    "src": "1548:15:47"
                  }
                ],
                "id": 7099,
                "name": "ParameterList",
                "src": "1482:87:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "",
                      "scope": 7103,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 7100,
                        "name": "ElementaryTypeName",
                        "src": "1593:4:47"
                      }
                    ],
                    "id": 7101,
                    "name": "VariableDeclaration",
                    "src": "1593:4:47"
                  }
                ],
                "id": 7102,
                "name": "ParameterList",
                "src": "1592:6:47"
              }
            ],
            "id": 7103,
            "name": "FunctionDefinition",
            "src": "1452:147:47"
          },
          {
            "attributes": {
              "functionSelector": "0600d4eb",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "getMinimumBid",
              "scope": 7142,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": " @notice Calculate the minimum next bid for this auction.\n PartyBid contracts always submit the minimum possible\n bid that will be accepted by the Market contract.\n usually, this is either the reserve price (if there are no bids)\n or a certain percentage increase above the current highest bid\n @dev Called in PartyBid.sol in `bid` at line 251\n @return minimum bid amount"
                },
                "id": 7104,
                "name": "StructuredDocumentation",
                "src": "1605:425:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "auctionId",
                      "scope": 7111,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7105,
                        "name": "ElementaryTypeName",
                        "src": "2058:7:47"
                      }
                    ],
                    "id": 7106,
                    "name": "VariableDeclaration",
                    "src": "2058:17:47"
                  }
                ],
                "id": 7107,
                "name": "ParameterList",
                "src": "2057:19:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "",
                      "scope": 7111,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7108,
                        "name": "ElementaryTypeName",
                        "src": "2100:7:47"
                      }
                    ],
                    "id": 7109,
                    "name": "VariableDeclaration",
                    "src": "2100:7:47"
                  }
                ],
                "id": 7110,
                "name": "ParameterList",
                "src": "2099:9:47"
              }
            ],
            "id": 7111,
            "name": "FunctionDefinition",
            "src": "2035:74:47"
          },
          {
            "attributes": {
              "functionSelector": "456b09c1",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "getCurrentHighestBidder",
              "scope": 7142,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": " @notice Query the current highest bidder for this auction\n It is assumed that there is always 1 winning highest bidder for an auction\n This is used to ensure that PartyBid cannot outbid itself if it is already winning\n @dev Called in PartyBid.sol in `bid` at line 241\n @return highest bidder"
                },
                "id": 7112,
                "name": "StructuredDocumentation",
                "src": "2115:334:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "auctionId",
                      "scope": 7119,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7113,
                        "name": "ElementaryTypeName",
                        "src": "2487:7:47"
                      }
                    ],
                    "id": 7114,
                    "name": "VariableDeclaration",
                    "src": "2487:17:47"
                  }
                ],
                "id": 7115,
                "name": "ParameterList",
                "src": "2486:19:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "",
                      "scope": 7119,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "address",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "address",
                          "stateMutability": "nonpayable",
                          "type": "address"
                        },
                        "id": 7116,
                        "name": "ElementaryTypeName",
                        "src": "2553:7:47"
                      }
                    ],
                    "id": 7117,
                    "name": "VariableDeclaration",
                    "src": "2553:7:47"
                  }
                ],
                "id": 7118,
                "name": "ParameterList",
                "src": "2552:9:47"
              }
            ],
            "id": 7119,
            "name": "FunctionDefinition",
            "src": "2454:108:47"
          },
          {
            "attributes": {
              "functionSelector": "598647f8",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "bid",
              "scope": 7142,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": " @notice Submit bid to Market contract\n @dev Called in PartyBid.sol in `bid` at line 259"
                },
                "id": 7120,
                "name": "StructuredDocumentation",
                "src": "2568:112:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "auctionId",
                      "scope": 7127,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7121,
                        "name": "ElementaryTypeName",
                        "src": "2698:7:47"
                      }
                    ],
                    "id": 7122,
                    "name": "VariableDeclaration",
                    "src": "2698:17:47"
                  },
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "bidAmount",
                      "scope": 7127,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7123,
                        "name": "ElementaryTypeName",
                        "src": "2717:7:47"
                      }
                    ],
                    "id": 7124,
                    "name": "VariableDeclaration",
                    "src": "2717:17:47"
                  }
                ],
                "id": 7125,
                "name": "ParameterList",
                "src": "2697:38:47"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 7126,
                "name": "ParameterList",
                "src": "2744:0:47"
              }
            ],
            "id": 7127,
            "name": "FunctionDefinition",
            "src": "2685:60:47"
          },
          {
            "attributes": {
              "functionSelector": "33727c4d",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "isFinalized",
              "scope": 7142,
              "stateMutability": "view",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": " @notice Determine whether the auction has been finalized\n Used to check if it is still possible to bid\n And to determine whether the PartyBid should finalize the auction\n @dev Called in PartyBid.sol in `bid` at line 247\n @dev and in `finalize` at line 288\n @return TRUE if the auction has been finalized"
                },
                "id": 7128,
                "name": "StructuredDocumentation",
                "src": "2751:352:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "auctionId",
                      "scope": 7135,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7129,
                        "name": "ElementaryTypeName",
                        "src": "3129:7:47"
                      }
                    ],
                    "id": 7130,
                    "name": "VariableDeclaration",
                    "src": "3129:17:47"
                  }
                ],
                "id": 7131,
                "name": "ParameterList",
                "src": "3128:19:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "",
                      "scope": 7135,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "bool",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "bool",
                          "type": "bool"
                        },
                        "id": 7132,
                        "name": "ElementaryTypeName",
                        "src": "3171:4:47"
                      }
                    ],
                    "id": 7133,
                    "name": "VariableDeclaration",
                    "src": "3171:4:47"
                  }
                ],
                "id": 7134,
                "name": "ParameterList",
                "src": "3170:6:47"
              }
            ],
            "id": 7135,
            "name": "FunctionDefinition",
            "src": "3108:69:47"
          },
          {
            "attributes": {
              "functionSelector": "05261aea",
              "implemented": false,
              "isConstructor": false,
              "kind": "function",
              "modifiers": [
                null
              ],
              "name": "finalize",
              "scope": 7142,
              "stateMutability": "nonpayable",
              "virtual": false,
              "visibility": "external"
            },
            "children": [
              {
                "attributes": {
                  "text": " @notice Finalize the results of the auction\n on the Market contract\n It is assumed  that this operation is performed once for each auction,\n that after it is done the auction is over and the NFT has been\n transferred to the auction winner.\n @dev Called in PartyBid.sol in `finalize` at line 289"
                },
                "id": 7136,
                "name": "StructuredDocumentation",
                "src": "3183:343:47"
              },
              {
                "children": [
                  {
                    "attributes": {
                      "constant": false,
                      "mutability": "mutable",
                      "name": "auctionId",
                      "scope": 7141,
                      "stateVariable": false,
                      "storageLocation": "default",
                      "type": "uint256",
                      "visibility": "internal"
                    },
                    "children": [
                      {
                        "attributes": {
                          "name": "uint256",
                          "type": "uint256"
                        },
                        "id": 7137,
                        "name": "ElementaryTypeName",
                        "src": "3549:7:47"
                      }
                    ],
                    "id": 7138,
                    "name": "VariableDeclaration",
                    "src": "3549:17:47"
                  }
                ],
                "id": 7139,
                "name": "ParameterList",
                "src": "3548:19:47"
              },
              {
                "attributes": {
                  "parameters": [
                    null
                  ]
                },
                "children": [],
                "id": 7140,
                "name": "ParameterList",
                "src": "3576:0:47"
              }
            ],
            "id": 7141,
            "name": "FunctionDefinition",
            "src": "3531:46:47"
          }
        ],
        "id": 7142,
        "name": "ContractDefinition",
        "src": "722:2857:47"
      }
    ],
    "id": 7143,
    "name": "SourceUnit",
    "src": "32:3547:47"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-02-12T23:34:59.059Z",
  "devdoc": {
    "author": "Anna Carroll",
    "kind": "dev",
    "methods": {
      "auctionIdMatchesToken(uint256,address,uint256)": {
        "details": "Called in PartyBid.sol in `initialize` at line 174",
        "returns": {
          "_0": "TRUE if the auction is valid"
        }
      },
      "bid(uint256,uint256)": {
        "details": "Called in PartyBid.sol in `bid` at line 259"
      },
      "finalize(uint256)": {
        "details": "Called in PartyBid.sol in `finalize` at line 289"
      },
      "getCurrentHighestBidder(uint256)": {
        "details": "Called in PartyBid.sol in `bid` at line 241",
        "returns": {
          "_0": "highest bidder"
        }
      },
      "getMinimumBid(uint256)": {
        "details": "Called in PartyBid.sol in `bid` at line 251",
        "returns": {
          "_0": "minimum bid amount"
        }
      },
      "isFinalized(uint256)": {
        "details": "Called in PartyBid.sol in `bid` at line 247and in `finalize` at line 288",
        "returns": {
          "_0": "TRUE if the auction has been finalized"
        }
      }
    },
    "title": "IMarketWrapper",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "auctionIdMatchesToken(uint256,address,uint256)": {
        "notice": "Given the auctionId, nftContract, and tokenId, check that: 1. the auction ID matches the token referred to by tokenId + nftContract 2. the auctionId refers to an *ACTIVE* auction (e.g. an auction that will accept bids) within this market contract 3. any additional validation to ensure that a PartyBid can bid on this auction (ex: if the market allows arbitrary bidding currencies, check that the auction currency is ETH) Note: This function probably should have been named \"isValidAuction\""
      },
      "bid(uint256,uint256)": {
        "notice": "Submit bid to Market contract"
      },
      "finalize(uint256)": {
        "notice": "Finalize the results of the auction on the Market contract It is assumed  that this operation is performed once for each auction, that after it is done the auction is over and the NFT has been transferred to the auction winner."
      },
      "getCurrentHighestBidder(uint256)": {
        "notice": "Query the current highest bidder for this auction It is assumed that there is always 1 winning highest bidder for an auction This is used to ensure that PartyBid cannot outbid itself if it is already winning"
      },
      "getMinimumBid(uint256)": {
        "notice": "Calculate the minimum next bid for this auction. PartyBid contracts always submit the minimum possible bid that will be accepted by the Market contract. usually, this is either the reserve price (if there are no bids) or a certain percentage increase above the current highest bid"
      },
      "isFinalized(uint256)": {
        "notice": "Determine whether the auction has been finalized Used to check if it is still possible to bid And to determine whether the PartyBid should finalize the auction"
      }
    },
    "notice": "IMarketWrapper provides a common interface for interacting with NFT auction markets. Contracts can abstract their interactions with different NFT markets using IMarketWrapper. NFT markets can become compatible with any contract using IMarketWrapper by deploying a MarketWrapper contract that implements this interface using the logic of their Market. WARNING: MarketWrapper contracts should NEVER write to storage! When implementing a MarketWrapper, exercise caution; a poorly implemented MarketWrapper contract could permanently lose access to the NFT or user funds.",
    "version": 1
  }
}