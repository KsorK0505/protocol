/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LSSVMRouter {
  export type PairSwapAnyStruct = {
    pair: PromiseOrValue<string>;
    numItems: PromiseOrValue<BigNumberish>;
  };

  export type PairSwapAnyStructOutput = [string, BigNumber] & {
    pair: string;
    numItems: BigNumber;
  };

  export type PairSwapSpecificStruct = {
    pair: PromiseOrValue<string>;
    nftIds: PromiseOrValue<BigNumberish>[];
  };

  export type PairSwapSpecificStructOutput = [string, BigNumber[]] & {
    pair: string;
    nftIds: BigNumber[];
  };

  export type NFTsForAnyNFTsTradeStruct = {
    nftToTokenTrades: LSSVMRouter.PairSwapSpecificStruct[];
    tokenToNFTTrades: LSSVMRouter.PairSwapAnyStruct[];
  };

  export type NFTsForAnyNFTsTradeStructOutput = [
    LSSVMRouter.PairSwapSpecificStructOutput[],
    LSSVMRouter.PairSwapAnyStructOutput[]
  ] & {
    nftToTokenTrades: LSSVMRouter.PairSwapSpecificStructOutput[];
    tokenToNFTTrades: LSSVMRouter.PairSwapAnyStructOutput[];
  };

  export type NFTsForSpecificNFTsTradeStruct = {
    nftToTokenTrades: LSSVMRouter.PairSwapSpecificStruct[];
    tokenToNFTTrades: LSSVMRouter.PairSwapSpecificStruct[];
  };

  export type NFTsForSpecificNFTsTradeStructOutput = [
    LSSVMRouter.PairSwapSpecificStructOutput[],
    LSSVMRouter.PairSwapSpecificStructOutput[]
  ] & {
    nftToTokenTrades: LSSVMRouter.PairSwapSpecificStructOutput[];
    tokenToNFTTrades: LSSVMRouter.PairSwapSpecificStructOutput[];
  };

  export type RobustPairSwapAnyStruct = {
    swapInfo: LSSVMRouter.PairSwapAnyStruct;
    maxCost: PromiseOrValue<BigNumberish>;
  };

  export type RobustPairSwapAnyStructOutput = [
    LSSVMRouter.PairSwapAnyStructOutput,
    BigNumber
  ] & { swapInfo: LSSVMRouter.PairSwapAnyStructOutput; maxCost: BigNumber };

  export type RobustPairSwapSpecificStruct = {
    swapInfo: LSSVMRouter.PairSwapSpecificStruct;
    maxCost: PromiseOrValue<BigNumberish>;
  };

  export type RobustPairSwapSpecificStructOutput = [
    LSSVMRouter.PairSwapSpecificStructOutput,
    BigNumber
  ] & {
    swapInfo: LSSVMRouter.PairSwapSpecificStructOutput;
    maxCost: BigNumber;
  };

  export type RobustPairSwapSpecificForTokenStruct = {
    swapInfo: LSSVMRouter.PairSwapSpecificStruct;
    minOutput: PromiseOrValue<BigNumberish>;
  };

  export type RobustPairSwapSpecificForTokenStructOutput = [
    LSSVMRouter.PairSwapSpecificStructOutput,
    BigNumber
  ] & {
    swapInfo: LSSVMRouter.PairSwapSpecificStructOutput;
    minOutput: BigNumber;
  };

  export type RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct = {
    tokenToNFTTrades: LSSVMRouter.RobustPairSwapSpecificStruct[];
    nftToTokenTrades: LSSVMRouter.RobustPairSwapSpecificForTokenStruct[];
    inputAmount: PromiseOrValue<BigNumberish>;
    tokenRecipient: PromiseOrValue<string>;
    nftRecipient: PromiseOrValue<string>;
  };

  export type RobustPairNFTsFoTokenAndTokenforNFTsTradeStructOutput = [
    LSSVMRouter.RobustPairSwapSpecificStructOutput[],
    LSSVMRouter.RobustPairSwapSpecificForTokenStructOutput[],
    BigNumber,
    string,
    string
  ] & {
    tokenToNFTTrades: LSSVMRouter.RobustPairSwapSpecificStructOutput[];
    nftToTokenTrades: LSSVMRouter.RobustPairSwapSpecificForTokenStructOutput[];
    inputAmount: BigNumber;
    tokenRecipient: string;
    nftRecipient: string;
  };
}

export interface LSSVMRouterInterface extends utils.Interface {
  functions: {
    "factory()": FunctionFragment;
    "swapETHForAnyNFTs((address,uint256)[],address,address,uint256)": FunctionFragment;
    "swapETHForSpecificNFTs((address,uint256[])[],address,address,uint256)": FunctionFragment;
    "swapNFTsForAnyNFTsThroughETH(((address,uint256[])[],(address,uint256)[]),uint256,address,address,uint256)": FunctionFragment;
    "swapNFTsForSpecificNFTsThroughETH(((address,uint256[])[],(address,uint256[])[]),uint256,address,address,uint256)": FunctionFragment;
    "swapERC20ForAnyNFTs((address,uint256)[],uint256,address,uint256)": FunctionFragment;
    "swapERC20ForSpecificNFTs((address,uint256[])[],uint256,address,uint256)": FunctionFragment;
    "swapNFTsForToken((address,uint256[])[],uint256,address,uint256)": FunctionFragment;
    "swapNFTsForAnyNFTsThroughERC20(((address,uint256[])[],(address,uint256)[]),uint256,uint256,address,uint256)": FunctionFragment;
    "swapNFTsForSpecificNFTsThroughERC20(((address,uint256[])[],(address,uint256[])[]),uint256,uint256,address,uint256)": FunctionFragment;
    "robustSwapETHForAnyNFTs(((address,uint256),uint256)[],address,address,uint256)": FunctionFragment;
    "robustSwapETHForSpecificNFTs(((address,uint256[]),uint256)[],address,address,uint256)": FunctionFragment;
    "robustSwapERC20ForAnyNFTs(((address,uint256),uint256)[],uint256,address,uint256)": FunctionFragment;
    "robustSwapERC20ForSpecificNFTs(((address,uint256[]),uint256)[],uint256,address,uint256)": FunctionFragment;
    "robustSwapNFTsForToken(((address,uint256[]),uint256)[],address,uint256)": FunctionFragment;
    "robustSwapETHForSpecificNFTsAndNFTsToToken((((address,uint256[]),uint256)[],((address,uint256[]),uint256)[],uint256,address,address))": FunctionFragment;
    "robustSwapERC20ForSpecificNFTsAndNFTsToToken((((address,uint256[]),uint256)[],((address,uint256[]),uint256)[],uint256,address,address))": FunctionFragment;
    "pairTransferERC20From(address,address,address,uint256,uint8)": FunctionFragment;
    "pairTransferNFTFrom(address,address,address,uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "factory"
      | "swapETHForAnyNFTs"
      | "swapETHForSpecificNFTs"
      | "swapNFTsForAnyNFTsThroughETH"
      | "swapNFTsForSpecificNFTsThroughETH"
      | "swapERC20ForAnyNFTs"
      | "swapERC20ForSpecificNFTs"
      | "swapNFTsForToken"
      | "swapNFTsForAnyNFTsThroughERC20"
      | "swapNFTsForSpecificNFTsThroughERC20"
      | "robustSwapETHForAnyNFTs"
      | "robustSwapETHForSpecificNFTs"
      | "robustSwapERC20ForAnyNFTs"
      | "robustSwapERC20ForSpecificNFTs"
      | "robustSwapNFTsForToken"
      | "robustSwapETHForSpecificNFTsAndNFTsToToken"
      | "robustSwapERC20ForSpecificNFTsAndNFTsToToken"
      | "pairTransferERC20From"
      | "pairTransferNFTFrom"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapETHForAnyNFTs",
    values: [
      LSSVMRouter.PairSwapAnyStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForSpecificNFTs",
    values: [
      LSSVMRouter.PairSwapSpecificStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForAnyNFTsThroughETH",
    values: [
      LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForSpecificNFTsThroughETH",
    values: [
      LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC20ForAnyNFTs",
    values: [
      LSSVMRouter.PairSwapAnyStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC20ForSpecificNFTs",
    values: [
      LSSVMRouter.PairSwapSpecificStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForToken",
    values: [
      LSSVMRouter.PairSwapSpecificStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForAnyNFTsThroughERC20",
    values: [
      LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNFTsForSpecificNFTsThroughERC20",
    values: [
      LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapETHForAnyNFTs",
    values: [
      LSSVMRouter.RobustPairSwapAnyStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapETHForSpecificNFTs",
    values: [
      LSSVMRouter.RobustPairSwapSpecificStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapERC20ForAnyNFTs",
    values: [
      LSSVMRouter.RobustPairSwapAnyStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapERC20ForSpecificNFTs",
    values: [
      LSSVMRouter.RobustPairSwapSpecificStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapNFTsForToken",
    values: [
      LSSVMRouter.RobustPairSwapSpecificForTokenStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapETHForSpecificNFTsAndNFTsToToken",
    values: [LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "robustSwapERC20ForSpecificNFTsAndNFTsToToken",
    values: [LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTransferERC20From",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTransferNFTFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForAnyNFTsThroughETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForSpecificNFTsThroughETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC20ForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC20ForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForAnyNFTsThroughERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNFTsForSpecificNFTsThroughERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapETHForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapETHForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapERC20ForAnyNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapERC20ForSpecificNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapNFTsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapETHForSpecificNFTsAndNFTsToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "robustSwapERC20ForSpecificNFTsAndNFTsToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTransferERC20From",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairTransferNFTFrom",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LSSVMRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LSSVMRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    factory(overrides?: CallOverrides): Promise<[string]>;

    swapETHForAnyNFTs(
      swapList: LSSVMRouter.PairSwapAnyStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapETHForSpecificNFTs(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForAnyNFTsThroughETH(
      trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      minOutput: PromiseOrValue<BigNumberish>,
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForSpecificNFTsThroughETH(
      trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      minOutput: PromiseOrValue<BigNumberish>,
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapERC20ForAnyNFTs(
      swapList: LSSVMRouter.PairSwapAnyStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapERC20ForSpecificNFTs(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForToken(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      minOutput: PromiseOrValue<BigNumberish>,
      tokenRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForAnyNFTsThroughERC20(
      trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNFTsForSpecificNFTsThroughERC20(
      trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    robustSwapETHForAnyNFTs(
      swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    robustSwapETHForSpecificNFTs(
      swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    robustSwapERC20ForAnyNFTs(
      swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    robustSwapERC20ForSpecificNFTs(
      swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    robustSwapNFTsForToken(
      swapList: LSSVMRouter.RobustPairSwapSpecificForTokenStruct[],
      tokenRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    robustSwapETHForSpecificNFTsAndNFTsToToken(
      params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    robustSwapERC20ForSpecificNFTsAndNFTsToToken(
      params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows an ERC20 pair contract to transfer ERC20 tokens directly from the sender, in order to minimize the number of token transfers. Only callable by an ERC20 pair.
     * @param amount The amount of tokens to transfer
     * @param from The address to transfer tokens from
     * @param to The address to transfer tokens to
     * @param token The ERC20 token to transfer
     * @param variant The pair variant of the pair contract
     */
    pairTransferERC20From(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      variant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows a pair contract to transfer ERC721 NFTs directly from the sender, in order to minimize the number of token transfers. Only callable by a pair.
     * @param from The address to transfer tokens from
     * @param id The ID of the NFT to transfer
     * @param nft The ERC721 NFT to transfer
     * @param to The address to transfer tokens to
     * @param variant The pair variant of the pair contract
     */
    pairTransferNFTFrom(
      nft: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      variant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  factory(overrides?: CallOverrides): Promise<string>;

  swapETHForAnyNFTs(
    swapList: LSSVMRouter.PairSwapAnyStruct[],
    ethRecipient: PromiseOrValue<string>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapETHForSpecificNFTs(
    swapList: LSSVMRouter.PairSwapSpecificStruct[],
    ethRecipient: PromiseOrValue<string>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForAnyNFTsThroughETH(
    trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
    minOutput: PromiseOrValue<BigNumberish>,
    ethRecipient: PromiseOrValue<string>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForSpecificNFTsThroughETH(
    trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
    minOutput: PromiseOrValue<BigNumberish>,
    ethRecipient: PromiseOrValue<string>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapERC20ForAnyNFTs(
    swapList: LSSVMRouter.PairSwapAnyStruct[],
    inputAmount: PromiseOrValue<BigNumberish>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapERC20ForSpecificNFTs(
    swapList: LSSVMRouter.PairSwapSpecificStruct[],
    inputAmount: PromiseOrValue<BigNumberish>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForToken(
    swapList: LSSVMRouter.PairSwapSpecificStruct[],
    minOutput: PromiseOrValue<BigNumberish>,
    tokenRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForAnyNFTsThroughERC20(
    trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
    inputAmount: PromiseOrValue<BigNumberish>,
    minOutput: PromiseOrValue<BigNumberish>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNFTsForSpecificNFTsThroughERC20(
    trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
    inputAmount: PromiseOrValue<BigNumberish>,
    minOutput: PromiseOrValue<BigNumberish>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  robustSwapETHForAnyNFTs(
    swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
    ethRecipient: PromiseOrValue<string>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  robustSwapETHForSpecificNFTs(
    swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
    ethRecipient: PromiseOrValue<string>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  robustSwapERC20ForAnyNFTs(
    swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
    inputAmount: PromiseOrValue<BigNumberish>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  robustSwapERC20ForSpecificNFTs(
    swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
    inputAmount: PromiseOrValue<BigNumberish>,
    nftRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  robustSwapNFTsForToken(
    swapList: LSSVMRouter.RobustPairSwapSpecificForTokenStruct[],
    tokenRecipient: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  robustSwapETHForSpecificNFTsAndNFTsToToken(
    params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  robustSwapERC20ForSpecificNFTsAndNFTsToToken(
    params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows an ERC20 pair contract to transfer ERC20 tokens directly from the sender, in order to minimize the number of token transfers. Only callable by an ERC20 pair.
   * @param amount The amount of tokens to transfer
   * @param from The address to transfer tokens from
   * @param to The address to transfer tokens to
   * @param token The ERC20 token to transfer
   * @param variant The pair variant of the pair contract
   */
  pairTransferERC20From(
    token: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    variant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows a pair contract to transfer ERC721 NFTs directly from the sender, in order to minimize the number of token transfers. Only callable by a pair.
   * @param from The address to transfer tokens from
   * @param id The ID of the NFT to transfer
   * @param nft The ERC721 NFT to transfer
   * @param to The address to transfer tokens to
   * @param variant The pair variant of the pair contract
   */
  pairTransferNFTFrom(
    nft: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    variant: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    factory(overrides?: CallOverrides): Promise<string>;

    swapETHForAnyNFTs(
      swapList: LSSVMRouter.PairSwapAnyStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapETHForSpecificNFTs(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForAnyNFTsThroughETH(
      trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      minOutput: PromiseOrValue<BigNumberish>,
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForSpecificNFTsThroughETH(
      trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      minOutput: PromiseOrValue<BigNumberish>,
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapERC20ForAnyNFTs(
      swapList: LSSVMRouter.PairSwapAnyStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapERC20ForSpecificNFTs(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForToken(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      minOutput: PromiseOrValue<BigNumberish>,
      tokenRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForAnyNFTsThroughERC20(
      trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapNFTsForSpecificNFTsThroughERC20(
      trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapETHForAnyNFTs(
      swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapETHForSpecificNFTs(
      swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapERC20ForAnyNFTs(
      swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapERC20ForSpecificNFTs(
      swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapNFTsForToken(
      swapList: LSSVMRouter.RobustPairSwapSpecificForTokenStruct[],
      tokenRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    robustSwapETHForSpecificNFTsAndNFTsToToken(
      params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        remainingValue: BigNumber;
        outputAmount: BigNumber;
      }
    >;

    robustSwapERC20ForSpecificNFTsAndNFTsToToken(
      params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        remainingValue: BigNumber;
        outputAmount: BigNumber;
      }
    >;

    /**
     * Allows an ERC20 pair contract to transfer ERC20 tokens directly from the sender, in order to minimize the number of token transfers. Only callable by an ERC20 pair.
     * @param amount The amount of tokens to transfer
     * @param from The address to transfer tokens from
     * @param to The address to transfer tokens to
     * @param token The ERC20 token to transfer
     * @param variant The pair variant of the pair contract
     */
    pairTransferERC20From(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      variant: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows a pair contract to transfer ERC721 NFTs directly from the sender, in order to minimize the number of token transfers. Only callable by a pair.
     * @param from The address to transfer tokens from
     * @param id The ID of the NFT to transfer
     * @param nft The ERC721 NFT to transfer
     * @param to The address to transfer tokens to
     * @param variant The pair variant of the pair contract
     */
    pairTransferNFTFrom(
      nft: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      variant: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    swapETHForAnyNFTs(
      swapList: LSSVMRouter.PairSwapAnyStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapETHForSpecificNFTs(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNFTsForAnyNFTsThroughETH(
      trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      minOutput: PromiseOrValue<BigNumberish>,
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNFTsForSpecificNFTsThroughETH(
      trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      minOutput: PromiseOrValue<BigNumberish>,
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapERC20ForAnyNFTs(
      swapList: LSSVMRouter.PairSwapAnyStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapERC20ForSpecificNFTs(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNFTsForToken(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      minOutput: PromiseOrValue<BigNumberish>,
      tokenRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNFTsForAnyNFTsThroughERC20(
      trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNFTsForSpecificNFTsThroughERC20(
      trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    robustSwapETHForAnyNFTs(
      swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    robustSwapETHForSpecificNFTs(
      swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    robustSwapERC20ForAnyNFTs(
      swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    robustSwapERC20ForSpecificNFTs(
      swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    robustSwapNFTsForToken(
      swapList: LSSVMRouter.RobustPairSwapSpecificForTokenStruct[],
      tokenRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    robustSwapETHForSpecificNFTsAndNFTsToToken(
      params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    robustSwapERC20ForSpecificNFTsAndNFTsToToken(
      params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Allows an ERC20 pair contract to transfer ERC20 tokens directly from the sender, in order to minimize the number of token transfers. Only callable by an ERC20 pair.
     * @param amount The amount of tokens to transfer
     * @param from The address to transfer tokens from
     * @param to The address to transfer tokens to
     * @param token The ERC20 token to transfer
     * @param variant The pair variant of the pair contract
     */
    pairTransferERC20From(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      variant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Allows a pair contract to transfer ERC721 NFTs directly from the sender, in order to minimize the number of token transfers. Only callable by a pair.
     * @param from The address to transfer tokens from
     * @param id The ID of the NFT to transfer
     * @param nft The ERC721 NFT to transfer
     * @param to The address to transfer tokens to
     * @param variant The pair variant of the pair contract
     */
    pairTransferNFTFrom(
      nft: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      variant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapETHForAnyNFTs(
      swapList: LSSVMRouter.PairSwapAnyStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForSpecificNFTs(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForAnyNFTsThroughETH(
      trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      minOutput: PromiseOrValue<BigNumberish>,
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForSpecificNFTsThroughETH(
      trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      minOutput: PromiseOrValue<BigNumberish>,
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapERC20ForAnyNFTs(
      swapList: LSSVMRouter.PairSwapAnyStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapERC20ForSpecificNFTs(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForToken(
      swapList: LSSVMRouter.PairSwapSpecificStruct[],
      minOutput: PromiseOrValue<BigNumberish>,
      tokenRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForAnyNFTsThroughERC20(
      trade: LSSVMRouter.NFTsForAnyNFTsTradeStruct,
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNFTsForSpecificNFTsThroughERC20(
      trade: LSSVMRouter.NFTsForSpecificNFTsTradeStruct,
      inputAmount: PromiseOrValue<BigNumberish>,
      minOutput: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapETHForAnyNFTs(
      swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapETHForSpecificNFTs(
      swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
      ethRecipient: PromiseOrValue<string>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapERC20ForAnyNFTs(
      swapList: LSSVMRouter.RobustPairSwapAnyStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapERC20ForSpecificNFTs(
      swapList: LSSVMRouter.RobustPairSwapSpecificStruct[],
      inputAmount: PromiseOrValue<BigNumberish>,
      nftRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapNFTsForToken(
      swapList: LSSVMRouter.RobustPairSwapSpecificForTokenStruct[],
      tokenRecipient: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapETHForSpecificNFTsAndNFTsToToken(
      params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    robustSwapERC20ForSpecificNFTsAndNFTsToToken(
      params: LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTradeStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows an ERC20 pair contract to transfer ERC20 tokens directly from the sender, in order to minimize the number of token transfers. Only callable by an ERC20 pair.
     * @param amount The amount of tokens to transfer
     * @param from The address to transfer tokens from
     * @param to The address to transfer tokens to
     * @param token The ERC20 token to transfer
     * @param variant The pair variant of the pair contract
     */
    pairTransferERC20From(
      token: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      variant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows a pair contract to transfer ERC721 NFTs directly from the sender, in order to minimize the number of token transfers. Only callable by a pair.
     * @param from The address to transfer tokens from
     * @param id The ID of the NFT to transfer
     * @param nft The ERC721 NFT to transfer
     * @param to The address to transfer tokens to
     * @param variant The pair variant of the pair contract
     */
    pairTransferNFTFrom(
      nft: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      variant: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
