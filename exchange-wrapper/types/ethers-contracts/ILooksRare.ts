/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LibLooksRare {
  export type TakerOrderStruct = {
    isOrderAsk: PromiseOrValue<boolean>;
    taker: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    minPercentageToAsk: PromiseOrValue<BigNumberish>;
    params: PromiseOrValue<BytesLike>;
  };

  export type TakerOrderStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    isOrderAsk: boolean;
    taker: string;
    price: BigNumber;
    tokenId: BigNumber;
    minPercentageToAsk: BigNumber;
    params: string;
  };

  export type MakerOrderStruct = {
    isOrderAsk: PromiseOrValue<boolean>;
    signer: PromiseOrValue<string>;
    collection: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    strategy: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    minPercentageToAsk: PromiseOrValue<BigNumberish>;
    params: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type MakerOrderStructOutput = [
    boolean,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    string,
    string
  ] & {
    isOrderAsk: boolean;
    signer: string;
    collection: string;
    price: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    strategy: string;
    currency: string;
    nonce: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    minPercentageToAsk: BigNumber;
    params: string;
    v: number;
    r: string;
    s: string;
  };

  export type TakerStruct = {
    recipient: PromiseOrValue<string>;
    additionalParameters: PromiseOrValue<BytesLike>;
  };

  export type TakerStructOutput = [string, string] & {
    recipient: string;
    additionalParameters: string;
  };

  export type MakerStruct = {
    quoteType: PromiseOrValue<BigNumberish>;
    globalNonce: PromiseOrValue<BigNumberish>;
    subsetNonce: PromiseOrValue<BigNumberish>;
    orderNonce: PromiseOrValue<BigNumberish>;
    strategyId: PromiseOrValue<BigNumberish>;
    collectionType: PromiseOrValue<BigNumberish>;
    collection: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    signer: PromiseOrValue<string>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    itemIds: PromiseOrValue<BigNumberish>[];
    amounts: PromiseOrValue<BigNumberish>[];
    additionalParameters: PromiseOrValue<BytesLike>;
  };

  export type MakerStructOutput = [
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[],
    string
  ] & {
    quoteType: number;
    globalNonce: BigNumber;
    subsetNonce: BigNumber;
    orderNonce: BigNumber;
    strategyId: BigNumber;
    collectionType: number;
    collection: string;
    currency: string;
    signer: string;
    startTime: BigNumber;
    endTime: BigNumber;
    price: BigNumber;
    itemIds: BigNumber[];
    amounts: BigNumber[];
    additionalParameters: string;
  };

  export type MerkleTreeNodeStruct = {
    value: PromiseOrValue<BytesLike>;
    position: PromiseOrValue<BigNumberish>;
  };

  export type MerkleTreeNodeStructOutput = [string, number] & {
    value: string;
    position: number;
  };

  export type MerkleTreeStruct = {
    root: PromiseOrValue<BytesLike>;
    proof: LibLooksRare.MerkleTreeNodeStruct[];
  };

  export type MerkleTreeStructOutput = [
    string,
    LibLooksRare.MerkleTreeNodeStructOutput[]
  ] & { root: string; proof: LibLooksRare.MerkleTreeNodeStructOutput[] };
}

export interface ILooksRareInterface extends utils.Interface {
  functions: {
    "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "executeTakerBid((address,bytes),(uint8,uint256,uint256,uint256,uint256,uint8,address,address,address,uint256,uint256,uint256,uint256[],uint256[],bytes),bytes,(bytes32,(bytes32,uint8)[]),address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "matchAskWithTakerBidUsingETHAndWETH"
      | "executeTakerBid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "matchAskWithTakerBidUsingETHAndWETH",
    values: [LibLooksRare.TakerOrderStruct, LibLooksRare.MakerOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTakerBid",
    values: [
      LibLooksRare.TakerStruct,
      LibLooksRare.MakerStruct,
      PromiseOrValue<BytesLike>,
      LibLooksRare.MerkleTreeStruct,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "matchAskWithTakerBidUsingETHAndWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTakerBid",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILooksRare extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILooksRareInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: LibLooksRare.TakerOrderStruct,
      makerAsk: LibLooksRare.MakerOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTakerBid(
      takerBid: LibLooksRare.TakerStruct,
      makerAsk: LibLooksRare.MakerStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      merkleTree: LibLooksRare.MerkleTreeStruct,
      affiliate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  matchAskWithTakerBidUsingETHAndWETH(
    takerBid: LibLooksRare.TakerOrderStruct,
    makerAsk: LibLooksRare.MakerOrderStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTakerBid(
    takerBid: LibLooksRare.TakerStruct,
    makerAsk: LibLooksRare.MakerStruct,
    makerSignature: PromiseOrValue<BytesLike>,
    merkleTree: LibLooksRare.MerkleTreeStruct,
    affiliate: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: LibLooksRare.TakerOrderStruct,
      makerAsk: LibLooksRare.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTakerBid(
      takerBid: LibLooksRare.TakerStruct,
      makerAsk: LibLooksRare.MakerStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      merkleTree: LibLooksRare.MerkleTreeStruct,
      affiliate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: LibLooksRare.TakerOrderStruct,
      makerAsk: LibLooksRare.MakerOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTakerBid(
      takerBid: LibLooksRare.TakerStruct,
      makerAsk: LibLooksRare.MakerStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      merkleTree: LibLooksRare.MerkleTreeStruct,
      affiliate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: LibLooksRare.TakerOrderStruct,
      makerAsk: LibLooksRare.MakerOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTakerBid(
      takerBid: LibLooksRare.TakerStruct,
      makerAsk: LibLooksRare.MakerStruct,
      makerSignature: PromiseOrValue<BytesLike>,
      merkleTree: LibLooksRare.MerkleTreeStruct,
      affiliate: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
