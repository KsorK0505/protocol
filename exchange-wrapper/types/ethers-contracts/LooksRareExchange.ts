/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace OrderTypes {
  export type TakerOrderStruct = {
    isOrderAsk: PromiseOrValue<boolean>;
    taker: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    minPercentageToAsk: PromiseOrValue<BigNumberish>;
    params: PromiseOrValue<BytesLike>;
  };

  export type TakerOrderStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    isOrderAsk: boolean;
    taker: string;
    price: BigNumber;
    tokenId: BigNumber;
    minPercentageToAsk: BigNumber;
    params: string;
  };

  export type MakerOrderStruct = {
    isOrderAsk: PromiseOrValue<boolean>;
    signer: PromiseOrValue<string>;
    collection: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    strategy: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    minPercentageToAsk: PromiseOrValue<BigNumberish>;
    params: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type MakerOrderStructOutput = [
    boolean,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    string,
    string
  ] & {
    isOrderAsk: boolean;
    signer: string;
    collection: string;
    price: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    strategy: string;
    currency: string;
    nonce: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    minPercentageToAsk: BigNumber;
    params: string;
    v: number;
    r: string;
    s: string;
  };
}

export interface LooksRareExchangeInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "WETH()": FunctionFragment;
    "currencyManager()": FunctionFragment;
    "executionManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolFeeRecipient()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyFeeManager()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferSelectorNFT()": FunctionFragment;
    "userMinOrderNonce(address)": FunctionFragment;
    "cancelAllOrdersForSender(uint256)": FunctionFragment;
    "cancelMultipleMakerOrders(uint256[])": FunctionFragment;
    "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "updateCurrencyManager(address)": FunctionFragment;
    "updateExecutionManager(address)": FunctionFragment;
    "updateProtocolFeeRecipient(address)": FunctionFragment;
    "updateRoyaltyFeeManager(address)": FunctionFragment;
    "updateTransferSelectorNFT(address)": FunctionFragment;
    "isUserOrderNonceExecutedOrCancelled(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "WETH"
      | "currencyManager"
      | "executionManager"
      | "owner"
      | "protocolFeeRecipient"
      | "renounceOwnership"
      | "royaltyFeeManager"
      | "transferOwnership"
      | "transferSelectorNFT"
      | "userMinOrderNonce"
      | "cancelAllOrdersForSender"
      | "cancelMultipleMakerOrders"
      | "matchAskWithTakerBidUsingETHAndWETH"
      | "matchAskWithTakerBid"
      | "matchBidWithTakerAsk"
      | "updateCurrencyManager"
      | "updateExecutionManager"
      | "updateProtocolFeeRecipient"
      | "updateRoyaltyFeeManager"
      | "updateTransferSelectorNFT"
      | "isUserOrderNonceExecutedOrCancelled"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currencyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executionManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSelectorNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userMinOrderNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllOrdersForSender",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMultipleMakerOrders",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "matchAskWithTakerBidUsingETHAndWETH",
    values: [OrderTypes.TakerOrderStruct, OrderTypes.MakerOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "matchAskWithTakerBid",
    values: [OrderTypes.TakerOrderStruct, OrderTypes.MakerOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "matchBidWithTakerAsk",
    values: [OrderTypes.TakerOrderStruct, OrderTypes.MakerOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCurrencyManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutionManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRoyaltyFeeManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransferSelectorNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserOrderNonceExecutedOrCancelled",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currencyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSelectorNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMinOrderNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllOrdersForSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMultipleMakerOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchAskWithTakerBidUsingETHAndWETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchAskWithTakerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchBidWithTakerAsk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCurrencyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRoyaltyFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferSelectorNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserOrderNonceExecutedOrCancelled",
    data: BytesLike
  ): Result;

  events: {
    "CancelAllOrders(address,uint256)": EventFragment;
    "CancelMultipleOrders(address,uint256[])": EventFragment;
    "NewCurrencyManager(address)": EventFragment;
    "NewExecutionManager(address)": EventFragment;
    "NewProtocolFeeRecipient(address)": EventFragment;
    "NewRoyaltyFeeManager(address)": EventFragment;
    "NewTransferSelectorNFT(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoyaltyPayment(address,uint256,address,address,uint256)": EventFragment;
    "TakerAsk(bytes32,uint256,address,address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "TakerBid(bytes32,uint256,address,address,address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelAllOrders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelMultipleOrders"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCurrencyManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExecutionManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProtocolFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRoyaltyFeeManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTransferSelectorNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerBid"): EventFragment;
}

export interface CancelAllOrdersEventObject {
  user: string;
  newMinNonce: BigNumber;
}
export type CancelAllOrdersEvent = TypedEvent<
  [string, BigNumber],
  CancelAllOrdersEventObject
>;

export type CancelAllOrdersEventFilter = TypedEventFilter<CancelAllOrdersEvent>;

export interface CancelMultipleOrdersEventObject {
  user: string;
  orderNonces: BigNumber[];
}
export type CancelMultipleOrdersEvent = TypedEvent<
  [string, BigNumber[]],
  CancelMultipleOrdersEventObject
>;

export type CancelMultipleOrdersEventFilter =
  TypedEventFilter<CancelMultipleOrdersEvent>;

export interface NewCurrencyManagerEventObject {
  currencyManager: string;
}
export type NewCurrencyManagerEvent = TypedEvent<
  [string],
  NewCurrencyManagerEventObject
>;

export type NewCurrencyManagerEventFilter =
  TypedEventFilter<NewCurrencyManagerEvent>;

export interface NewExecutionManagerEventObject {
  executionManager: string;
}
export type NewExecutionManagerEvent = TypedEvent<
  [string],
  NewExecutionManagerEventObject
>;

export type NewExecutionManagerEventFilter =
  TypedEventFilter<NewExecutionManagerEvent>;

export interface NewProtocolFeeRecipientEventObject {
  protocolFeeRecipient: string;
}
export type NewProtocolFeeRecipientEvent = TypedEvent<
  [string],
  NewProtocolFeeRecipientEventObject
>;

export type NewProtocolFeeRecipientEventFilter =
  TypedEventFilter<NewProtocolFeeRecipientEvent>;

export interface NewRoyaltyFeeManagerEventObject {
  royaltyFeeManager: string;
}
export type NewRoyaltyFeeManagerEvent = TypedEvent<
  [string],
  NewRoyaltyFeeManagerEventObject
>;

export type NewRoyaltyFeeManagerEventFilter =
  TypedEventFilter<NewRoyaltyFeeManagerEvent>;

export interface NewTransferSelectorNFTEventObject {
  transferSelectorNFT: string;
}
export type NewTransferSelectorNFTEvent = TypedEvent<
  [string],
  NewTransferSelectorNFTEventObject
>;

export type NewTransferSelectorNFTEventFilter =
  TypedEventFilter<NewTransferSelectorNFTEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoyaltyPaymentEventObject {
  collection: string;
  tokenId: BigNumber;
  royaltyRecipient: string;
  currency: string;
  amount: BigNumber;
}
export type RoyaltyPaymentEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  RoyaltyPaymentEventObject
>;

export type RoyaltyPaymentEventFilter = TypedEventFilter<RoyaltyPaymentEvent>;

export interface TakerAskEventObject {
  orderHash: string;
  orderNonce: BigNumber;
  taker: string;
  maker: string;
  strategy: string;
  currency: string;
  collection: string;
  tokenId: BigNumber;
  amount: BigNumber;
  price: BigNumber;
}
export type TakerAskEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  TakerAskEventObject
>;

export type TakerAskEventFilter = TypedEventFilter<TakerAskEvent>;

export interface TakerBidEventObject {
  orderHash: string;
  orderNonce: BigNumber;
  taker: string;
  maker: string;
  strategy: string;
  currency: string;
  collection: string;
  tokenId: BigNumber;
  amount: BigNumber;
  price: BigNumber;
}
export type TakerBidEvent = TypedEvent<
  [
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  TakerBidEventObject
>;

export type TakerBidEventFilter = TypedEventFilter<TakerBidEvent>;

export interface LooksRareExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LooksRareExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    currencyManager(overrides?: CallOverrides): Promise<[string]>;

    executionManager(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royaltyFeeManager(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferSelectorNFT(overrides?: CallOverrides): Promise<[string]>;

    userMinOrderNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Cancel all pending orders for a sender
     * @param minNonce minimum user nonce
     */
    cancelAllOrdersForSender(
      minNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Cancel maker orders
     * @param orderNonces array of order nonces
     */
    cancelMultipleMakerOrders(
      orderNonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    matchAskWithTakerBid(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    matchBidWithTakerAsk(
      takerAsk: OrderTypes.TakerOrderStruct,
      makerBid: OrderTypes.MakerOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update currency manager
     * @param _currencyManager new currency manager address
     */
    updateCurrencyManager(
      _currencyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update execution manager
     * @param _executionManager new execution manager address
     */
    updateExecutionManager(
      _executionManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update protocol fee and recipient
     * @param _protocolFeeRecipient new recipient for protocol fees
     */
    updateProtocolFeeRecipient(
      _protocolFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update royalty fee manager
     * @param _royaltyFeeManager new fee manager address
     */
    updateRoyaltyFeeManager(
      _royaltyFeeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Update transfer selector NFT
     * @param _transferSelectorNFT new transfer selector address
     */
    updateTransferSelectorNFT(
      _transferSelectorNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Check whether user order nonce is executed or cancelled
     * @param orderNonce nonce of the order
     * @param user address of user
     */
    isUserOrderNonceExecutedOrCancelled(
      user: PromiseOrValue<string>,
      orderNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  currencyManager(overrides?: CallOverrides): Promise<string>;

  executionManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  protocolFeeRecipient(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royaltyFeeManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferSelectorNFT(overrides?: CallOverrides): Promise<string>;

  userMinOrderNonce(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Cancel all pending orders for a sender
   * @param minNonce minimum user nonce
   */
  cancelAllOrdersForSender(
    minNonce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Cancel maker orders
   * @param orderNonces array of order nonces
   */
  cancelMultipleMakerOrders(
    orderNonces: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  matchAskWithTakerBidUsingETHAndWETH(
    takerBid: OrderTypes.TakerOrderStruct,
    makerAsk: OrderTypes.MakerOrderStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  matchAskWithTakerBid(
    takerBid: OrderTypes.TakerOrderStruct,
    makerAsk: OrderTypes.MakerOrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  matchBidWithTakerAsk(
    takerAsk: OrderTypes.TakerOrderStruct,
    makerBid: OrderTypes.MakerOrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update currency manager
   * @param _currencyManager new currency manager address
   */
  updateCurrencyManager(
    _currencyManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update execution manager
   * @param _executionManager new execution manager address
   */
  updateExecutionManager(
    _executionManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update protocol fee and recipient
   * @param _protocolFeeRecipient new recipient for protocol fees
   */
  updateProtocolFeeRecipient(
    _protocolFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update royalty fee manager
   * @param _royaltyFeeManager new fee manager address
   */
  updateRoyaltyFeeManager(
    _royaltyFeeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Update transfer selector NFT
   * @param _transferSelectorNFT new transfer selector address
   */
  updateTransferSelectorNFT(
    _transferSelectorNFT: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Check whether user order nonce is executed or cancelled
   * @param orderNonce nonce of the order
   * @param user address of user
   */
  isUserOrderNonceExecutedOrCancelled(
    user: PromiseOrValue<string>,
    orderNonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    currencyManager(overrides?: CallOverrides): Promise<string>;

    executionManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyFeeManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferSelectorNFT(overrides?: CallOverrides): Promise<string>;

    userMinOrderNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Cancel all pending orders for a sender
     * @param minNonce minimum user nonce
     */
    cancelAllOrdersForSender(
      minNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Cancel maker orders
     * @param orderNonces array of order nonces
     */
    cancelMultipleMakerOrders(
      orderNonces: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    matchAskWithTakerBid(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    matchBidWithTakerAsk(
      takerAsk: OrderTypes.TakerOrderStruct,
      makerBid: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update currency manager
     * @param _currencyManager new currency manager address
     */
    updateCurrencyManager(
      _currencyManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update execution manager
     * @param _executionManager new execution manager address
     */
    updateExecutionManager(
      _executionManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update protocol fee and recipient
     * @param _protocolFeeRecipient new recipient for protocol fees
     */
    updateProtocolFeeRecipient(
      _protocolFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update royalty fee manager
     * @param _royaltyFeeManager new fee manager address
     */
    updateRoyaltyFeeManager(
      _royaltyFeeManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Update transfer selector NFT
     * @param _transferSelectorNFT new transfer selector address
     */
    updateTransferSelectorNFT(
      _transferSelectorNFT: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Check whether user order nonce is executed or cancelled
     * @param orderNonce nonce of the order
     * @param user address of user
     */
    isUserOrderNonceExecutedOrCancelled(
      user: PromiseOrValue<string>,
      orderNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CancelAllOrders(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      newMinNonce?: null
    ): CancelAllOrdersEventFilter;
    CancelAllOrders(
      user?: PromiseOrValue<string> | null,
      newMinNonce?: null
    ): CancelAllOrdersEventFilter;

    "CancelMultipleOrders(address,uint256[])"(
      user?: PromiseOrValue<string> | null,
      orderNonces?: null
    ): CancelMultipleOrdersEventFilter;
    CancelMultipleOrders(
      user?: PromiseOrValue<string> | null,
      orderNonces?: null
    ): CancelMultipleOrdersEventFilter;

    "NewCurrencyManager(address)"(
      currencyManager?: PromiseOrValue<string> | null
    ): NewCurrencyManagerEventFilter;
    NewCurrencyManager(
      currencyManager?: PromiseOrValue<string> | null
    ): NewCurrencyManagerEventFilter;

    "NewExecutionManager(address)"(
      executionManager?: PromiseOrValue<string> | null
    ): NewExecutionManagerEventFilter;
    NewExecutionManager(
      executionManager?: PromiseOrValue<string> | null
    ): NewExecutionManagerEventFilter;

    "NewProtocolFeeRecipient(address)"(
      protocolFeeRecipient?: PromiseOrValue<string> | null
    ): NewProtocolFeeRecipientEventFilter;
    NewProtocolFeeRecipient(
      protocolFeeRecipient?: PromiseOrValue<string> | null
    ): NewProtocolFeeRecipientEventFilter;

    "NewRoyaltyFeeManager(address)"(
      royaltyFeeManager?: PromiseOrValue<string> | null
    ): NewRoyaltyFeeManagerEventFilter;
    NewRoyaltyFeeManager(
      royaltyFeeManager?: PromiseOrValue<string> | null
    ): NewRoyaltyFeeManagerEventFilter;

    "NewTransferSelectorNFT(address)"(
      transferSelectorNFT?: PromiseOrValue<string> | null
    ): NewTransferSelectorNFTEventFilter;
    NewTransferSelectorNFT(
      transferSelectorNFT?: PromiseOrValue<string> | null
    ): NewTransferSelectorNFTEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoyaltyPayment(address,uint256,address,address,uint256)"(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      royaltyRecipient?: PromiseOrValue<string> | null,
      currency?: null,
      amount?: null
    ): RoyaltyPaymentEventFilter;
    RoyaltyPayment(
      collection?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      royaltyRecipient?: PromiseOrValue<string> | null,
      currency?: null,
      amount?: null
    ): RoyaltyPaymentEventFilter;

    "TakerAsk(bytes32,uint256,address,address,address,address,address,uint256,uint256,uint256)"(
      orderHash?: null,
      orderNonce?: null,
      taker?: PromiseOrValue<string> | null,
      maker?: PromiseOrValue<string> | null,
      strategy?: PromiseOrValue<string> | null,
      currency?: null,
      collection?: null,
      tokenId?: null,
      amount?: null,
      price?: null
    ): TakerAskEventFilter;
    TakerAsk(
      orderHash?: null,
      orderNonce?: null,
      taker?: PromiseOrValue<string> | null,
      maker?: PromiseOrValue<string> | null,
      strategy?: PromiseOrValue<string> | null,
      currency?: null,
      collection?: null,
      tokenId?: null,
      amount?: null,
      price?: null
    ): TakerAskEventFilter;

    "TakerBid(bytes32,uint256,address,address,address,address,address,uint256,uint256,uint256)"(
      orderHash?: null,
      orderNonce?: null,
      taker?: PromiseOrValue<string> | null,
      maker?: PromiseOrValue<string> | null,
      strategy?: PromiseOrValue<string> | null,
      currency?: null,
      collection?: null,
      tokenId?: null,
      amount?: null,
      price?: null
    ): TakerBidEventFilter;
    TakerBid(
      orderHash?: null,
      orderNonce?: null,
      taker?: PromiseOrValue<string> | null,
      maker?: PromiseOrValue<string> | null,
      strategy?: PromiseOrValue<string> | null,
      currency?: null,
      collection?: null,
      tokenId?: null,
      amount?: null,
      price?: null
    ): TakerBidEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    currencyManager(overrides?: CallOverrides): Promise<BigNumber>;

    executionManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royaltyFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferSelectorNFT(overrides?: CallOverrides): Promise<BigNumber>;

    userMinOrderNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Cancel all pending orders for a sender
     * @param minNonce minimum user nonce
     */
    cancelAllOrdersForSender(
      minNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Cancel maker orders
     * @param orderNonces array of order nonces
     */
    cancelMultipleMakerOrders(
      orderNonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    matchAskWithTakerBid(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    matchBidWithTakerAsk(
      takerAsk: OrderTypes.TakerOrderStruct,
      makerBid: OrderTypes.MakerOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update currency manager
     * @param _currencyManager new currency manager address
     */
    updateCurrencyManager(
      _currencyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update execution manager
     * @param _executionManager new execution manager address
     */
    updateExecutionManager(
      _executionManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update protocol fee and recipient
     * @param _protocolFeeRecipient new recipient for protocol fees
     */
    updateProtocolFeeRecipient(
      _protocolFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update royalty fee manager
     * @param _royaltyFeeManager new fee manager address
     */
    updateRoyaltyFeeManager(
      _royaltyFeeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Update transfer selector NFT
     * @param _transferSelectorNFT new transfer selector address
     */
    updateTransferSelectorNFT(
      _transferSelectorNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Check whether user order nonce is executed or cancelled
     * @param orderNonce nonce of the order
     * @param user address of user
     */
    isUserOrderNonceExecutedOrCancelled(
      user: PromiseOrValue<string>,
      orderNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currencyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royaltyFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferSelectorNFT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userMinOrderNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Cancel all pending orders for a sender
     * @param minNonce minimum user nonce
     */
    cancelAllOrdersForSender(
      minNonce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Cancel maker orders
     * @param orderNonces array of order nonces
     */
    cancelMultipleMakerOrders(
      orderNonces: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    matchAskWithTakerBidUsingETHAndWETH(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    matchAskWithTakerBid(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    matchBidWithTakerAsk(
      takerAsk: OrderTypes.TakerOrderStruct,
      makerBid: OrderTypes.MakerOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update currency manager
     * @param _currencyManager new currency manager address
     */
    updateCurrencyManager(
      _currencyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update execution manager
     * @param _executionManager new execution manager address
     */
    updateExecutionManager(
      _executionManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update protocol fee and recipient
     * @param _protocolFeeRecipient new recipient for protocol fees
     */
    updateProtocolFeeRecipient(
      _protocolFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update royalty fee manager
     * @param _royaltyFeeManager new fee manager address
     */
    updateRoyaltyFeeManager(
      _royaltyFeeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Update transfer selector NFT
     * @param _transferSelectorNFT new transfer selector address
     */
    updateTransferSelectorNFT(
      _transferSelectorNFT: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Check whether user order nonce is executed or cancelled
     * @param orderNonce nonce of the order
     * @param user address of user
     */
    isUserOrderNonceExecutedOrCancelled(
      user: PromiseOrValue<string>,
      orderNonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
