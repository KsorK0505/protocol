/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WyvernProxyRegistryInterface extends utils.Interface {
  functions: {
    "name()": FunctionFragment;
    "initialAddressSet()": FunctionFragment;
    "endGrantAuthentication(address)": FunctionFragment;
    "revokeAuthentication(address)": FunctionFragment;
    "pending(address)": FunctionFragment;
    "contracts(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "owner()": FunctionFragment;
    "delegateProxyImplementation()": FunctionFragment;
    "proxies(address)": FunctionFragment;
    "startGrantAuthentication(address)": FunctionFragment;
    "registerProxy()": FunctionFragment;
    "DELAY_PERIOD()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "grantInitialAuthentication(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "name"
      | "initialAddressSet"
      | "endGrantAuthentication"
      | "revokeAuthentication"
      | "pending"
      | "contracts"
      | "renounceOwnership"
      | "owner"
      | "delegateProxyImplementation"
      | "proxies"
      | "startGrantAuthentication"
      | "registerProxy"
      | "DELAY_PERIOD"
      | "transferOwnership"
      | "grantInitialAuthentication"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialAddressSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endGrantAuthentication",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAuthentication",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pending",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateProxyImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startGrantAuthentication",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELAY_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantInitialAuthentication",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialAddressSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endGrantAuthentication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAuthentication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pending", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateProxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proxies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startGrantAuthentication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELAY_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantInitialAuthentication",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipRenounced(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipRenounced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipRenouncedEventObject {
  previousOwner: string;
}
export type OwnershipRenouncedEvent = TypedEvent<
  [string],
  OwnershipRenouncedEventObject
>;

export type OwnershipRenouncedEventFilter =
  TypedEventFilter<OwnershipRenouncedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WyvernProxyRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WyvernProxyRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    name(overrides?: CallOverrides): Promise<[string]>;

    initialAddressSet(overrides?: CallOverrides): Promise<[boolean]>;

    /**
     * ProxyRegistry owner only
     * End the process to nable access for specified contract after delay period has passed.
     * @param addr Address to which to grant permissions
     */
    endGrantAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * ProxyRegistry owner only
     * Revoke access for specified contract. Can be done instantly.
     * @param addr Address of which to revoke permissions
     */
    revokeAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pending(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Allows the current owner to relinquish control of the contract.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    delegateProxyImplementation(overrides?: CallOverrides): Promise<[string]>;

    proxies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * ProxyRegistry owner only
     * Start the process to enable access for specified contract. Subject to delay period.
     * @param addr Address to which to grant permissions
     */
    startGrantAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Must be called by the user which the proxy is for, creates a new AuthenticatedProxy
     * Register a proxy contract with this registry
     * @returns New AuthenticatedProxy contract
     */
    registerProxy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    DELAY_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * No delay, can only be called once - after that the standard registry process with a delay must be used
     * Grant authentication to the initial Exchange protocol contract
     * @param authAddress Address of the contract to grant authentication
     */
    grantInitialAuthentication(
      authAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  name(overrides?: CallOverrides): Promise<string>;

  initialAddressSet(overrides?: CallOverrides): Promise<boolean>;

  /**
   * ProxyRegistry owner only
   * End the process to nable access for specified contract after delay period has passed.
   * @param addr Address to which to grant permissions
   */
  endGrantAuthentication(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * ProxyRegistry owner only
   * Revoke access for specified contract. Can be done instantly.
   * @param addr Address of which to revoke permissions
   */
  revokeAuthentication(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pending(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Allows the current owner to relinquish control of the contract.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  delegateProxyImplementation(overrides?: CallOverrides): Promise<string>;

  proxies(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * ProxyRegistry owner only
   * Start the process to enable access for specified contract. Subject to delay period.
   * @param addr Address to which to grant permissions
   */
  startGrantAuthentication(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Must be called by the user which the proxy is for, creates a new AuthenticatedProxy
   * Register a proxy contract with this registry
   * @returns New AuthenticatedProxy contract
   */
  registerProxy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  DELAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * No delay, can only be called once - after that the standard registry process with a delay must be used
   * Grant authentication to the initial Exchange protocol contract
   * @param authAddress Address of the contract to grant authentication
   */
  grantInitialAuthentication(
    authAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    name(overrides?: CallOverrides): Promise<string>;

    initialAddressSet(overrides?: CallOverrides): Promise<boolean>;

    /**
     * ProxyRegistry owner only
     * End the process to nable access for specified contract after delay period has passed.
     * @param addr Address to which to grant permissions
     */
    endGrantAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * ProxyRegistry owner only
     * Revoke access for specified contract. Can be done instantly.
     * @param addr Address of which to revoke permissions
     */
    revokeAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pending(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Allows the current owner to relinquish control of the contract.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    delegateProxyImplementation(overrides?: CallOverrides): Promise<string>;

    proxies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * ProxyRegistry owner only
     * Start the process to enable access for specified contract. Subject to delay period.
     * @param addr Address to which to grant permissions
     */
    startGrantAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Must be called by the user which the proxy is for, creates a new AuthenticatedProxy
     * Register a proxy contract with this registry
     * @returns New AuthenticatedProxy contract
     */
    registerProxy(overrides?: CallOverrides): Promise<string>;

    DELAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * No delay, can only be called once - after that the standard registry process with a delay must be used
     * Grant authentication to the initial Exchange protocol contract
     * @param authAddress Address of the contract to grant authentication
     */
    grantInitialAuthentication(
      authAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipRenounced(address)"(
      previousOwner?: PromiseOrValue<string> | null
    ): OwnershipRenouncedEventFilter;
    OwnershipRenounced(
      previousOwner?: PromiseOrValue<string> | null
    ): OwnershipRenouncedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    name(overrides?: CallOverrides): Promise<BigNumber>;

    initialAddressSet(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * ProxyRegistry owner only
     * End the process to nable access for specified contract after delay period has passed.
     * @param addr Address to which to grant permissions
     */
    endGrantAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * ProxyRegistry owner only
     * Revoke access for specified contract. Can be done instantly.
     * @param addr Address of which to revoke permissions
     */
    revokeAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pending(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Allows the current owner to relinquish control of the contract.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    delegateProxyImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    proxies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * ProxyRegistry owner only
     * Start the process to enable access for specified contract. Subject to delay period.
     * @param addr Address to which to grant permissions
     */
    startGrantAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Must be called by the user which the proxy is for, creates a new AuthenticatedProxy
     * Register a proxy contract with this registry
     * @returns New AuthenticatedProxy contract
     */
    registerProxy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    DELAY_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * No delay, can only be called once - after that the standard registry process with a delay must be used
     * Grant authentication to the initial Exchange protocol contract
     * @param authAddress Address of the contract to grant authentication
     */
    grantInitialAuthentication(
      authAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialAddressSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * ProxyRegistry owner only
     * End the process to nable access for specified contract after delay period has passed.
     * @param addr Address to which to grant permissions
     */
    endGrantAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * ProxyRegistry owner only
     * Revoke access for specified contract. Can be done instantly.
     * @param addr Address of which to revoke permissions
     */
    revokeAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pending(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to relinquish control of the contract.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateProxyImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxies(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * ProxyRegistry owner only
     * Start the process to enable access for specified contract. Subject to delay period.
     * @param addr Address to which to grant permissions
     */
    startGrantAuthentication(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Must be called by the user which the proxy is for, creates a new AuthenticatedProxy
     * Register a proxy contract with this registry
     * @returns New AuthenticatedProxy contract
     */
    registerProxy(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    DELAY_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * No delay, can only be called once - after that the standard registry process with a delay must be used
     * Grant authentication to the initial Exchange protocol contract
     * @param authAddress Address of the contract to grant authentication
     */
    grantInitialAuthentication(
      authAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
