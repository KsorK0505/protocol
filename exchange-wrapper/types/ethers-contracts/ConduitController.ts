/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ConduitControllerInterface extends utils.Interface {
  functions: {
    "createConduit(bytes32,address)": FunctionFragment;
    "updateChannel(address,address,bool)": FunctionFragment;
    "transferOwnership(address,address)": FunctionFragment;
    "cancelOwnershipTransfer(address)": FunctionFragment;
    "acceptOwnership(address)": FunctionFragment;
    "ownerOf(address)": FunctionFragment;
    "getKey(address)": FunctionFragment;
    "getConduit(bytes32)": FunctionFragment;
    "getPotentialOwner(address)": FunctionFragment;
    "getChannelStatus(address,address)": FunctionFragment;
    "getTotalChannels(address)": FunctionFragment;
    "getChannel(address,uint256)": FunctionFragment;
    "getChannels(address)": FunctionFragment;
    "getConduitCodeHashes()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createConduit"
      | "updateChannel"
      | "transferOwnership"
      | "cancelOwnershipTransfer"
      | "acceptOwnership"
      | "ownerOf"
      | "getKey"
      | "getConduit"
      | "getPotentialOwner"
      | "getChannelStatus"
      | "getTotalChannels"
      | "getChannel"
      | "getChannels"
      | "getConduitCodeHashes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createConduit",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChannel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipTransfer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConduit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPotentialOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannelStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalChannels",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannel",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChannels",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConduitCodeHashes",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createConduit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChannel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConduit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPotentialOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChannelStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChannel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChannels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConduitCodeHashes",
    data: BytesLike
  ): Result;

  events: {
    "NewConduit(address,bytes32)": EventFragment;
    "OwnershipTransferred(address,address,address)": EventFragment;
    "PotentialOwnerUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewConduit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PotentialOwnerUpdated"): EventFragment;
}

export interface NewConduitEventObject {
  conduit: string;
  conduitKey: string;
}
export type NewConduitEvent = TypedEvent<
  [string, string],
  NewConduitEventObject
>;

export type NewConduitEventFilter = TypedEventFilter<NewConduitEvent>;

export interface OwnershipTransferredEventObject {
  conduit: string;
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PotentialOwnerUpdatedEventObject {
  newPotentialOwner: string;
}
export type PotentialOwnerUpdatedEvent = TypedEvent<
  [string],
  PotentialOwnerUpdatedEventObject
>;

export type PotentialOwnerUpdatedEventFilter =
  TypedEventFilter<PotentialOwnerUpdatedEvent>;

export interface ConduitController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConduitControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Deploy a new conduit using a supplied conduit key and assigning         an initial owner for the deployed conduit. Note that the first         twenty bytes of the supplied conduit key must match the caller         and that a new conduit cannot be created if one has already been         deployed using the same conduit key.
     * @param conduitKey The conduit key used to deploy the conduit. Note that                     the first twenty bytes of the conduit key must match                     the caller of this contract.
     * @param initialOwner The initial owner to set for the new conduit.
     */
    createConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Open or close a channel on a given conduit, thereby allowing the         specified account to execute transfers against that conduit.         Extreme care must be taken when updating channels, as malicious         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155         tokens where the token holder has granted the conduit approval.         Only the owner of the conduit in question may call this function.
     * @param channel The channel to open or close on the conduit.
     * @param conduit The conduit for which to open or close the channel.
     * @param isOpen A boolean indicating whether to open or close the channel.
     */
    updateChannel(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Initiate conduit ownership transfer by assigning a new potential         owner for the given conduit. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the conduit.         Only the owner of the conduit in question may call this function.
     * @param conduit The conduit for which to initiate ownership transfer.
     * @param newPotentialOwner The new potential owner of the conduit.
     */
    transferOwnership(
      conduit: PromiseOrValue<string>,
      newPotentialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Clear the currently set potential owner, if any, from a conduit.         Only the owner of the conduit in question may call this function.
     * @param conduit The conduit for which to cancel ownership transfer.
     */
    cancelOwnershipTransfer(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Accept ownership of a supplied conduit. Only accounts that the         current owner has set as the new potential owner may call this         function.
     * @param conduit The conduit for which to accept ownership.
     */
    acceptOwnership(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Retrieve the current owner of a deployed conduit.
     * @param conduit The conduit for which to retrieve the associated owner.
     */
    ownerOf(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    /**
     * Retrieve the conduit key for a deployed conduit via reverse         lookup.
     * @param conduit The conduit for which to retrieve the associated conduit                key.
     */
    getKey(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { conduitKey: string }>;

    /**
     * Derive the conduit associated with a given conduit key and         determine whether that conduit exists (i.e. whether it has been         deployed).
     * @param conduitKey The conduit key used to derive the conduit.
     */
    getConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { conduit: string; exists: boolean }>;

    /**
     * Retrieve the potential owner, if any, for a given conduit. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the conduit in question via `acceptOwnership`.
     * @param conduit The conduit for which to retrieve the potential owner.
     */
    getPotentialOwner(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { potentialOwner: string }>;

    /**
     * Retrieve the status (either open or closed) of a given channel on         a conduit.
     * @param channel The channel for which to retrieve the status.
     * @param conduit The conduit for which to retrieve the channel status.
     */
    getChannelStatus(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isOpen: boolean }>;

    /**
     * Retrieve the total number of open channels for a given conduit.
     * @param conduit The conduit for which to retrieve the total channel count.
     */
    getTotalChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalChannels: BigNumber }>;

    /**
     * Retrieve an open channel at a specific index for a given conduit.         Note that the index of a channel can change as a result of other         channels being closed on the conduit.
     * @param channelIndex The index of the channel in question.
     * @param conduit The conduit for which to retrieve the open channel.
     */
    getChannel(
      conduit: PromiseOrValue<string>,
      channelIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { channel: string }>;

    /**
     * Retrieve all open channels for a given conduit. Note that calling         this function for a conduit with many channels will revert with         an out-of-gas error.
     * @param conduit The conduit for which to retrieve open channels.
     */
    getChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { channels: string[] }>;

    /**
     * Retrieve the conduit creation code and runtime code hashes.
     */
    getConduitCodeHashes(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { creationCodeHash: string; runtimeCodeHash: string }
    >;
  };

  /**
   * Deploy a new conduit using a supplied conduit key and assigning         an initial owner for the deployed conduit. Note that the first         twenty bytes of the supplied conduit key must match the caller         and that a new conduit cannot be created if one has already been         deployed using the same conduit key.
   * @param conduitKey The conduit key used to deploy the conduit. Note that                     the first twenty bytes of the conduit key must match                     the caller of this contract.
   * @param initialOwner The initial owner to set for the new conduit.
   */
  createConduit(
    conduitKey: PromiseOrValue<BytesLike>,
    initialOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Open or close a channel on a given conduit, thereby allowing the         specified account to execute transfers against that conduit.         Extreme care must be taken when updating channels, as malicious         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155         tokens where the token holder has granted the conduit approval.         Only the owner of the conduit in question may call this function.
   * @param channel The channel to open or close on the conduit.
   * @param conduit The conduit for which to open or close the channel.
   * @param isOpen A boolean indicating whether to open or close the channel.
   */
  updateChannel(
    conduit: PromiseOrValue<string>,
    channel: PromiseOrValue<string>,
    isOpen: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Initiate conduit ownership transfer by assigning a new potential         owner for the given conduit. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the conduit.         Only the owner of the conduit in question may call this function.
   * @param conduit The conduit for which to initiate ownership transfer.
   * @param newPotentialOwner The new potential owner of the conduit.
   */
  transferOwnership(
    conduit: PromiseOrValue<string>,
    newPotentialOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Clear the currently set potential owner, if any, from a conduit.         Only the owner of the conduit in question may call this function.
   * @param conduit The conduit for which to cancel ownership transfer.
   */
  cancelOwnershipTransfer(
    conduit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Accept ownership of a supplied conduit. Only accounts that the         current owner has set as the new potential owner may call this         function.
   * @param conduit The conduit for which to accept ownership.
   */
  acceptOwnership(
    conduit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Retrieve the current owner of a deployed conduit.
   * @param conduit The conduit for which to retrieve the associated owner.
   */
  ownerOf(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Retrieve the conduit key for a deployed conduit via reverse         lookup.
   * @param conduit The conduit for which to retrieve the associated conduit                key.
   */
  getKey(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Derive the conduit associated with a given conduit key and         determine whether that conduit exists (i.e. whether it has been         deployed).
   * @param conduitKey The conduit key used to derive the conduit.
   */
  getConduit(
    conduitKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { conduit: string; exists: boolean }>;

  /**
   * Retrieve the potential owner, if any, for a given conduit. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the conduit in question via `acceptOwnership`.
   * @param conduit The conduit for which to retrieve the potential owner.
   */
  getPotentialOwner(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Retrieve the status (either open or closed) of a given channel on         a conduit.
   * @param channel The channel for which to retrieve the status.
   * @param conduit The conduit for which to retrieve the channel status.
   */
  getChannelStatus(
    conduit: PromiseOrValue<string>,
    channel: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Retrieve the total number of open channels for a given conduit.
   * @param conduit The conduit for which to retrieve the total channel count.
   */
  getTotalChannels(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Retrieve an open channel at a specific index for a given conduit.         Note that the index of a channel can change as a result of other         channels being closed on the conduit.
   * @param channelIndex The index of the channel in question.
   * @param conduit The conduit for which to retrieve the open channel.
   */
  getChannel(
    conduit: PromiseOrValue<string>,
    channelIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Retrieve all open channels for a given conduit. Note that calling         this function for a conduit with many channels will revert with         an out-of-gas error.
   * @param conduit The conduit for which to retrieve open channels.
   */
  getChannels(
    conduit: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * Retrieve the conduit creation code and runtime code hashes.
   */
  getConduitCodeHashes(
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { creationCodeHash: string; runtimeCodeHash: string }
  >;

  callStatic: {
    /**
     * Deploy a new conduit using a supplied conduit key and assigning         an initial owner for the deployed conduit. Note that the first         twenty bytes of the supplied conduit key must match the caller         and that a new conduit cannot be created if one has already been         deployed using the same conduit key.
     * @param conduitKey The conduit key used to deploy the conduit. Note that                     the first twenty bytes of the conduit key must match                     the caller of this contract.
     * @param initialOwner The initial owner to set for the new conduit.
     */
    createConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      initialOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Open or close a channel on a given conduit, thereby allowing the         specified account to execute transfers against that conduit.         Extreme care must be taken when updating channels, as malicious         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155         tokens where the token holder has granted the conduit approval.         Only the owner of the conduit in question may call this function.
     * @param channel The channel to open or close on the conduit.
     * @param conduit The conduit for which to open or close the channel.
     * @param isOpen A boolean indicating whether to open or close the channel.
     */
    updateChannel(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Initiate conduit ownership transfer by assigning a new potential         owner for the given conduit. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the conduit.         Only the owner of the conduit in question may call this function.
     * @param conduit The conduit for which to initiate ownership transfer.
     * @param newPotentialOwner The new potential owner of the conduit.
     */
    transferOwnership(
      conduit: PromiseOrValue<string>,
      newPotentialOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Clear the currently set potential owner, if any, from a conduit.         Only the owner of the conduit in question may call this function.
     * @param conduit The conduit for which to cancel ownership transfer.
     */
    cancelOwnershipTransfer(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Accept ownership of a supplied conduit. Only accounts that the         current owner has set as the new potential owner may call this         function.
     * @param conduit The conduit for which to accept ownership.
     */
    acceptOwnership(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Retrieve the current owner of a deployed conduit.
     * @param conduit The conduit for which to retrieve the associated owner.
     */
    ownerOf(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Retrieve the conduit key for a deployed conduit via reverse         lookup.
     * @param conduit The conduit for which to retrieve the associated conduit                key.
     */
    getKey(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Derive the conduit associated with a given conduit key and         determine whether that conduit exists (i.e. whether it has been         deployed).
     * @param conduitKey The conduit key used to derive the conduit.
     */
    getConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { conduit: string; exists: boolean }>;

    /**
     * Retrieve the potential owner, if any, for a given conduit. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the conduit in question via `acceptOwnership`.
     * @param conduit The conduit for which to retrieve the potential owner.
     */
    getPotentialOwner(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Retrieve the status (either open or closed) of a given channel on         a conduit.
     * @param channel The channel for which to retrieve the status.
     * @param conduit The conduit for which to retrieve the channel status.
     */
    getChannelStatus(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Retrieve the total number of open channels for a given conduit.
     * @param conduit The conduit for which to retrieve the total channel count.
     */
    getTotalChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve an open channel at a specific index for a given conduit.         Note that the index of a channel can change as a result of other         channels being closed on the conduit.
     * @param channelIndex The index of the channel in question.
     * @param conduit The conduit for which to retrieve the open channel.
     */
    getChannel(
      conduit: PromiseOrValue<string>,
      channelIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Retrieve all open channels for a given conduit. Note that calling         this function for a conduit with many channels will revert with         an out-of-gas error.
     * @param conduit The conduit for which to retrieve open channels.
     */
    getChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * Retrieve the conduit creation code and runtime code hashes.
     */
    getConduitCodeHashes(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { creationCodeHash: string; runtimeCodeHash: string }
    >;
  };

  filters: {
    "NewConduit(address,bytes32)"(
      conduit?: null,
      conduitKey?: null
    ): NewConduitEventFilter;
    NewConduit(conduit?: null, conduitKey?: null): NewConduitEventFilter;

    "OwnershipTransferred(address,address,address)"(
      conduit?: PromiseOrValue<string> | null,
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      conduit?: PromiseOrValue<string> | null,
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PotentialOwnerUpdated(address)"(
      newPotentialOwner?: PromiseOrValue<string> | null
    ): PotentialOwnerUpdatedEventFilter;
    PotentialOwnerUpdated(
      newPotentialOwner?: PromiseOrValue<string> | null
    ): PotentialOwnerUpdatedEventFilter;
  };

  estimateGas: {
    /**
     * Deploy a new conduit using a supplied conduit key and assigning         an initial owner for the deployed conduit. Note that the first         twenty bytes of the supplied conduit key must match the caller         and that a new conduit cannot be created if one has already been         deployed using the same conduit key.
     * @param conduitKey The conduit key used to deploy the conduit. Note that                     the first twenty bytes of the conduit key must match                     the caller of this contract.
     * @param initialOwner The initial owner to set for the new conduit.
     */
    createConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Open or close a channel on a given conduit, thereby allowing the         specified account to execute transfers against that conduit.         Extreme care must be taken when updating channels, as malicious         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155         tokens where the token holder has granted the conduit approval.         Only the owner of the conduit in question may call this function.
     * @param channel The channel to open or close on the conduit.
     * @param conduit The conduit for which to open or close the channel.
     * @param isOpen A boolean indicating whether to open or close the channel.
     */
    updateChannel(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Initiate conduit ownership transfer by assigning a new potential         owner for the given conduit. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the conduit.         Only the owner of the conduit in question may call this function.
     * @param conduit The conduit for which to initiate ownership transfer.
     * @param newPotentialOwner The new potential owner of the conduit.
     */
    transferOwnership(
      conduit: PromiseOrValue<string>,
      newPotentialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Clear the currently set potential owner, if any, from a conduit.         Only the owner of the conduit in question may call this function.
     * @param conduit The conduit for which to cancel ownership transfer.
     */
    cancelOwnershipTransfer(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Accept ownership of a supplied conduit. Only accounts that the         current owner has set as the new potential owner may call this         function.
     * @param conduit The conduit for which to accept ownership.
     */
    acceptOwnership(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Retrieve the current owner of a deployed conduit.
     * @param conduit The conduit for which to retrieve the associated owner.
     */
    ownerOf(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve the conduit key for a deployed conduit via reverse         lookup.
     * @param conduit The conduit for which to retrieve the associated conduit                key.
     */
    getKey(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Derive the conduit associated with a given conduit key and         determine whether that conduit exists (i.e. whether it has been         deployed).
     * @param conduitKey The conduit key used to derive the conduit.
     */
    getConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve the potential owner, if any, for a given conduit. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the conduit in question via `acceptOwnership`.
     * @param conduit The conduit for which to retrieve the potential owner.
     */
    getPotentialOwner(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve the status (either open or closed) of a given channel on         a conduit.
     * @param channel The channel for which to retrieve the status.
     * @param conduit The conduit for which to retrieve the channel status.
     */
    getChannelStatus(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve the total number of open channels for a given conduit.
     * @param conduit The conduit for which to retrieve the total channel count.
     */
    getTotalChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve an open channel at a specific index for a given conduit.         Note that the index of a channel can change as a result of other         channels being closed on the conduit.
     * @param channelIndex The index of the channel in question.
     * @param conduit The conduit for which to retrieve the open channel.
     */
    getChannel(
      conduit: PromiseOrValue<string>,
      channelIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve all open channels for a given conduit. Note that calling         this function for a conduit with many channels will revert with         an out-of-gas error.
     * @param conduit The conduit for which to retrieve open channels.
     */
    getChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieve the conduit creation code and runtime code hashes.
     */
    getConduitCodeHashes(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Deploy a new conduit using a supplied conduit key and assigning         an initial owner for the deployed conduit. Note that the first         twenty bytes of the supplied conduit key must match the caller         and that a new conduit cannot be created if one has already been         deployed using the same conduit key.
     * @param conduitKey The conduit key used to deploy the conduit. Note that                     the first twenty bytes of the conduit key must match                     the caller of this contract.
     * @param initialOwner The initial owner to set for the new conduit.
     */
    createConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      initialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Open or close a channel on a given conduit, thereby allowing the         specified account to execute transfers against that conduit.         Extreme care must be taken when updating channels, as malicious         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155         tokens where the token holder has granted the conduit approval.         Only the owner of the conduit in question may call this function.
     * @param channel The channel to open or close on the conduit.
     * @param conduit The conduit for which to open or close the channel.
     * @param isOpen A boolean indicating whether to open or close the channel.
     */
    updateChannel(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      isOpen: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Initiate conduit ownership transfer by assigning a new potential         owner for the given conduit. Once set, the new potential owner         may call `acceptOwnership` to claim ownership of the conduit.         Only the owner of the conduit in question may call this function.
     * @param conduit The conduit for which to initiate ownership transfer.
     * @param newPotentialOwner The new potential owner of the conduit.
     */
    transferOwnership(
      conduit: PromiseOrValue<string>,
      newPotentialOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Clear the currently set potential owner, if any, from a conduit.         Only the owner of the conduit in question may call this function.
     * @param conduit The conduit for which to cancel ownership transfer.
     */
    cancelOwnershipTransfer(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Accept ownership of a supplied conduit. Only accounts that the         current owner has set as the new potential owner may call this         function.
     * @param conduit The conduit for which to accept ownership.
     */
    acceptOwnership(
      conduit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve the current owner of a deployed conduit.
     * @param conduit The conduit for which to retrieve the associated owner.
     */
    ownerOf(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve the conduit key for a deployed conduit via reverse         lookup.
     * @param conduit The conduit for which to retrieve the associated conduit                key.
     */
    getKey(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Derive the conduit associated with a given conduit key and         determine whether that conduit exists (i.e. whether it has been         deployed).
     * @param conduitKey The conduit key used to derive the conduit.
     */
    getConduit(
      conduitKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve the potential owner, if any, for a given conduit. The         current owner may set a new potential owner via         `transferOwnership` and that owner may then accept ownership of         the conduit in question via `acceptOwnership`.
     * @param conduit The conduit for which to retrieve the potential owner.
     */
    getPotentialOwner(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve the status (either open or closed) of a given channel on         a conduit.
     * @param channel The channel for which to retrieve the status.
     * @param conduit The conduit for which to retrieve the channel status.
     */
    getChannelStatus(
      conduit: PromiseOrValue<string>,
      channel: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve the total number of open channels for a given conduit.
     * @param conduit The conduit for which to retrieve the total channel count.
     */
    getTotalChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve an open channel at a specific index for a given conduit.         Note that the index of a channel can change as a result of other         channels being closed on the conduit.
     * @param channelIndex The index of the channel in question.
     * @param conduit The conduit for which to retrieve the open channel.
     */
    getChannel(
      conduit: PromiseOrValue<string>,
      channelIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve all open channels for a given conduit. Note that calling         this function for a conduit with many channels will revert with         an out-of-gas error.
     * @param conduit The conduit for which to retrieve open channels.
     */
    getChannels(
      conduit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieve the conduit creation code and runtime code hashes.
     */
    getConduitCodeHashes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
