/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ExponentialCurveInterface extends utils.Interface {
  functions: {
    "MIN_PRICE()": FunctionFragment;
    "validateDelta(uint128)": FunctionFragment;
    "validateSpotPrice(uint128)": FunctionFragment;
    "getBuyInfo(uint128,uint128,uint256,uint256,uint256)": FunctionFragment;
    "getSellInfo(uint128,uint128,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_PRICE"
      | "validateDelta"
      | "validateSpotPrice"
      | "getBuyInfo"
      | "getSellInfo"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MIN_PRICE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateDelta",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateSpotPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyInfo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellInfo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "MIN_PRICE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBuyInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ExponentialCurve extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExponentialCurveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * See {ICurve-validateDelta}
     */
    validateDelta(
      delta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * See {ICurve-validateSpotPrice}
     */
    validateSpotPrice(
      newSpotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * See {ICurve-getBuyInfo}
     */
    getBuyInfo(
      spotPrice: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      numItems: PromiseOrValue<BigNumberish>,
      feeMultiplier: PromiseOrValue<BigNumberish>,
      protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: number;
        newSpotPrice: BigNumber;
        newDelta: BigNumber;
        inputValue: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    /**
     * See {ICurve-getSellInfo} If newSpotPrice is less than MIN_PRICE, newSpotPrice is set to MIN_PRICE instead. This is to prevent the spot price from ever becoming 0, which would decouple the price from the bonding curve (since 0 * delta is still 0)
     */
    getSellInfo(
      spotPrice: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      numItems: PromiseOrValue<BigNumberish>,
      feeMultiplier: PromiseOrValue<BigNumberish>,
      protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: number;
        newSpotPrice: BigNumber;
        newDelta: BigNumber;
        outputValue: BigNumber;
        protocolFee: BigNumber;
      }
    >;
  };

  MIN_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * See {ICurve-validateDelta}
   */
  validateDelta(
    delta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {ICurve-validateSpotPrice}
   */
  validateSpotPrice(
    newSpotPrice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * See {ICurve-getBuyInfo}
   */
  getBuyInfo(
    spotPrice: PromiseOrValue<BigNumberish>,
    delta: PromiseOrValue<BigNumberish>,
    numItems: PromiseOrValue<BigNumberish>,
    feeMultiplier: PromiseOrValue<BigNumberish>,
    protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      error: number;
      newSpotPrice: BigNumber;
      newDelta: BigNumber;
      inputValue: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  /**
   * See {ICurve-getSellInfo} If newSpotPrice is less than MIN_PRICE, newSpotPrice is set to MIN_PRICE instead. This is to prevent the spot price from ever becoming 0, which would decouple the price from the bonding curve (since 0 * delta is still 0)
   */
  getSellInfo(
    spotPrice: PromiseOrValue<BigNumberish>,
    delta: PromiseOrValue<BigNumberish>,
    numItems: PromiseOrValue<BigNumberish>,
    feeMultiplier: PromiseOrValue<BigNumberish>,
    protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      error: number;
      newSpotPrice: BigNumber;
      newDelta: BigNumber;
      outputValue: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  callStatic: {
    MIN_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {ICurve-validateDelta}
     */
    validateDelta(
      delta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {ICurve-validateSpotPrice}
     */
    validateSpotPrice(
      newSpotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * See {ICurve-getBuyInfo}
     */
    getBuyInfo(
      spotPrice: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      numItems: PromiseOrValue<BigNumberish>,
      feeMultiplier: PromiseOrValue<BigNumberish>,
      protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: number;
        newSpotPrice: BigNumber;
        newDelta: BigNumber;
        inputValue: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    /**
     * See {ICurve-getSellInfo} If newSpotPrice is less than MIN_PRICE, newSpotPrice is set to MIN_PRICE instead. This is to prevent the spot price from ever becoming 0, which would decouple the price from the bonding curve (since 0 * delta is still 0)
     */
    getSellInfo(
      spotPrice: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      numItems: PromiseOrValue<BigNumberish>,
      feeMultiplier: PromiseOrValue<BigNumberish>,
      protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        error: number;
        newSpotPrice: BigNumber;
        newDelta: BigNumber;
        outputValue: BigNumber;
        protocolFee: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    MIN_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See {ICurve-validateDelta}
     */
    validateDelta(
      delta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {ICurve-validateSpotPrice}
     */
    validateSpotPrice(
      newSpotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {ICurve-getBuyInfo}
     */
    getBuyInfo(
      spotPrice: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      numItems: PromiseOrValue<BigNumberish>,
      feeMultiplier: PromiseOrValue<BigNumberish>,
      protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * See {ICurve-getSellInfo} If newSpotPrice is less than MIN_PRICE, newSpotPrice is set to MIN_PRICE instead. This is to prevent the spot price from ever becoming 0, which would decouple the price from the bonding curve (since 0 * delta is still 0)
     */
    getSellInfo(
      spotPrice: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      numItems: PromiseOrValue<BigNumberish>,
      feeMultiplier: PromiseOrValue<BigNumberish>,
      protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See {ICurve-validateDelta}
     */
    validateDelta(
      delta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {ICurve-validateSpotPrice}
     */
    validateSpotPrice(
      newSpotPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {ICurve-getBuyInfo}
     */
    getBuyInfo(
      spotPrice: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      numItems: PromiseOrValue<BigNumberish>,
      feeMultiplier: PromiseOrValue<BigNumberish>,
      protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * See {ICurve-getSellInfo} If newSpotPrice is less than MIN_PRICE, newSpotPrice is set to MIN_PRICE instead. This is to prevent the spot price from ever becoming 0, which would decouple the price from the bonding curve (since 0 * delta is still 0)
     */
    getSellInfo(
      spotPrice: PromiseOrValue<BigNumberish>,
      delta: PromiseOrValue<BigNumberish>,
      numItems: PromiseOrValue<BigNumberish>,
      feeMultiplier: PromiseOrValue<BigNumberish>,
      protocolFeeMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
