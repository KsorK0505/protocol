/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LibAsset {
  export type AssetTypeStruct = {
    assetClass: PromiseOrValue<BytesLike>;
    data: PromiseOrValue<BytesLike>;
  };

  export type AssetTypeStructOutput = [string, string] & {
    assetClass: string;
    data: string;
  };

  export type AssetStruct = {
    assetType: LibAsset.AssetTypeStruct;
    value: PromiseOrValue<BigNumberish>;
  };

  export type AssetStructOutput = [
    LibAsset.AssetTypeStructOutput,
    BigNumber
  ] & { assetType: LibAsset.AssetTypeStructOutput; value: BigNumber };
}

export declare namespace LibOrder {
  export type OrderStruct = {
    maker: PromiseOrValue<string>;
    makeAsset: LibAsset.AssetStruct;
    taker: PromiseOrValue<string>;
    takeAsset: LibAsset.AssetStruct;
    salt: PromiseOrValue<BigNumberish>;
    start: PromiseOrValue<BigNumberish>;
    end: PromiseOrValue<BigNumberish>;
    dataType: PromiseOrValue<BytesLike>;
    data: PromiseOrValue<BytesLike>;
  };

  export type OrderStructOutput = [
    string,
    LibAsset.AssetStructOutput,
    string,
    LibAsset.AssetStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    maker: string;
    makeAsset: LibAsset.AssetStructOutput;
    taker: string;
    takeAsset: LibAsset.AssetStructOutput;
    salt: BigNumber;
    start: BigNumber;
    end: BigNumber;
    dataType: string;
    data: string;
  };
}

export declare namespace LibDirectTransfer {
  export type PurchaseStruct = {
    sellOrderMaker: PromiseOrValue<string>;
    sellOrderNftAmount: PromiseOrValue<BigNumberish>;
    nftAssetClass: PromiseOrValue<BytesLike>;
    nftData: PromiseOrValue<BytesLike>;
    sellOrderPaymentAmount: PromiseOrValue<BigNumberish>;
    paymentToken: PromiseOrValue<string>;
    sellOrderSalt: PromiseOrValue<BigNumberish>;
    sellOrderStart: PromiseOrValue<BigNumberish>;
    sellOrderEnd: PromiseOrValue<BigNumberish>;
    sellOrderDataType: PromiseOrValue<BytesLike>;
    sellOrderData: PromiseOrValue<BytesLike>;
    sellOrderSignature: PromiseOrValue<BytesLike>;
    buyOrderPaymentAmount: PromiseOrValue<BigNumberish>;
    buyOrderNftAmount: PromiseOrValue<BigNumberish>;
    buyOrderData: PromiseOrValue<BytesLike>;
  };

  export type PurchaseStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    sellOrderMaker: string;
    sellOrderNftAmount: BigNumber;
    nftAssetClass: string;
    nftData: string;
    sellOrderPaymentAmount: BigNumber;
    paymentToken: string;
    sellOrderSalt: BigNumber;
    sellOrderStart: BigNumber;
    sellOrderEnd: BigNumber;
    sellOrderDataType: string;
    sellOrderData: string;
    sellOrderSignature: string;
    buyOrderPaymentAmount: BigNumber;
    buyOrderNftAmount: BigNumber;
    buyOrderData: string;
  };
}

export interface IExchangeV2Interface extends utils.Interface {
  functions: {
    "matchOrders((address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes),bytes,(address,((bytes4,bytes),uint256),address,((bytes4,bytes),uint256),uint256,uint256,uint256,bytes4,bytes),bytes)": FunctionFragment;
    "directPurchase((address,uint256,bytes4,bytes,uint256,address,uint256,uint256,uint256,bytes4,bytes,bytes,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "matchOrders" | "directPurchase"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "matchOrders",
    values: [
      LibOrder.OrderStruct,
      PromiseOrValue<BytesLike>,
      LibOrder.OrderStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "directPurchase",
    values: [LibDirectTransfer.PurchaseStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "matchOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "directPurchase",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExchangeV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExchangeV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    matchOrders(
      orderLeft: LibOrder.OrderStruct,
      signatureLeft: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      signatureRight: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    directPurchase(
      direct: LibDirectTransfer.PurchaseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  matchOrders(
    orderLeft: LibOrder.OrderStruct,
    signatureLeft: PromiseOrValue<BytesLike>,
    orderRight: LibOrder.OrderStruct,
    signatureRight: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  directPurchase(
    direct: LibDirectTransfer.PurchaseStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    matchOrders(
      orderLeft: LibOrder.OrderStruct,
      signatureLeft: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      signatureRight: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    directPurchase(
      direct: LibDirectTransfer.PurchaseStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    matchOrders(
      orderLeft: LibOrder.OrderStruct,
      signatureLeft: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      signatureRight: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    directPurchase(
      direct: LibDirectTransfer.PurchaseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    matchOrders(
      orderLeft: LibOrder.OrderStruct,
      signatureLeft: PromiseOrValue<BytesLike>,
      orderRight: LibOrder.OrderStruct,
      signatureRight: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    directPurchase(
      direct: LibDirectTransfer.PurchaseStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
