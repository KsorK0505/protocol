/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IBlur, IBlurInterface } from "../IBlur";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "trader",
                type: "address",
              },
              {
                internalType: "enum IBlur.Side",
                name: "side",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "matchingPolicy",
                type: "address",
              },
              {
                internalType: "address",
                name: "collection",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "paymentToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "listingTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expirationTime",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint16",
                    name: "rate",
                    type: "uint16",
                  },
                  {
                    internalType: "address payable",
                    name: "recipient",
                    type: "address",
                  },
                ],
                internalType: "struct IBlur.Fee[]",
                name: "fees",
                type: "tuple[]",
              },
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "extraParams",
                type: "bytes",
              },
            ],
            internalType: "struct IBlur.Order",
            name: "order",
            type: "tuple",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "extraSignature",
            type: "bytes",
          },
          {
            internalType: "enum IBlur.SignatureVersion",
            name: "signatureVersion",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
        ],
        internalType: "struct IBlur.Input",
        name: "sell",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "trader",
                type: "address",
              },
              {
                internalType: "enum IBlur.Side",
                name: "side",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "matchingPolicy",
                type: "address",
              },
              {
                internalType: "address",
                name: "collection",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "paymentToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "listingTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "expirationTime",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint16",
                    name: "rate",
                    type: "uint16",
                  },
                  {
                    internalType: "address payable",
                    name: "recipient",
                    type: "address",
                  },
                ],
                internalType: "struct IBlur.Fee[]",
                name: "fees",
                type: "tuple[]",
              },
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "extraParams",
                type: "bytes",
              },
            ],
            internalType: "struct IBlur.Order",
            name: "order",
            type: "tuple",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "extraSignature",
            type: "bytes",
          },
          {
            internalType: "enum IBlur.SignatureVersion",
            name: "signatureVersion",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
        ],
        internalType: "struct IBlur.Input",
        name: "buy",
        type: "tuple",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IBlur__factory {
  static readonly abi = _abi;
  static createInterface(): IBlurInterface {
    return new utils.Interface(_abi) as IBlurInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IBlur {
    return new Contract(address, _abi, signerOrProvider) as IBlur;
  }
}
