/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IExchangeV2, IExchangeV2Interface } from "../IExchangeV2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "makeAsset",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "takeAsset",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
          {
            internalType: "bytes4",
            name: "dataType",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibOrder.Order",
        name: "orderLeft",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signatureLeft",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "makeAsset",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "bytes4",
                    name: "assetClass",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct LibAsset.AssetType",
                name: "assetType",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct LibAsset.Asset",
            name: "takeAsset",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "start",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "end",
            type: "uint256",
          },
          {
            internalType: "bytes4",
            name: "dataType",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct LibOrder.Order",
        name: "orderRight",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signatureRight",
        type: "bytes",
      },
    ],
    name: "matchOrders",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sellOrderMaker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sellOrderNftAmount",
            type: "uint256",
          },
          {
            internalType: "bytes4",
            name: "nftAssetClass",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "nftData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "sellOrderPaymentAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "paymentToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sellOrderSalt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellOrderStart",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "sellOrderEnd",
            type: "uint256",
          },
          {
            internalType: "bytes4",
            name: "sellOrderDataType",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "sellOrderData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "sellOrderSignature",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "buyOrderPaymentAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "buyOrderNftAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "buyOrderData",
            type: "bytes",
          },
        ],
        internalType: "struct LibDirectTransfer.Purchase",
        name: "direct",
        type: "tuple",
      },
    ],
    name: "directPurchase",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IExchangeV2__factory {
  static readonly abi = _abi;
  static createInterface(): IExchangeV2Interface {
    return new utils.Interface(_abi) as IExchangeV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IExchangeV2 {
    return new Contract(address, _abi, signerOrProvider) as IExchangeV2;
  }
}
