/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace LibSeaPort {
  export type OfferItemStruct = {
    itemType: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    identifierOrCriteria: PromiseOrValue<BigNumberish>;
    startAmount: PromiseOrValue<BigNumberish>;
    endAmount: PromiseOrValue<BigNumberish>;
  };

  export type OfferItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    itemType: number;
    token: string;
    identifierOrCriteria: BigNumber;
    startAmount: BigNumber;
    endAmount: BigNumber;
  };

  export type ConsiderationItemStruct = {
    itemType: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    identifierOrCriteria: PromiseOrValue<BigNumberish>;
    startAmount: PromiseOrValue<BigNumberish>;
    endAmount: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type ConsiderationItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    itemType: number;
    token: string;
    identifierOrCriteria: BigNumber;
    startAmount: BigNumber;
    endAmount: BigNumber;
    recipient: string;
  };

  export type OrderParametersStruct = {
    offerer: PromiseOrValue<string>;
    zone: PromiseOrValue<string>;
    offer: LibSeaPort.OfferItemStruct[];
    consideration: LibSeaPort.ConsiderationItemStruct[];
    orderType: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    zoneHash: PromiseOrValue<BytesLike>;
    salt: PromiseOrValue<BigNumberish>;
    conduitKey: PromiseOrValue<BytesLike>;
    totalOriginalConsiderationItems: PromiseOrValue<BigNumberish>;
  };

  export type OrderParametersStructOutput = [
    string,
    string,
    LibSeaPort.OfferItemStructOutput[],
    LibSeaPort.ConsiderationItemStructOutput[],
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    BigNumber
  ] & {
    offerer: string;
    zone: string;
    offer: LibSeaPort.OfferItemStructOutput[];
    consideration: LibSeaPort.ConsiderationItemStructOutput[];
    orderType: number;
    startTime: BigNumber;
    endTime: BigNumber;
    zoneHash: string;
    salt: BigNumber;
    conduitKey: string;
    totalOriginalConsiderationItems: BigNumber;
  };

  export type AdvancedOrderStruct = {
    parameters: LibSeaPort.OrderParametersStruct;
    numerator: PromiseOrValue<BigNumberish>;
    denominator: PromiseOrValue<BigNumberish>;
    signature: PromiseOrValue<BytesLike>;
    extraData: PromiseOrValue<BytesLike>;
  };

  export type AdvancedOrderStructOutput = [
    LibSeaPort.OrderParametersStructOutput,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    parameters: LibSeaPort.OrderParametersStructOutput;
    numerator: BigNumber;
    denominator: BigNumber;
    signature: string;
    extraData: string;
  };

  export type CriteriaResolverStruct = {
    orderIndex: PromiseOrValue<BigNumberish>;
    side: PromiseOrValue<BigNumberish>;
    index: PromiseOrValue<BigNumberish>;
    identifier: PromiseOrValue<BigNumberish>;
    criteriaProof: PromiseOrValue<BytesLike>[];
  };

  export type CriteriaResolverStructOutput = [
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    orderIndex: BigNumber;
    side: number;
    index: BigNumber;
    identifier: BigNumber;
    criteriaProof: string[];
  };

  export type FulfillmentComponentStruct = {
    orderIndex: PromiseOrValue<BigNumberish>;
    itemIndex: PromiseOrValue<BigNumberish>;
  };

  export type FulfillmentComponentStructOutput = [BigNumber, BigNumber] & {
    orderIndex: BigNumber;
    itemIndex: BigNumber;
  };

  export type ReceivedItemStruct = {
    itemType: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    identifier: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type ReceivedItemStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    itemType: number;
    token: string;
    identifier: BigNumber;
    amount: BigNumber;
    recipient: string;
  };

  export type ExecutionStruct = {
    item: LibSeaPort.ReceivedItemStruct;
    offerer: PromiseOrValue<string>;
    conduitKey: PromiseOrValue<BytesLike>;
  };

  export type ExecutionStructOutput = [
    LibSeaPort.ReceivedItemStructOutput,
    string,
    string
  ] & {
    item: LibSeaPort.ReceivedItemStructOutput;
    offerer: string;
    conduitKey: string;
  };

  export type AdditionalRecipientStruct = {
    amount: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
  };

  export type AdditionalRecipientStructOutput = [BigNumber, string] & {
    amount: BigNumber;
    recipient: string;
  };

  export type BasicOrderParametersStruct = {
    considerationToken: PromiseOrValue<string>;
    considerationIdentifier: PromiseOrValue<BigNumberish>;
    considerationAmount: PromiseOrValue<BigNumberish>;
    offerer: PromiseOrValue<string>;
    zone: PromiseOrValue<string>;
    offerToken: PromiseOrValue<string>;
    offerIdentifier: PromiseOrValue<BigNumberish>;
    offerAmount: PromiseOrValue<BigNumberish>;
    basicOrderType: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    zoneHash: PromiseOrValue<BytesLike>;
    salt: PromiseOrValue<BigNumberish>;
    offererConduitKey: PromiseOrValue<BytesLike>;
    fulfillerConduitKey: PromiseOrValue<BytesLike>;
    totalOriginalAdditionalRecipients: PromiseOrValue<BigNumberish>;
    additionalRecipients: LibSeaPort.AdditionalRecipientStruct[];
    signature: PromiseOrValue<BytesLike>;
  };

  export type BasicOrderParametersStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    LibSeaPort.AdditionalRecipientStructOutput[],
    string
  ] & {
    considerationToken: string;
    considerationIdentifier: BigNumber;
    considerationAmount: BigNumber;
    offerer: string;
    zone: string;
    offerToken: string;
    offerIdentifier: BigNumber;
    offerAmount: BigNumber;
    basicOrderType: number;
    startTime: BigNumber;
    endTime: BigNumber;
    zoneHash: string;
    salt: BigNumber;
    offererConduitKey: string;
    fulfillerConduitKey: string;
    totalOriginalAdditionalRecipients: BigNumber;
    additionalRecipients: LibSeaPort.AdditionalRecipientStructOutput[];
    signature: string;
  };
}

export interface ISeaPortInterface extends utils.Interface {
  functions: {
    "fulfillAdvancedOrder(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),(uint256,uint8,uint256,uint256,bytes32[])[],bytes32,address)": FunctionFragment;
    "fulfillAvailableAdvancedOrders(((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes)[],(uint256,uint8,uint256,uint256,bytes32[])[],(uint256,uint256)[][],(uint256,uint256)[][],bytes32,address,uint256)": FunctionFragment;
    "fulfillBasicOrder((address,uint256,uint256,address,address,address,uint256,uint256,uint8,uint256,uint256,bytes32,uint256,bytes32,bytes32,uint256,(uint256,address)[],bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fulfillAdvancedOrder"
      | "fulfillAvailableAdvancedOrders"
      | "fulfillBasicOrder"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fulfillAdvancedOrder",
    values: [
      LibSeaPort.AdvancedOrderStruct,
      LibSeaPort.CriteriaResolverStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillAvailableAdvancedOrders",
    values: [
      LibSeaPort.AdvancedOrderStruct[],
      LibSeaPort.CriteriaResolverStruct[],
      LibSeaPort.FulfillmentComponentStruct[][],
      LibSeaPort.FulfillmentComponentStruct[][],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillBasicOrder",
    values: [LibSeaPort.BasicOrderParametersStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfillAdvancedOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillAvailableAdvancedOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillBasicOrder",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ISeaPort extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISeaPortInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfillAdvancedOrder(
      advancedOrder: LibSeaPort.AdvancedOrderStruct,
      criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
      fulfillerConduitKey: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillAvailableAdvancedOrders(
      advancedOrders: LibSeaPort.AdvancedOrderStruct[],
      criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
      offerFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
      considerationFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
      fulfillerConduitKey: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      maximumFulfilled: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fulfillBasicOrder(
      parameters: LibSeaPort.BasicOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fulfillAdvancedOrder(
    advancedOrder: LibSeaPort.AdvancedOrderStruct,
    criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
    fulfillerConduitKey: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillAvailableAdvancedOrders(
    advancedOrders: LibSeaPort.AdvancedOrderStruct[],
    criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
    offerFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
    considerationFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
    fulfillerConduitKey: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    maximumFulfilled: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fulfillBasicOrder(
    parameters: LibSeaPort.BasicOrderParametersStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fulfillAdvancedOrder(
      advancedOrder: LibSeaPort.AdvancedOrderStruct,
      criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
      fulfillerConduitKey: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fulfillAvailableAdvancedOrders(
      advancedOrders: LibSeaPort.AdvancedOrderStruct[],
      criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
      offerFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
      considerationFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
      fulfillerConduitKey: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      maximumFulfilled: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], LibSeaPort.ExecutionStructOutput[]] & {
        availableOrders: boolean[];
        executions: LibSeaPort.ExecutionStructOutput[];
      }
    >;

    fulfillBasicOrder(
      parameters: LibSeaPort.BasicOrderParametersStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    fulfillAdvancedOrder(
      advancedOrder: LibSeaPort.AdvancedOrderStruct,
      criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
      fulfillerConduitKey: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillAvailableAdvancedOrders(
      advancedOrders: LibSeaPort.AdvancedOrderStruct[],
      criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
      offerFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
      considerationFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
      fulfillerConduitKey: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      maximumFulfilled: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fulfillBasicOrder(
      parameters: LibSeaPort.BasicOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfillAdvancedOrder(
      advancedOrder: LibSeaPort.AdvancedOrderStruct,
      criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
      fulfillerConduitKey: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillAvailableAdvancedOrders(
      advancedOrders: LibSeaPort.AdvancedOrderStruct[],
      criteriaResolvers: LibSeaPort.CriteriaResolverStruct[],
      offerFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
      considerationFulfillments: LibSeaPort.FulfillmentComponentStruct[][],
      fulfillerConduitKey: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      maximumFulfilled: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fulfillBasicOrder(
      parameters: LibSeaPort.BasicOrderParametersStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
