/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IWyvernExchangeInterface extends utils.Interface {
  functions: {
    "atomicMatch_(address[14],uint256[18],uint8[8],bytes,bytes,bytes,bytes,bytes,bytes,uint8[2],bytes32[5])": FunctionFragment;
    "calculateFinalPrice(uint8,uint8,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "atomicMatch_" | "calculateFinalPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "atomicMatch_",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFinalPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "atomicMatch_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFinalPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IWyvernExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWyvernExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    atomicMatch_(
      addrs: PromiseOrValue<string>[],
      uints: PromiseOrValue<BigNumberish>[],
      feeMethodsSidesKindsHowToCalls: PromiseOrValue<BigNumberish>[],
      calldataBuy: PromiseOrValue<BytesLike>,
      calldataSell: PromiseOrValue<BytesLike>,
      replacementPatternBuy: PromiseOrValue<BytesLike>,
      replacementPatternSell: PromiseOrValue<BytesLike>,
      staticExtradataBuy: PromiseOrValue<BytesLike>,
      staticExtradataSell: PromiseOrValue<BytesLike>,
      vs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      rssMetadata: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateFinalPrice(
      side: PromiseOrValue<BigNumberish>,
      saleKind: PromiseOrValue<BigNumberish>,
      basePrice: PromiseOrValue<BigNumberish>,
      extra: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  atomicMatch_(
    addrs: PromiseOrValue<string>[],
    uints: PromiseOrValue<BigNumberish>[],
    feeMethodsSidesKindsHowToCalls: PromiseOrValue<BigNumberish>[],
    calldataBuy: PromiseOrValue<BytesLike>,
    calldataSell: PromiseOrValue<BytesLike>,
    replacementPatternBuy: PromiseOrValue<BytesLike>,
    replacementPatternSell: PromiseOrValue<BytesLike>,
    staticExtradataBuy: PromiseOrValue<BytesLike>,
    staticExtradataSell: PromiseOrValue<BytesLike>,
    vs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    rssMetadata: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateFinalPrice(
    side: PromiseOrValue<BigNumberish>,
    saleKind: PromiseOrValue<BigNumberish>,
    basePrice: PromiseOrValue<BigNumberish>,
    extra: PromiseOrValue<BigNumberish>,
    listingTime: PromiseOrValue<BigNumberish>,
    expirationTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    atomicMatch_(
      addrs: PromiseOrValue<string>[],
      uints: PromiseOrValue<BigNumberish>[],
      feeMethodsSidesKindsHowToCalls: PromiseOrValue<BigNumberish>[],
      calldataBuy: PromiseOrValue<BytesLike>,
      calldataSell: PromiseOrValue<BytesLike>,
      replacementPatternBuy: PromiseOrValue<BytesLike>,
      replacementPatternSell: PromiseOrValue<BytesLike>,
      staticExtradataBuy: PromiseOrValue<BytesLike>,
      staticExtradataSell: PromiseOrValue<BytesLike>,
      vs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      rssMetadata: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateFinalPrice(
      side: PromiseOrValue<BigNumberish>,
      saleKind: PromiseOrValue<BigNumberish>,
      basePrice: PromiseOrValue<BigNumberish>,
      extra: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    atomicMatch_(
      addrs: PromiseOrValue<string>[],
      uints: PromiseOrValue<BigNumberish>[],
      feeMethodsSidesKindsHowToCalls: PromiseOrValue<BigNumberish>[],
      calldataBuy: PromiseOrValue<BytesLike>,
      calldataSell: PromiseOrValue<BytesLike>,
      replacementPatternBuy: PromiseOrValue<BytesLike>,
      replacementPatternSell: PromiseOrValue<BytesLike>,
      staticExtradataBuy: PromiseOrValue<BytesLike>,
      staticExtradataSell: PromiseOrValue<BytesLike>,
      vs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      rssMetadata: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateFinalPrice(
      side: PromiseOrValue<BigNumberish>,
      saleKind: PromiseOrValue<BigNumberish>,
      basePrice: PromiseOrValue<BigNumberish>,
      extra: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    atomicMatch_(
      addrs: PromiseOrValue<string>[],
      uints: PromiseOrValue<BigNumberish>[],
      feeMethodsSidesKindsHowToCalls: PromiseOrValue<BigNumberish>[],
      calldataBuy: PromiseOrValue<BytesLike>,
      calldataSell: PromiseOrValue<BytesLike>,
      replacementPatternBuy: PromiseOrValue<BytesLike>,
      replacementPatternSell: PromiseOrValue<BytesLike>,
      staticExtradataBuy: PromiseOrValue<BytesLike>,
      staticExtradataSell: PromiseOrValue<BytesLike>,
      vs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      rssMetadata: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>
      ],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateFinalPrice(
      side: PromiseOrValue<BigNumberish>,
      saleKind: PromiseOrValue<BigNumberish>,
      basePrice: PromiseOrValue<BigNumberish>,
      extra: PromiseOrValue<BigNumberish>,
      listingTime: PromiseOrValue<BigNumberish>,
      expirationTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
